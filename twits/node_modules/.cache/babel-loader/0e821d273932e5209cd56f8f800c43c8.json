{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst client_subclient_1 = __importDefault(require(\"../client.subclient\"));\n\nconst globals_1 = require(\"../globals\");\n\nconst paginators_1 = require(\"../paginators\");\n\nconst client_v2_labs_read_1 = __importDefault(require(\"../v2-labs/client.v2.labs.read\"));\n\nconst user_paginator_v2_1 = require(\"../paginators/user.paginator.v2\");\n\nconst helpers_1 = require(\"../helpers\");\n/**\n * Base Twitter v2 client with only read right.\n */\n\n\nclass TwitterApiv2ReadOnly extends client_subclient_1.default {\n  constructor() {\n    super(...arguments);\n    this._prefix = globals_1.API_V2_PREFIX;\n  }\n  /* Sub-clients */\n\n  /**\n   * Get a client for v2 labs endpoints.\n   */\n\n\n  get labs() {\n    if (this._labs) return this._labs;\n    return this._labs = new client_v2_labs_read_1.default(this);\n  }\n\n  async search(queryOrOptions) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const query = typeof queryOrOptions === 'string' ? queryOrOptions : undefined;\n    const realOptions = typeof queryOrOptions === 'object' && queryOrOptions !== null ? queryOrOptions : options;\n    const queryParams = { ...realOptions,\n      query\n    };\n    const initialRq = await this.get('tweets/search/recent', queryParams, {\n      fullResponse: true\n    });\n    return new paginators_1.TweetSearchRecentV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * The full-archive search endpoint returns the complete history of public Tweets matching a search query;\n   * since the first Tweet was created March 26, 2006.\n   *\n   * This endpoint is only available to those users who have been approved for the Academic Research product track.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get-tweets-search-all\n   */\n\n\n  async searchAll(query) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const queryParams = { ...options,\n      query\n    };\n    const initialRq = await this.get('tweets/search/all', queryParams, {\n      fullResponse: true\n    });\n    return new paginators_1.TweetSearchAllV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns a variety of information about a single Tweet specified by the requested ID.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets-id\n   *\n   * OAuth2 scope: `users.read`, `tweet.read`\n   */\n\n\n  singleTweet(tweetId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('tweets/:id', options, {\n      params: {\n        id: tweetId\n      }\n    });\n  }\n  /**\n   * Returns a variety of information about tweets specified by list of IDs.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets\n   *\n   * OAuth2 scope: `users.read`, `tweet.read`\n   */\n\n\n  tweets(tweetIds) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('tweets', {\n      ids: tweetIds,\n      ...options\n    });\n  }\n  /**\n   * The recent Tweet counts endpoint returns count of Tweets from the last seven days that match a search query.\n   * OAuth2 Bearer auth only.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/counts/api-reference/get-tweets-counts-recent\n   */\n\n\n  tweetCountRecent(query) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('tweets/counts/recent', {\n      query,\n      ...options\n    });\n  }\n  /**\n   * This endpoint is only available to those users who have been approved for the Academic Research product track.\n   * The full-archive search endpoint returns the complete history of public Tweets matching a search query;\n   * since the first Tweet was created March 26, 2006.\n   * OAuth2 Bearer auth only.\n   * **This endpoint has pagination, yet it is not supported by bundled paginators. Use `next_token` to fetch next page.**\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/counts/api-reference/get-tweets-counts-all\n   */\n\n\n  tweetCountAll(query) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('tweets/counts/all', {\n      query,\n      ...options\n    });\n  }\n\n  async tweetRetweetedBy(tweetId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      asPaginator,\n      ...parameters\n    } = options;\n    const initialRq = await this.get('tweets/:id/retweeted_by', parameters, {\n      fullResponse: true,\n      params: {\n        id: tweetId\n      }\n    });\n\n    if (!asPaginator) {\n      return initialRq.data;\n    }\n\n    return new user_paginator_v2_1.TweetRetweetersUsersV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: parameters,\n      sharedParams: {\n        id: tweetId\n      }\n    });\n  }\n\n  async tweetLikedBy(tweetId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      asPaginator,\n      ...parameters\n    } = options;\n    const initialRq = await this.get('tweets/:id/liking_users', parameters, {\n      fullResponse: true,\n      params: {\n        id: tweetId\n      }\n    });\n\n    if (!asPaginator) {\n      return initialRq.data;\n    }\n\n    return new user_paginator_v2_1.TweetLikingUsersV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: parameters,\n      sharedParams: {\n        id: tweetId\n      }\n    });\n  }\n  /**\n   * Allows you to retrieve a collection of the most recent Tweets and Retweets posted by you and users you follow, also known as home timeline.\n   * This endpoint returns up to the last 3200 Tweets.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-reverse-chronological\n   *\n   * OAuth 2 scopes: `tweet.read` `users.read`\n   */\n\n\n  async homeTimeline() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const meUser = await this.getCurrentUserV2Object();\n    const initialRq = await this.get('users/:id/timelines/reverse_chronological', options, {\n      fullResponse: true,\n      params: {\n        id: meUser.data.id\n      }\n    });\n    return new paginators_1.TweetHomeTimelineV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: options,\n      sharedParams: {\n        id: meUser.data.id\n      }\n    });\n  }\n  /**\n   * Returns Tweets composed by a single user, specified by the requested user ID.\n   * By default, the most recent ten Tweets are returned per request.\n   * Using pagination, the most recent 3,200 Tweets can be retrieved.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-tweets\n   */\n\n\n  async userTimeline(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const initialRq = await this.get('users/:id/tweets', options, {\n      fullResponse: true,\n      params: {\n        id: userId\n      }\n    });\n    return new paginators_1.TweetUserTimelineV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: options,\n      sharedParams: {\n        id: userId\n      }\n    });\n  }\n  /**\n   * Returns Tweets mentioning a single user specified by the requested user ID.\n   * By default, the most recent ten Tweets are returned per request.\n   * Using pagination, up to the most recent 800 Tweets can be retrieved.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-mentions\n   */\n\n\n  async userMentionTimeline(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const initialRq = await this.get('users/:id/mentions', options, {\n      fullResponse: true,\n      params: {\n        id: userId\n      }\n    });\n    return new paginators_1.TweetUserMentionTimelineV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: options,\n      sharedParams: {\n        id: userId\n      }\n    });\n  }\n  /**\n   * Returns Quote Tweets for a Tweet specified by the requested Tweet ID.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/quote-tweets/api-reference/get-tweets-id-quote_tweets\n   *\n   * OAuth2 scopes: `users.read` `tweet.read`\n   */\n\n\n  async quotes(tweetId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const initialRq = await this.get('tweets/:id/quote_tweets', options, {\n      fullResponse: true,\n      params: {\n        id: tweetId\n      }\n    });\n    return new paginators_1.QuotedTweetsTimelineV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: options,\n      sharedParams: {\n        id: tweetId\n      }\n    });\n  }\n  /* Bookmarks */\n\n  /**\n   * Allows you to get information about a authenticated userâ€™s 800 most recent bookmarked Tweets.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/bookmarks/api-reference/get-users-id-bookmarks\n   *\n   * OAuth2 scopes: `users.read` `tweet.read` `bookmark.read`\n   */\n\n\n  async bookmarks() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const user = await this.getCurrentUserV2Object();\n    const initialRq = await this.get('users/:id/bookmarks', options, {\n      fullResponse: true,\n      params: {\n        id: user.data.id\n      }\n    });\n    return new paginators_1.TweetBookmarksTimelineV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: options,\n      sharedParams: {\n        id: user.data.id\n      }\n    });\n  }\n  /* Users */\n\n  /**\n   * Returns information about an authorized user.\n   * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-me\n   *\n   * OAuth2 scopes: `tweet.read` & `users.read`\n   */\n\n\n  me() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.get('users/me', options);\n  }\n  /**\n   * Returns a variety of information about a single user specified by the requested ID.\n   * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-id\n   */\n\n\n  user(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('users/:id', options, {\n      params: {\n        id: userId\n      }\n    });\n  }\n  /**\n   * Returns a variety of information about one or more users specified by the requested IDs.\n   * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users\n   */\n\n\n  users(userIds) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const ids = Array.isArray(userIds) ? userIds.join(',') : userIds;\n    return this.get('users', { ...options,\n      ids\n    });\n  }\n  /**\n   * Returns a variety of information about a single user specified by their username.\n   * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by-username-username\n   */\n\n\n  userByUsername(username) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('users/by/username/:username', options, {\n      params: {\n        username\n      }\n    });\n  }\n  /**\n   * Returns a variety of information about one or more users specified by their usernames.\n   * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by\n   *\n   * OAuth2 scope: `users.read`, `tweet.read`\n   */\n\n\n  usersByUsernames(usernames) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    usernames = Array.isArray(usernames) ? usernames.join(',') : usernames;\n    return this.get('users/by', { ...options,\n      usernames\n    });\n  }\n\n  async followers(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      asPaginator,\n      ...parameters\n    } = options;\n    const params = {\n      id: userId\n    };\n\n    if (!asPaginator) {\n      return this.get('users/:id/followers', parameters, {\n        params\n      });\n    }\n\n    const initialRq = await this.get('users/:id/followers', parameters, {\n      fullResponse: true,\n      params\n    });\n    return new user_paginator_v2_1.UserFollowersV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: parameters,\n      sharedParams: params\n    });\n  }\n\n  async following(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      asPaginator,\n      ...parameters\n    } = options;\n    const params = {\n      id: userId\n    };\n\n    if (!asPaginator) {\n      return this.get('users/:id/following', parameters, {\n        params\n      });\n    }\n\n    const initialRq = await this.get('users/:id/following', parameters, {\n      fullResponse: true,\n      params\n    });\n    return new user_paginator_v2_1.UserFollowingV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: parameters,\n      sharedParams: params\n    });\n  }\n  /**\n   * Allows you to get information about a userâ€™s liked Tweets.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/get-users-id-liked_tweets\n   */\n\n\n  async userLikedTweets(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const params = {\n      id: userId\n    };\n    const initialRq = await this.get('users/:id/liked_tweets', options, {\n      fullResponse: true,\n      params\n    });\n    return new paginators_1.TweetV2UserLikedTweetsPaginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: { ...options\n      },\n      sharedParams: params\n    });\n  }\n  /**\n   * Returns a list of users who are blocked by the authenticating user.\n   * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/get-users-blocking\n   */\n\n\n  async userBlockingUsers(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const params = {\n      id: userId\n    };\n    const initialRq = await this.get('users/:id/blocking', options, {\n      fullResponse: true,\n      params\n    });\n    return new user_paginator_v2_1.UserBlockingUsersV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: { ...options\n      },\n      sharedParams: params\n    });\n  }\n  /**\n   * Returns a list of users who are muted by the authenticating user.\n   * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/get-users-muting\n   */\n\n\n  async userMutingUsers(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const params = {\n      id: userId\n    };\n    const initialRq = await this.get('users/:id/muting', options, {\n      fullResponse: true,\n      params\n    });\n    return new user_paginator_v2_1.UserMutingUsersV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: { ...options\n      },\n      sharedParams: params\n    });\n  }\n  /* Lists */\n\n  /**\n   * Returns the details of a specified List.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/list-lookup/api-reference/get-lists-id\n   */\n\n\n  list(id) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('lists/:id', options, {\n      params: {\n        id\n      }\n    });\n  }\n  /**\n   * Returns all Lists owned by the specified user.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/list-lookup/api-reference/get-users-id-owned_lists\n   */\n\n\n  async listsOwned(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const params = {\n      id: userId\n    };\n    const initialRq = await this.get('users/:id/owned_lists', options, {\n      fullResponse: true,\n      params\n    });\n    return new paginators_1.UserOwnedListsV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: { ...options\n      },\n      sharedParams: params\n    });\n  }\n  /**\n   * Returns all Lists a specified user is a member of.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/list-members/api-reference/get-users-id-list_memberships\n   */\n\n\n  async listMemberships(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const params = {\n      id: userId\n    };\n    const initialRq = await this.get('users/:id/list_memberships', options, {\n      fullResponse: true,\n      params\n    });\n    return new paginators_1.UserListMembershipsV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: { ...options\n      },\n      sharedParams: params\n    });\n  }\n  /**\n   * Returns all Lists a specified user follows.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/list-follows/api-reference/get-users-id-followed_lists\n   */\n\n\n  async listFollowed(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const params = {\n      id: userId\n    };\n    const initialRq = await this.get('users/:id/followed_lists', options, {\n      fullResponse: true,\n      params\n    });\n    return new paginators_1.UserListFollowedV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: { ...options\n      },\n      sharedParams: params\n    });\n  }\n  /**\n   * Returns a list of Tweets from the specified List.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/list-tweets/api-reference/get-lists-id-tweets\n   */\n\n\n  async listTweets(listId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const params = {\n      id: listId\n    };\n    const initialRq = await this.get('lists/:id/tweets', options, {\n      fullResponse: true,\n      params\n    });\n    return new paginators_1.TweetV2ListTweetsPaginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: { ...options\n      },\n      sharedParams: params\n    });\n  }\n  /**\n   * Returns a list of users who are members of the specified List.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/list-members/api-reference/get-lists-id-members\n   */\n\n\n  async listMembers(listId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const params = {\n      id: listId\n    };\n    const initialRq = await this.get('lists/:id/members', options, {\n      fullResponse: true,\n      params\n    });\n    return new user_paginator_v2_1.UserListMembersV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: { ...options\n      },\n      sharedParams: params\n    });\n  }\n  /**\n   * Returns a list of users who are followers of the specified List.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/list-follows/api-reference/get-lists-id-followers\n   */\n\n\n  async listFollowers(listId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const params = {\n      id: listId\n    };\n    const initialRq = await this.get('lists/:id/followers', options, {\n      fullResponse: true,\n      params\n    });\n    return new user_paginator_v2_1.UserListFollowersV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: { ...options\n      },\n      sharedParams: params\n    });\n  }\n  /* Spaces */\n\n  /**\n   * Get a single space by ID.\n   * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-id\n   *\n   * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n   */\n\n\n  space(spaceId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('spaces/:id', options, {\n      params: {\n        id: spaceId\n      }\n    });\n  }\n  /**\n   * Get spaces using their IDs.\n   * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces\n   *\n   * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n   */\n\n\n  spaces(spaceIds) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('spaces', {\n      ids: spaceIds,\n      ...options\n    });\n  }\n  /**\n   * Get spaces using their creator user ID(s). (no pagination available)\n   * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-by-creator-ids\n   *\n   * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n   */\n\n\n  spacesByCreators(creatorIds) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('spaces/by/creator_ids', {\n      user_ids: creatorIds,\n      ...options\n    });\n  }\n  /**\n   * Search through spaces using multiple params. (no pagination available)\n   * https://developer.twitter.com/en/docs/twitter-api/spaces/search/api-reference/get-spaces-search\n   */\n\n\n  searchSpaces(options) {\n    return this.get('spaces/search', options);\n  }\n  /**\n  * Returns a list of user who purchased a ticket to the requested Space.\n  * You must authenticate the request using the Access Token of the creator of the requested Space.\n  *\n  * **OAuth 2.0 Access Token required**\n  *\n  * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-id-buyers\n  *\n  * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n  */\n\n\n  spaceBuyers(spaceId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('spaces/:id/buyers', options, {\n      params: {\n        id: spaceId\n      }\n    });\n  }\n\n  searchStream() {\n    let {\n      autoConnect,\n      ...options\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.getStream('tweets/search/stream', options, {\n      payloadIsError: helpers_1.isTweetStreamV2ErrorPayload,\n      autoConnect\n    });\n  }\n  /**\n   * Return a list of rules currently active on the streaming endpoint, either as a list or individually.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/get-tweets-search-stream-rules\n   */\n\n\n  streamRules() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.get('tweets/search/stream/rules', options);\n  }\n\n  updateStreamRules(options) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.post('tweets/search/stream/rules', options, {\n      query\n    });\n  }\n\n  sampleStream() {\n    let {\n      autoConnect,\n      ...options\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.getStream('tweets/sample/stream', options, {\n      payloadIsError: helpers_1.isTweetStreamV2ErrorPayload,\n      autoConnect\n    });\n  }\n  /* Batch compliance */\n\n  /**\n   * Returns a list of recent compliance jobs.\n   * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/get-compliance-jobs\n   */\n\n\n  complianceJobs(options) {\n    return this.get('compliance/jobs', options);\n  }\n  /**\n   * Get a single compliance job with the specified ID.\n   * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/get-compliance-jobs-id\n   */\n\n\n  complianceJob(jobId) {\n    return this.get('compliance/jobs/:id', undefined, {\n      params: {\n        id: jobId\n      }\n    });\n  }\n  /**\n   * Creates a new compliance job for Tweet IDs or user IDs, send your file, await result and parse it into an array.\n   * You can run one batch job at a time. Returns the created job, but **not the job result!**.\n   *\n   * You can obtain the result (**after job is completed**) with `.complianceJobResult`.\n   * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/post-compliance-jobs\n   */\n\n\n  async sendComplianceJob(jobParams) {\n    const job = await this.post('compliance/jobs', {\n      type: jobParams.type,\n      name: jobParams.name\n    }); // Send the IDs\n\n    const rawIdsBody = jobParams.ids instanceof Buffer ? jobParams.ids : Buffer.from(jobParams.ids.join('\\n')); // Upload the IDs\n\n    await this.put(job.data.upload_url, rawIdsBody, {\n      forceBodyMode: 'raw',\n      enableAuth: false,\n      headers: {\n        'Content-Type': 'text/plain'\n      },\n      prefix: ''\n    });\n    return job;\n  }\n  /**\n   * Get the result of a running or completed job, obtained through `.complianceJob`, `.complianceJobs` or `.sendComplianceJob`.\n   * If job is still running (`in_progress`), it will await until job is completed. **This could be quite long!**\n   * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/post-compliance-jobs\n   */\n\n\n  async complianceJobResult(job) {\n    let runningJob = job;\n\n    while (runningJob.status !== 'complete') {\n      if (runningJob.status === 'expired' || runningJob.status === 'failed') {\n        throw new Error('Job failed to be completed.');\n      }\n\n      await new Promise(resolve => setTimeout(resolve, 3500));\n      runningJob = (await this.complianceJob(job.id)).data;\n    } // Download and parse result\n\n\n    const result = await this.get(job.download_url, undefined, {\n      enableAuth: false,\n      prefix: ''\n    });\n    return result.trim().split('\\n').filter(line => line).map(line => JSON.parse(line));\n  }\n\n}\n\nexports.default = TwitterApiv2ReadOnly;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","client_subclient_1","require","globals_1","paginators_1","client_v2_labs_read_1","user_paginator_v2_1","helpers_1","TwitterApiv2ReadOnly","default","constructor","arguments","_prefix","API_V2_PREFIX","labs","_labs","search","queryOrOptions","options","query","undefined","realOptions","queryParams","initialRq","get","fullResponse","TweetSearchRecentV2Paginator","realData","data","rateLimit","instance","searchAll","TweetSearchAllV2Paginator","singleTweet","tweetId","params","id","tweets","tweetIds","ids","tweetCountRecent","tweetCountAll","tweetRetweetedBy","asPaginator","parameters","TweetRetweetersUsersV2Paginator","sharedParams","tweetLikedBy","TweetLikingUsersV2Paginator","homeTimeline","meUser","getCurrentUserV2Object","TweetHomeTimelineV2Paginator","userTimeline","userId","TweetUserTimelineV2Paginator","userMentionTimeline","TweetUserMentionTimelineV2Paginator","quotes","QuotedTweetsTimelineV2Paginator","bookmarks","user","TweetBookmarksTimelineV2Paginator","me","users","userIds","Array","isArray","join","userByUsername","username","usersByUsernames","usernames","followers","UserFollowersV2Paginator","following","UserFollowingV2Paginator","userLikedTweets","TweetV2UserLikedTweetsPaginator","userBlockingUsers","UserBlockingUsersV2Paginator","userMutingUsers","UserMutingUsersV2Paginator","list","listsOwned","UserOwnedListsV2Paginator","listMemberships","UserListMembershipsV2Paginator","listFollowed","UserListFollowedV2Paginator","listTweets","listId","TweetV2ListTweetsPaginator","listMembers","UserListMembersV2Paginator","listFollowers","UserListFollowersV2Paginator","space","spaceId","spaces","spaceIds","spacesByCreators","creatorIds","user_ids","searchSpaces","spaceBuyers","searchStream","autoConnect","getStream","payloadIsError","isTweetStreamV2ErrorPayload","streamRules","updateStreamRules","post","sampleStream","complianceJobs","complianceJob","jobId","sendComplianceJob","jobParams","job","type","name","rawIdsBody","Buffer","from","put","upload_url","forceBodyMode","enableAuth","headers","prefix","complianceJobResult","runningJob","status","Error","Promise","resolve","setTimeout","result","download_url","trim","split","filter","line","map","JSON","parse"],"sources":["/Users/user/Sites/twits_app/twits/node_modules/twitter-api-v2/dist/v2/client.v2.read.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_subclient_1 = __importDefault(require(\"../client.subclient\"));\nconst globals_1 = require(\"../globals\");\nconst paginators_1 = require(\"../paginators\");\nconst client_v2_labs_read_1 = __importDefault(require(\"../v2-labs/client.v2.labs.read\"));\nconst user_paginator_v2_1 = require(\"../paginators/user.paginator.v2\");\nconst helpers_1 = require(\"../helpers\");\n/**\n * Base Twitter v2 client with only read right.\n */\nclass TwitterApiv2ReadOnly extends client_subclient_1.default {\n    constructor() {\n        super(...arguments);\n        this._prefix = globals_1.API_V2_PREFIX;\n    }\n    /* Sub-clients */\n    /**\n     * Get a client for v2 labs endpoints.\n     */\n    get labs() {\n        if (this._labs)\n            return this._labs;\n        return this._labs = new client_v2_labs_read_1.default(this);\n    }\n    async search(queryOrOptions, options = {}) {\n        const query = typeof queryOrOptions === 'string' ? queryOrOptions : undefined;\n        const realOptions = typeof queryOrOptions === 'object' && queryOrOptions !== null ? queryOrOptions : options;\n        const queryParams = { ...realOptions, query };\n        const initialRq = await this.get('tweets/search/recent', queryParams, { fullResponse: true });\n        return new paginators_1.TweetSearchRecentV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * The full-archive search endpoint returns the complete history of public Tweets matching a search query;\n     * since the first Tweet was created March 26, 2006.\n     *\n     * This endpoint is only available to those users who have been approved for the Academic Research product track.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get-tweets-search-all\n     */\n    async searchAll(query, options = {}) {\n        const queryParams = { ...options, query };\n        const initialRq = await this.get('tweets/search/all', queryParams, { fullResponse: true });\n        return new paginators_1.TweetSearchAllV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns a variety of information about a single Tweet specified by the requested ID.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets-id\n     *\n     * OAuth2 scope: `users.read`, `tweet.read`\n     */\n    singleTweet(tweetId, options = {}) {\n        return this.get('tweets/:id', options, { params: { id: tweetId } });\n    }\n    /**\n     * Returns a variety of information about tweets specified by list of IDs.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets\n     *\n     * OAuth2 scope: `users.read`, `tweet.read`\n     */\n    tweets(tweetIds, options = {}) {\n        return this.get('tweets', { ids: tweetIds, ...options });\n    }\n    /**\n     * The recent Tweet counts endpoint returns count of Tweets from the last seven days that match a search query.\n     * OAuth2 Bearer auth only.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/counts/api-reference/get-tweets-counts-recent\n     */\n    tweetCountRecent(query, options = {}) {\n        return this.get('tweets/counts/recent', { query, ...options });\n    }\n    /**\n     * This endpoint is only available to those users who have been approved for the Academic Research product track.\n     * The full-archive search endpoint returns the complete history of public Tweets matching a search query;\n     * since the first Tweet was created March 26, 2006.\n     * OAuth2 Bearer auth only.\n     * **This endpoint has pagination, yet it is not supported by bundled paginators. Use `next_token` to fetch next page.**\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/counts/api-reference/get-tweets-counts-all\n     */\n    tweetCountAll(query, options = {}) {\n        return this.get('tweets/counts/all', { query, ...options });\n    }\n    async tweetRetweetedBy(tweetId, options = {}) {\n        const { asPaginator, ...parameters } = options;\n        const initialRq = await this.get('tweets/:id/retweeted_by', parameters, {\n            fullResponse: true,\n            params: { id: tweetId },\n        });\n        if (!asPaginator) {\n            return initialRq.data;\n        }\n        return new user_paginator_v2_1.TweetRetweetersUsersV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: parameters,\n            sharedParams: { id: tweetId },\n        });\n    }\n    async tweetLikedBy(tweetId, options = {}) {\n        const { asPaginator, ...parameters } = options;\n        const initialRq = await this.get('tweets/:id/liking_users', parameters, {\n            fullResponse: true,\n            params: { id: tweetId },\n        });\n        if (!asPaginator) {\n            return initialRq.data;\n        }\n        return new user_paginator_v2_1.TweetLikingUsersV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: parameters,\n            sharedParams: { id: tweetId },\n        });\n    }\n    /**\n     * Allows you to retrieve a collection of the most recent Tweets and Retweets posted by you and users you follow, also known as home timeline.\n     * This endpoint returns up to the last 3200 Tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-reverse-chronological\n     *\n     * OAuth 2 scopes: `tweet.read` `users.read`\n     */\n    async homeTimeline(options = {}) {\n        const meUser = await this.getCurrentUserV2Object();\n        const initialRq = await this.get('users/:id/timelines/reverse_chronological', options, {\n            fullResponse: true,\n            params: { id: meUser.data.id },\n        });\n        return new paginators_1.TweetHomeTimelineV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: options,\n            sharedParams: { id: meUser.data.id },\n        });\n    }\n    /**\n     * Returns Tweets composed by a single user, specified by the requested user ID.\n     * By default, the most recent ten Tweets are returned per request.\n     * Using pagination, the most recent 3,200 Tweets can be retrieved.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-tweets\n     */\n    async userTimeline(userId, options = {}) {\n        const initialRq = await this.get('users/:id/tweets', options, {\n            fullResponse: true,\n            params: { id: userId },\n        });\n        return new paginators_1.TweetUserTimelineV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: options,\n            sharedParams: { id: userId },\n        });\n    }\n    /**\n     * Returns Tweets mentioning a single user specified by the requested user ID.\n     * By default, the most recent ten Tweets are returned per request.\n     * Using pagination, up to the most recent 800 Tweets can be retrieved.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-mentions\n     */\n    async userMentionTimeline(userId, options = {}) {\n        const initialRq = await this.get('users/:id/mentions', options, {\n            fullResponse: true,\n            params: { id: userId },\n        });\n        return new paginators_1.TweetUserMentionTimelineV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: options,\n            sharedParams: { id: userId },\n        });\n    }\n    /**\n     * Returns Quote Tweets for a Tweet specified by the requested Tweet ID.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/quote-tweets/api-reference/get-tweets-id-quote_tweets\n     *\n     * OAuth2 scopes: `users.read` `tweet.read`\n     */\n    async quotes(tweetId, options = {}) {\n        const initialRq = await this.get('tweets/:id/quote_tweets', options, {\n            fullResponse: true,\n            params: { id: tweetId },\n        });\n        return new paginators_1.QuotedTweetsTimelineV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: options,\n            sharedParams: { id: tweetId },\n        });\n    }\n    /* Bookmarks */\n    /**\n     * Allows you to get information about a authenticated userâ€™s 800 most recent bookmarked Tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/bookmarks/api-reference/get-users-id-bookmarks\n     *\n     * OAuth2 scopes: `users.read` `tweet.read` `bookmark.read`\n     */\n    async bookmarks(options = {}) {\n        const user = await this.getCurrentUserV2Object();\n        const initialRq = await this.get('users/:id/bookmarks', options, {\n            fullResponse: true,\n            params: { id: user.data.id },\n        });\n        return new paginators_1.TweetBookmarksTimelineV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: options,\n            sharedParams: { id: user.data.id },\n        });\n    }\n    /* Users */\n    /**\n     * Returns information about an authorized user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-me\n     *\n     * OAuth2 scopes: `tweet.read` & `users.read`\n     */\n    me(options = {}) {\n        return this.get('users/me', options);\n    }\n    /**\n     * Returns a variety of information about a single user specified by the requested ID.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-id\n     */\n    user(userId, options = {}) {\n        return this.get('users/:id', options, { params: { id: userId } });\n    }\n    /**\n     * Returns a variety of information about one or more users specified by the requested IDs.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users\n     */\n    users(userIds, options = {}) {\n        const ids = Array.isArray(userIds) ? userIds.join(',') : userIds;\n        return this.get('users', { ...options, ids });\n    }\n    /**\n     * Returns a variety of information about a single user specified by their username.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by-username-username\n     */\n    userByUsername(username, options = {}) {\n        return this.get('users/by/username/:username', options, { params: { username } });\n    }\n    /**\n     * Returns a variety of information about one or more users specified by their usernames.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by\n     *\n     * OAuth2 scope: `users.read`, `tweet.read`\n     */\n    usersByUsernames(usernames, options = {}) {\n        usernames = Array.isArray(usernames) ? usernames.join(',') : usernames;\n        return this.get('users/by', { ...options, usernames });\n    }\n    async followers(userId, options = {}) {\n        const { asPaginator, ...parameters } = options;\n        const params = { id: userId };\n        if (!asPaginator) {\n            return this.get('users/:id/followers', parameters, { params });\n        }\n        const initialRq = await this.get('users/:id/followers', parameters, { fullResponse: true, params });\n        return new user_paginator_v2_1.UserFollowersV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: parameters,\n            sharedParams: params,\n        });\n    }\n    async following(userId, options = {}) {\n        const { asPaginator, ...parameters } = options;\n        const params = { id: userId };\n        if (!asPaginator) {\n            return this.get('users/:id/following', parameters, { params });\n        }\n        const initialRq = await this.get('users/:id/following', parameters, { fullResponse: true, params });\n        return new user_paginator_v2_1.UserFollowingV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: parameters,\n            sharedParams: params,\n        });\n    }\n    /**\n     * Allows you to get information about a userâ€™s liked Tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/get-users-id-liked_tweets\n     */\n    async userLikedTweets(userId, options = {}) {\n        const params = { id: userId };\n        const initialRq = await this.get('users/:id/liked_tweets', options, { fullResponse: true, params });\n        return new paginators_1.TweetV2UserLikedTweetsPaginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /**\n     * Returns a list of users who are blocked by the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/get-users-blocking\n     */\n    async userBlockingUsers(userId, options = {}) {\n        const params = { id: userId };\n        const initialRq = await this.get('users/:id/blocking', options, { fullResponse: true, params });\n        return new user_paginator_v2_1.UserBlockingUsersV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /**\n     * Returns a list of users who are muted by the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/get-users-muting\n     */\n    async userMutingUsers(userId, options = {}) {\n        const params = { id: userId };\n        const initialRq = await this.get('users/:id/muting', options, { fullResponse: true, params });\n        return new user_paginator_v2_1.UserMutingUsersV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /* Lists */\n    /**\n     * Returns the details of a specified List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-lookup/api-reference/get-lists-id\n     */\n    list(id, options = {}) {\n        return this.get('lists/:id', options, { params: { id } });\n    }\n    /**\n     * Returns all Lists owned by the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-lookup/api-reference/get-users-id-owned_lists\n     */\n    async listsOwned(userId, options = {}) {\n        const params = { id: userId };\n        const initialRq = await this.get('users/:id/owned_lists', options, { fullResponse: true, params });\n        return new paginators_1.UserOwnedListsV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /**\n     * Returns all Lists a specified user is a member of.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-members/api-reference/get-users-id-list_memberships\n     */\n    async listMemberships(userId, options = {}) {\n        const params = { id: userId };\n        const initialRq = await this.get('users/:id/list_memberships', options, { fullResponse: true, params });\n        return new paginators_1.UserListMembershipsV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /**\n     * Returns all Lists a specified user follows.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-follows/api-reference/get-users-id-followed_lists\n     */\n    async listFollowed(userId, options = {}) {\n        const params = { id: userId };\n        const initialRq = await this.get('users/:id/followed_lists', options, { fullResponse: true, params });\n        return new paginators_1.UserListFollowedV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /**\n     * Returns a list of Tweets from the specified List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-tweets/api-reference/get-lists-id-tweets\n     */\n    async listTweets(listId, options = {}) {\n        const params = { id: listId };\n        const initialRq = await this.get('lists/:id/tweets', options, { fullResponse: true, params });\n        return new paginators_1.TweetV2ListTweetsPaginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /**\n     * Returns a list of users who are members of the specified List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-members/api-reference/get-lists-id-members\n     */\n    async listMembers(listId, options = {}) {\n        const params = { id: listId };\n        const initialRq = await this.get('lists/:id/members', options, { fullResponse: true, params });\n        return new user_paginator_v2_1.UserListMembersV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /**\n     * Returns a list of users who are followers of the specified List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-follows/api-reference/get-lists-id-followers\n     */\n    async listFollowers(listId, options = {}) {\n        const params = { id: listId };\n        const initialRq = await this.get('lists/:id/followers', options, { fullResponse: true, params });\n        return new user_paginator_v2_1.UserListFollowersV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /* Spaces */\n    /**\n     * Get a single space by ID.\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-id\n     *\n     * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n     */\n    space(spaceId, options = {}) {\n        return this.get('spaces/:id', options, { params: { id: spaceId } });\n    }\n    /**\n     * Get spaces using their IDs.\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces\n     *\n     * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n     */\n    spaces(spaceIds, options = {}) {\n        return this.get('spaces', { ids: spaceIds, ...options });\n    }\n    /**\n     * Get spaces using their creator user ID(s). (no pagination available)\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-by-creator-ids\n     *\n     * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n     */\n    spacesByCreators(creatorIds, options = {}) {\n        return this.get('spaces/by/creator_ids', { user_ids: creatorIds, ...options });\n    }\n    /**\n     * Search through spaces using multiple params. (no pagination available)\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/search/api-reference/get-spaces-search\n     */\n    searchSpaces(options) {\n        return this.get('spaces/search', options);\n    }\n    /**\n    * Returns a list of user who purchased a ticket to the requested Space.\n    * You must authenticate the request using the Access Token of the creator of the requested Space.\n    *\n    * **OAuth 2.0 Access Token required**\n    *\n    * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-id-buyers\n    *\n    * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n    */\n    spaceBuyers(spaceId, options = {}) {\n        return this.get('spaces/:id/buyers', options, { params: { id: spaceId } });\n    }\n    searchStream({ autoConnect, ...options } = {}) {\n        return this.getStream('tweets/search/stream', options, { payloadIsError: helpers_1.isTweetStreamV2ErrorPayload, autoConnect });\n    }\n    /**\n     * Return a list of rules currently active on the streaming endpoint, either as a list or individually.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/get-tweets-search-stream-rules\n     */\n    streamRules(options = {}) {\n        return this.get('tweets/search/stream/rules', options);\n    }\n    updateStreamRules(options, query = {}) {\n        return this.post('tweets/search/stream/rules', options, { query });\n    }\n    sampleStream({ autoConnect, ...options } = {}) {\n        return this.getStream('tweets/sample/stream', options, { payloadIsError: helpers_1.isTweetStreamV2ErrorPayload, autoConnect });\n    }\n    /* Batch compliance */\n    /**\n     * Returns a list of recent compliance jobs.\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/get-compliance-jobs\n     */\n    complianceJobs(options) {\n        return this.get('compliance/jobs', options);\n    }\n    /**\n     * Get a single compliance job with the specified ID.\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/get-compliance-jobs-id\n     */\n    complianceJob(jobId) {\n        return this.get('compliance/jobs/:id', undefined, { params: { id: jobId } });\n    }\n    /**\n     * Creates a new compliance job for Tweet IDs or user IDs, send your file, await result and parse it into an array.\n     * You can run one batch job at a time. Returns the created job, but **not the job result!**.\n     *\n     * You can obtain the result (**after job is completed**) with `.complianceJobResult`.\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/post-compliance-jobs\n     */\n    async sendComplianceJob(jobParams) {\n        const job = await this.post('compliance/jobs', { type: jobParams.type, name: jobParams.name });\n        // Send the IDs\n        const rawIdsBody = jobParams.ids instanceof Buffer ? jobParams.ids : Buffer.from(jobParams.ids.join('\\n'));\n        // Upload the IDs\n        await this.put(job.data.upload_url, rawIdsBody, {\n            forceBodyMode: 'raw',\n            enableAuth: false,\n            headers: { 'Content-Type': 'text/plain' },\n            prefix: '',\n        });\n        return job;\n    }\n    /**\n     * Get the result of a running or completed job, obtained through `.complianceJob`, `.complianceJobs` or `.sendComplianceJob`.\n     * If job is still running (`in_progress`), it will await until job is completed. **This could be quite long!**\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/post-compliance-jobs\n     */\n    async complianceJobResult(job) {\n        let runningJob = job;\n        while (runningJob.status !== 'complete') {\n            if (runningJob.status === 'expired' || runningJob.status === 'failed') {\n                throw new Error('Job failed to be completed.');\n            }\n            await new Promise(resolve => setTimeout(resolve, 3500));\n            runningJob = (await this.complianceJob(job.id)).data;\n        }\n        // Download and parse result\n        const result = await this.get(job.download_url, undefined, {\n            enableAuth: false,\n            prefix: '',\n        });\n        return result\n            .trim()\n            .split('\\n')\n            .filter(line => line)\n            .map(line => JSON.parse(line));\n    }\n}\nexports.default = TwitterApiv2ReadOnly;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}