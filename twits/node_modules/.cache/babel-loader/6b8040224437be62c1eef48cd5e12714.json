{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TweetStream = void 0;\n\nconst events_1 = require(\"events\");\n\nconst request_handler_helper_1 = __importDefault(require(\"../client-mixins/request-handler.helper\"));\n\nconst types_1 = require(\"../types\");\n\nconst TweetStreamEventCombiner_1 = __importDefault(require(\"./TweetStreamEventCombiner\"));\n\nconst TweetStreamParser_1 = __importStar(require(\"./TweetStreamParser\")); // In seconds\n\n\nconst basicRetriesAttempt = [5, 15, 30, 60, 90, 120, 180, 300, 600, 900]; // Default retry function\n\nconst basicReconnectRetry = tryOccurence => tryOccurence > basicRetriesAttempt.length ? 901000 : basicRetriesAttempt[tryOccurence - 1] * 1000;\n\nclass TweetStream extends events_1.EventEmitter {\n  constructor(requestData, connection) {\n    super();\n    this.requestData = requestData;\n    this.autoReconnect = false;\n    this.autoReconnectRetries = 5; // 2 minutes without any Twitter signal\n\n    this.keepAliveTimeoutMs = 1000 * 120;\n    this.nextRetryTimeout = basicReconnectRetry;\n    this.parser = new TweetStreamParser_1.default();\n    this.connectionProcessRunning = false;\n    this.onKeepAliveTimeout = this.onKeepAliveTimeout.bind(this);\n    this.initEventsFromParser();\n\n    if (connection) {\n      this.req = connection.req;\n      this.res = connection.res;\n      this.originalResponse = connection.originalResponse;\n      this.initEventsFromRequest();\n    }\n  }\n\n  on(event, handler) {\n    return super.on(event, handler);\n  }\n\n  initEventsFromRequest() {\n    if (!this.req || !this.res) {\n      throw new Error('TweetStream error: You cannot init TweetStream without a request and response object.');\n    }\n\n    const errorHandler = err => {\n      this.emit(types_1.ETwitterStreamEvent.ConnectionError, err);\n      this.emit(types_1.ETwitterStreamEvent.Error, {\n        type: types_1.ETwitterStreamEvent.ConnectionError,\n        error: err,\n        message: 'Connection lost or closed by Twitter.'\n      });\n      this.onConnectionError();\n    };\n\n    this.req.on('error', errorHandler);\n    this.res.on('error', errorHandler); // Usually, connection should not be closed by Twitter!\n\n    this.res.on('close', () => errorHandler(new Error('Connection closed by Twitter.')));\n    this.res.on('data', chunk => {\n      this.resetKeepAliveTimeout();\n\n      if (chunk.toString() === '\\r\\n') {\n        return this.emit(types_1.ETwitterStreamEvent.DataKeepAlive);\n      }\n\n      this.parser.push(chunk.toString());\n    }); // Starts the keep alive timeout\n\n    this.resetKeepAliveTimeout();\n  }\n\n  initEventsFromParser() {\n    const payloadIsError = this.requestData.payloadIsError;\n    this.parser.on(TweetStreamParser_1.EStreamParserEvent.ParsedData, eventData => {\n      if (payloadIsError && payloadIsError(eventData)) {\n        this.emit(types_1.ETwitterStreamEvent.DataError, eventData);\n        this.emit(types_1.ETwitterStreamEvent.Error, {\n          type: types_1.ETwitterStreamEvent.DataError,\n          error: eventData,\n          message: 'Twitter sent a payload that is detected as an error payload.'\n        });\n      } else {\n        this.emit(types_1.ETwitterStreamEvent.Data, eventData);\n      }\n    });\n    this.parser.on(TweetStreamParser_1.EStreamParserEvent.ParseError, error => {\n      this.emit(types_1.ETwitterStreamEvent.TweetParseError, error);\n      this.emit(types_1.ETwitterStreamEvent.Error, {\n        type: types_1.ETwitterStreamEvent.TweetParseError,\n        error,\n        message: 'Failed to parse stream data.'\n      });\n    });\n  }\n\n  resetKeepAliveTimeout() {\n    this.unbindKeepAliveTimeout();\n\n    if (this.keepAliveTimeoutMs !== Infinity) {\n      this.keepAliveTimeout = setTimeout(this.onKeepAliveTimeout, this.keepAliveTimeoutMs);\n    }\n  }\n\n  onKeepAliveTimeout() {\n    this.emit(types_1.ETwitterStreamEvent.ConnectionLost);\n    this.onConnectionError();\n  }\n\n  unbindTimeouts() {\n    this.unbindRetryTimeout();\n    this.unbindKeepAliveTimeout();\n  }\n\n  unbindKeepAliveTimeout() {\n    if (this.keepAliveTimeout) {\n      clearTimeout(this.keepAliveTimeout);\n      this.keepAliveTimeout = undefined;\n    }\n  }\n\n  unbindRetryTimeout() {\n    if (this.retryTimeout) {\n      clearTimeout(this.retryTimeout);\n      this.retryTimeout = undefined;\n    }\n  }\n\n  closeWithoutEmit() {\n    this.unbindTimeouts();\n\n    if (this.res) {\n      this.res.removeAllListeners(); // Close response silentely\n\n      this.res.destroy();\n    }\n\n    if (this.req) {\n      this.req.removeAllListeners(); // Close connection silentely\n\n      this.req.destroy();\n    }\n  }\n  /** Terminate connection to Twitter. */\n\n\n  close() {\n    this.emit(types_1.ETwitterStreamEvent.ConnectionClosed);\n    this.closeWithoutEmit();\n  }\n  /** Unbind all listeners, and close connection. */\n\n\n  destroy() {\n    this.removeAllListeners();\n    this.close();\n  }\n  /**\n   * Make a new request that creates a new `TweetStream` instance with\n   * the same parameters, and bind current listeners to new stream.\n   */\n\n\n  async clone() {\n    const newRequest = new request_handler_helper_1.default(this.requestData);\n    const newStream = await newRequest.makeRequestAsStream(); // Clone attached listeners\n\n    const listenerNames = this.eventNames();\n\n    for (const listener of listenerNames) {\n      const callbacks = this.listeners(listener);\n\n      for (const callback of callbacks) {\n        newStream.on(listener, callback);\n      }\n    }\n\n    return newStream;\n  }\n  /** Start initial stream connection, setup options on current instance and returns itself. */\n\n\n  async connect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (typeof options.autoReconnect !== 'undefined') {\n      this.autoReconnect = options.autoReconnect;\n    }\n\n    if (typeof options.autoReconnectRetries !== 'undefined') {\n      this.autoReconnectRetries = options.autoReconnectRetries === 'unlimited' ? Infinity : options.autoReconnectRetries;\n    }\n\n    if (typeof options.keepAliveTimeout !== 'undefined') {\n      this.keepAliveTimeoutMs = options.keepAliveTimeout === 'disable' ? Infinity : options.keepAliveTimeout;\n    }\n\n    if (typeof options.nextRetryTimeout !== 'undefined') {\n      this.nextRetryTimeout = options.nextRetryTimeout;\n    } // Make the connection\n\n\n    this.unbindTimeouts();\n\n    try {\n      await this.reconnect();\n    } catch (e) {\n      this.emit(types_1.ETwitterStreamEvent.ConnectError, 0);\n      this.emit(types_1.ETwitterStreamEvent.Error, {\n        type: types_1.ETwitterStreamEvent.ConnectError,\n        error: e,\n        message: 'Connect error - Initial connection just failed.'\n      }); // Only make a reconnection attempt if autoReconnect is true!\n      // Otherwise, let error be propagated\n\n      if (this.autoReconnect) {\n        this.makeAutoReconnectRetry(0, e);\n      } else {\n        throw e;\n      }\n    }\n\n    return this;\n  }\n  /** Make a new request to (re)connect to Twitter. */\n\n\n  async reconnect() {\n    if (this.connectionProcessRunning) {\n      throw new Error('Connection process is already running.');\n    }\n\n    this.connectionProcessRunning = true;\n\n    try {\n      let initialConnection = true;\n\n      if (this.req) {\n        initialConnection = false;\n        this.closeWithoutEmit();\n      }\n\n      const {\n        req,\n        res,\n        originalResponse\n      } = await new request_handler_helper_1.default(this.requestData).makeRequestAndResolveWhenReady();\n      this.req = req;\n      this.res = res;\n      this.originalResponse = originalResponse;\n      this.emit(initialConnection ? types_1.ETwitterStreamEvent.Connected : types_1.ETwitterStreamEvent.Reconnected);\n      this.parser.reset();\n      this.initEventsFromRequest();\n    } finally {\n      this.connectionProcessRunning = false;\n    }\n  }\n\n  async onConnectionError() {\n    let retryOccurence = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    this.unbindTimeouts(); // Close the request if necessary\n\n    this.closeWithoutEmit(); // Terminate stream by events if necessary (no auto-reconnect or retries exceeded)\n\n    if (!this.autoReconnect) {\n      this.emit(types_1.ETwitterStreamEvent.ConnectionClosed);\n      return;\n    }\n\n    if (retryOccurence >= this.autoReconnectRetries) {\n      this.emit(types_1.ETwitterStreamEvent.ReconnectLimitExceeded);\n      this.emit(types_1.ETwitterStreamEvent.ConnectionClosed);\n      return;\n    } // If all other conditions fails, do a reconnect attempt\n\n\n    try {\n      this.emit(types_1.ETwitterStreamEvent.ReconnectAttempt, retryOccurence);\n      await this.reconnect();\n    } catch (e) {\n      this.emit(types_1.ETwitterStreamEvent.ReconnectError, retryOccurence);\n      this.emit(types_1.ETwitterStreamEvent.Error, {\n        type: types_1.ETwitterStreamEvent.ReconnectError,\n        error: e,\n        message: `Reconnect error - ${retryOccurence + 1} attempts made yet.`\n      });\n      this.makeAutoReconnectRetry(retryOccurence, e);\n    }\n  }\n\n  makeAutoReconnectRetry(retryOccurence, error) {\n    const nextRetry = this.nextRetryTimeout(retryOccurence + 1, error);\n    this.retryTimeout = setTimeout(() => {\n      this.onConnectionError(retryOccurence + 1);\n    }, nextRetry);\n  }\n\n  async *[Symbol.asyncIterator]() {\n    const eventCombiner = new TweetStreamEventCombiner_1.default(this);\n\n    try {\n      while (true) {\n        if (!this.req || this.req.aborted) {\n          throw new Error('Connection closed');\n        }\n\n        if (eventCombiner.hasStack()) {\n          yield* eventCombiner.popStack();\n        }\n\n        const {\n          type,\n          payload\n        } = await eventCombiner.nextEvent();\n\n        if (type === 'error') {\n          throw payload;\n        }\n      }\n    } finally {\n      eventCombiner.destroy();\n    }\n  }\n\n}\n\nexports.TweetStream = TweetStream;\nexports.default = TweetStream;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__importDefault","exports","TweetStream","events_1","require","request_handler_helper_1","types_1","TweetStreamEventCombiner_1","TweetStreamParser_1","basicRetriesAttempt","basicReconnectRetry","tryOccurence","length","EventEmitter","constructor","requestData","connection","autoReconnect","autoReconnectRetries","keepAliveTimeoutMs","nextRetryTimeout","parser","default","connectionProcessRunning","onKeepAliveTimeout","bind","initEventsFromParser","req","res","originalResponse","initEventsFromRequest","on","event","handler","Error","errorHandler","err","emit","ETwitterStreamEvent","ConnectionError","type","error","message","onConnectionError","chunk","resetKeepAliveTimeout","toString","DataKeepAlive","push","payloadIsError","EStreamParserEvent","ParsedData","eventData","DataError","Data","ParseError","TweetParseError","unbindKeepAliveTimeout","Infinity","keepAliveTimeout","setTimeout","ConnectionLost","unbindTimeouts","unbindRetryTimeout","clearTimeout","retryTimeout","closeWithoutEmit","removeAllListeners","destroy","close","ConnectionClosed","clone","newRequest","newStream","makeRequestAsStream","listenerNames","eventNames","listener","callbacks","listeners","callback","connect","options","reconnect","e","ConnectError","makeAutoReconnectRetry","initialConnection","makeRequestAndResolveWhenReady","Connected","Reconnected","reset","retryOccurence","ReconnectLimitExceeded","ReconnectAttempt","ReconnectError","nextRetry","Symbol","asyncIterator","eventCombiner","aborted","hasStack","popStack","payload","nextEvent"],"sources":["/Users/user/Sites/twits_app/twits/node_modules/twitter-api-v2/dist/stream/TweetStream.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TweetStream = void 0;\nconst events_1 = require(\"events\");\nconst request_handler_helper_1 = __importDefault(require(\"../client-mixins/request-handler.helper\"));\nconst types_1 = require(\"../types\");\nconst TweetStreamEventCombiner_1 = __importDefault(require(\"./TweetStreamEventCombiner\"));\nconst TweetStreamParser_1 = __importStar(require(\"./TweetStreamParser\"));\n// In seconds\nconst basicRetriesAttempt = [5, 15, 30, 60, 90, 120, 180, 300, 600, 900];\n// Default retry function\nconst basicReconnectRetry = tryOccurence => tryOccurence > basicRetriesAttempt.length\n    ? 901000\n    : basicRetriesAttempt[tryOccurence - 1] * 1000;\nclass TweetStream extends events_1.EventEmitter {\n    constructor(requestData, connection) {\n        super();\n        this.requestData = requestData;\n        this.autoReconnect = false;\n        this.autoReconnectRetries = 5;\n        // 2 minutes without any Twitter signal\n        this.keepAliveTimeoutMs = 1000 * 120;\n        this.nextRetryTimeout = basicReconnectRetry;\n        this.parser = new TweetStreamParser_1.default();\n        this.connectionProcessRunning = false;\n        this.onKeepAliveTimeout = this.onKeepAliveTimeout.bind(this);\n        this.initEventsFromParser();\n        if (connection) {\n            this.req = connection.req;\n            this.res = connection.res;\n            this.originalResponse = connection.originalResponse;\n            this.initEventsFromRequest();\n        }\n    }\n    on(event, handler) {\n        return super.on(event, handler);\n    }\n    initEventsFromRequest() {\n        if (!this.req || !this.res) {\n            throw new Error('TweetStream error: You cannot init TweetStream without a request and response object.');\n        }\n        const errorHandler = (err) => {\n            this.emit(types_1.ETwitterStreamEvent.ConnectionError, err);\n            this.emit(types_1.ETwitterStreamEvent.Error, {\n                type: types_1.ETwitterStreamEvent.ConnectionError,\n                error: err,\n                message: 'Connection lost or closed by Twitter.',\n            });\n            this.onConnectionError();\n        };\n        this.req.on('error', errorHandler);\n        this.res.on('error', errorHandler);\n        // Usually, connection should not be closed by Twitter!\n        this.res.on('close', () => errorHandler(new Error('Connection closed by Twitter.')));\n        this.res.on('data', (chunk) => {\n            this.resetKeepAliveTimeout();\n            if (chunk.toString() === '\\r\\n') {\n                return this.emit(types_1.ETwitterStreamEvent.DataKeepAlive);\n            }\n            this.parser.push(chunk.toString());\n        });\n        // Starts the keep alive timeout\n        this.resetKeepAliveTimeout();\n    }\n    initEventsFromParser() {\n        const payloadIsError = this.requestData.payloadIsError;\n        this.parser.on(TweetStreamParser_1.EStreamParserEvent.ParsedData, (eventData) => {\n            if (payloadIsError && payloadIsError(eventData)) {\n                this.emit(types_1.ETwitterStreamEvent.DataError, eventData);\n                this.emit(types_1.ETwitterStreamEvent.Error, {\n                    type: types_1.ETwitterStreamEvent.DataError,\n                    error: eventData,\n                    message: 'Twitter sent a payload that is detected as an error payload.',\n                });\n            }\n            else {\n                this.emit(types_1.ETwitterStreamEvent.Data, eventData);\n            }\n        });\n        this.parser.on(TweetStreamParser_1.EStreamParserEvent.ParseError, (error) => {\n            this.emit(types_1.ETwitterStreamEvent.TweetParseError, error);\n            this.emit(types_1.ETwitterStreamEvent.Error, {\n                type: types_1.ETwitterStreamEvent.TweetParseError,\n                error,\n                message: 'Failed to parse stream data.',\n            });\n        });\n    }\n    resetKeepAliveTimeout() {\n        this.unbindKeepAliveTimeout();\n        if (this.keepAliveTimeoutMs !== Infinity) {\n            this.keepAliveTimeout = setTimeout(this.onKeepAliveTimeout, this.keepAliveTimeoutMs);\n        }\n    }\n    onKeepAliveTimeout() {\n        this.emit(types_1.ETwitterStreamEvent.ConnectionLost);\n        this.onConnectionError();\n    }\n    unbindTimeouts() {\n        this.unbindRetryTimeout();\n        this.unbindKeepAliveTimeout();\n    }\n    unbindKeepAliveTimeout() {\n        if (this.keepAliveTimeout) {\n            clearTimeout(this.keepAliveTimeout);\n            this.keepAliveTimeout = undefined;\n        }\n    }\n    unbindRetryTimeout() {\n        if (this.retryTimeout) {\n            clearTimeout(this.retryTimeout);\n            this.retryTimeout = undefined;\n        }\n    }\n    closeWithoutEmit() {\n        this.unbindTimeouts();\n        if (this.res) {\n            this.res.removeAllListeners();\n            // Close response silentely\n            this.res.destroy();\n        }\n        if (this.req) {\n            this.req.removeAllListeners();\n            // Close connection silentely\n            this.req.destroy();\n        }\n    }\n    /** Terminate connection to Twitter. */\n    close() {\n        this.emit(types_1.ETwitterStreamEvent.ConnectionClosed);\n        this.closeWithoutEmit();\n    }\n    /** Unbind all listeners, and close connection. */\n    destroy() {\n        this.removeAllListeners();\n        this.close();\n    }\n    /**\n     * Make a new request that creates a new `TweetStream` instance with\n     * the same parameters, and bind current listeners to new stream.\n     */\n    async clone() {\n        const newRequest = new request_handler_helper_1.default(this.requestData);\n        const newStream = await newRequest.makeRequestAsStream();\n        // Clone attached listeners\n        const listenerNames = this.eventNames();\n        for (const listener of listenerNames) {\n            const callbacks = this.listeners(listener);\n            for (const callback of callbacks) {\n                newStream.on(listener, callback);\n            }\n        }\n        return newStream;\n    }\n    /** Start initial stream connection, setup options on current instance and returns itself. */\n    async connect(options = {}) {\n        if (typeof options.autoReconnect !== 'undefined') {\n            this.autoReconnect = options.autoReconnect;\n        }\n        if (typeof options.autoReconnectRetries !== 'undefined') {\n            this.autoReconnectRetries = options.autoReconnectRetries === 'unlimited'\n                ? Infinity\n                : options.autoReconnectRetries;\n        }\n        if (typeof options.keepAliveTimeout !== 'undefined') {\n            this.keepAliveTimeoutMs = options.keepAliveTimeout === 'disable'\n                ? Infinity\n                : options.keepAliveTimeout;\n        }\n        if (typeof options.nextRetryTimeout !== 'undefined') {\n            this.nextRetryTimeout = options.nextRetryTimeout;\n        }\n        // Make the connection\n        this.unbindTimeouts();\n        try {\n            await this.reconnect();\n        }\n        catch (e) {\n            this.emit(types_1.ETwitterStreamEvent.ConnectError, 0);\n            this.emit(types_1.ETwitterStreamEvent.Error, {\n                type: types_1.ETwitterStreamEvent.ConnectError,\n                error: e,\n                message: 'Connect error - Initial connection just failed.',\n            });\n            // Only make a reconnection attempt if autoReconnect is true!\n            // Otherwise, let error be propagated\n            if (this.autoReconnect) {\n                this.makeAutoReconnectRetry(0, e);\n            }\n            else {\n                throw e;\n            }\n        }\n        return this;\n    }\n    /** Make a new request to (re)connect to Twitter. */\n    async reconnect() {\n        if (this.connectionProcessRunning) {\n            throw new Error('Connection process is already running.');\n        }\n        this.connectionProcessRunning = true;\n        try {\n            let initialConnection = true;\n            if (this.req) {\n                initialConnection = false;\n                this.closeWithoutEmit();\n            }\n            const { req, res, originalResponse } = await new request_handler_helper_1.default(this.requestData).makeRequestAndResolveWhenReady();\n            this.req = req;\n            this.res = res;\n            this.originalResponse = originalResponse;\n            this.emit(initialConnection ? types_1.ETwitterStreamEvent.Connected : types_1.ETwitterStreamEvent.Reconnected);\n            this.parser.reset();\n            this.initEventsFromRequest();\n        }\n        finally {\n            this.connectionProcessRunning = false;\n        }\n    }\n    async onConnectionError(retryOccurence = 0) {\n        this.unbindTimeouts();\n        // Close the request if necessary\n        this.closeWithoutEmit();\n        // Terminate stream by events if necessary (no auto-reconnect or retries exceeded)\n        if (!this.autoReconnect) {\n            this.emit(types_1.ETwitterStreamEvent.ConnectionClosed);\n            return;\n        }\n        if (retryOccurence >= this.autoReconnectRetries) {\n            this.emit(types_1.ETwitterStreamEvent.ReconnectLimitExceeded);\n            this.emit(types_1.ETwitterStreamEvent.ConnectionClosed);\n            return;\n        }\n        // If all other conditions fails, do a reconnect attempt\n        try {\n            this.emit(types_1.ETwitterStreamEvent.ReconnectAttempt, retryOccurence);\n            await this.reconnect();\n        }\n        catch (e) {\n            this.emit(types_1.ETwitterStreamEvent.ReconnectError, retryOccurence);\n            this.emit(types_1.ETwitterStreamEvent.Error, {\n                type: types_1.ETwitterStreamEvent.ReconnectError,\n                error: e,\n                message: `Reconnect error - ${retryOccurence + 1} attempts made yet.`,\n            });\n            this.makeAutoReconnectRetry(retryOccurence, e);\n        }\n    }\n    makeAutoReconnectRetry(retryOccurence, error) {\n        const nextRetry = this.nextRetryTimeout(retryOccurence + 1, error);\n        this.retryTimeout = setTimeout(() => {\n            this.onConnectionError(retryOccurence + 1);\n        }, nextRetry);\n    }\n    async *[Symbol.asyncIterator]() {\n        const eventCombiner = new TweetStreamEventCombiner_1.default(this);\n        try {\n            while (true) {\n                if (!this.req || this.req.aborted) {\n                    throw new Error('Connection closed');\n                }\n                if (eventCombiner.hasStack()) {\n                    yield* eventCombiner.popStack();\n                }\n                const { type, payload } = await eventCombiner.nextEvent();\n                if (type === 'error') {\n                    throw payload;\n                }\n            }\n        }\n        finally {\n            eventCombiner.destroy();\n        }\n    }\n}\nexports.TweetStream = TweetStream;\nexports.default = TweetStream;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}