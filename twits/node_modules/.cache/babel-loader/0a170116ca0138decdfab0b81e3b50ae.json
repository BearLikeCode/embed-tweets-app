{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst client_subclient_1 = __importDefault(require(\"../client.subclient\"));\n\nconst globals_1 = require(\"../globals\");\n\nconst helpers_1 = require(\"../helpers\");\n\nconst client_v1_1 = __importDefault(require(\"../v1/client.v1\"));\n\nconst tweet_paginator_v1_1 = require(\"../paginators/tweet.paginator.v1\");\n\nconst mutes_paginator_v1_1 = require(\"../paginators/mutes.paginator.v1\");\n\nconst user_paginator_v1_1 = require(\"../paginators/user.paginator.v1\");\n\nconst list_paginator_v1_1 = require(\"../paginators/list.paginator.v1\");\n/**\n * Base Twitter v1 client with only read right.\n */\n\n\nclass TwitterApiv1ReadOnly extends client_subclient_1.default {\n  constructor() {\n    super(...arguments);\n    this._prefix = globals_1.API_V1_1_PREFIX;\n  }\n  /* Tweets */\n\n  /**\n   * Returns a single Tweet, specified by the id parameter. The Tweet's author will also be embedded within the Tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-show-id\n   */\n\n\n  singleTweet(tweetId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('statuses/show.json', {\n      tweet_mode: 'extended',\n      id: tweetId,\n      ...options\n    });\n  }\n\n  tweets(ids) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.post('statuses/lookup.json', {\n      tweet_mode: 'extended',\n      id: ids,\n      ...options\n    });\n  }\n  /**\n   * Returns a single Tweet, specified by either a Tweet web URL or the Tweet ID, in an oEmbed-compatible format.\n   * The returned HTML snippet will be automatically recognized as an Embedded Tweet when Twitter's widget JavaScript is included on the page.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-oembed\n   */\n\n\n  oembedTweet(tweetId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('oembed', {\n      url: `https://twitter.com/i/statuses/${tweetId}`,\n      ...options\n    }, {\n      prefix: 'https://publish.twitter.com/'\n    });\n  }\n  /* Tweets timelines */\n\n  /**\n   * Returns a collection of the most recent Tweets and Retweets posted by the authenticating user and the users they follow.\n   * The home timeline is central to how most users interact with the Twitter service.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-home_timeline\n   */\n\n\n  async homeTimeline() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      ...options\n    };\n    const initialRq = await this.get('statuses/home_timeline.json', queryParams, {\n      fullResponse: true\n    });\n    return new tweet_paginator_v1_1.HomeTimelineV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns the 20 most recent mentions (Tweets containing a users's @screen_name) for the authenticating user.\n   * The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline\n   */\n\n\n  async mentionTimeline() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      ...options\n    };\n    const initialRq = await this.get('statuses/mentions_timeline.json', queryParams, {\n      fullResponse: true\n    });\n    return new tweet_paginator_v1_1.MentionTimelineV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns a collection of the most recent Tweets posted by the user indicated by the user_id parameters.\n   * User timelines belonging to protected users may only be requested when the authenticated user either \"owns\" the timeline or is an approved follower of the owner.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-user_timeline\n   */\n\n\n  async userTimeline(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      user_id: userId,\n      ...options\n    };\n    const initialRq = await this.get('statuses/user_timeline.json', queryParams, {\n      fullResponse: true\n    });\n    return new tweet_paginator_v1_1.UserTimelineV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns a collection of the most recent Tweets posted by the user indicated by the screen_name parameters.\n   * User timelines belonging to protected users may only be requested when the authenticated user either \"owns\" the timeline or is an approved follower of the owner.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-user_timeline\n   */\n\n\n  async userTimelineByUsername(username) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      screen_name: username,\n      ...options\n    };\n    const initialRq = await this.get('statuses/user_timeline.json', queryParams, {\n      fullResponse: true\n    });\n    return new tweet_paginator_v1_1.UserTimelineV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns the most recent Tweets liked by the authenticating or specified user, 20 tweets by default.\n   * Note: favorites are now known as likes.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list\n   */\n\n\n  async favoriteTimeline(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      user_id: userId,\n      ...options\n    };\n    const initialRq = await this.get('favorites/list.json', queryParams, {\n      fullResponse: true\n    });\n    return new tweet_paginator_v1_1.UserFavoritesV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns the most recent Tweets liked by the authenticating or specified user, 20 tweets by default.\n   * Note: favorites are now known as likes.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list\n   */\n\n\n  async favoriteTimelineByUsername(username) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      screen_name: username,\n      ...options\n    };\n    const initialRq = await this.get('favorites/list.json', queryParams, {\n      fullResponse: true\n    });\n    return new tweet_paginator_v1_1.UserFavoritesV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /* Users */\n\n  /**\n   * Returns a variety of information about the user specified by the required user_id or screen_name parameter.\n   * The author's most recent Tweet will be returned inline when possible.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show\n   */\n\n\n  user(user) {\n    return this.get('users/show.json', {\n      tweet_mode: 'extended',\n      ...user\n    });\n  }\n  /**\n   * Returns fully-hydrated user objects for up to 100 users per request,\n   * as specified by comma-separated values passed to the user_id and/or screen_name parameters.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup\n   */\n\n\n  users(query) {\n    return this.get('users/lookup.json', {\n      tweet_mode: 'extended',\n      ...query\n    });\n  }\n  /**\n   * Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful;\n   * returns a 401 status code and an error message if not.\n   * Use this method to test if supplied user credentials are valid.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-verify_credentials\n   */\n\n\n  verifyCredentials() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.get('account/verify_credentials.json', options);\n  }\n  /**\n   * Returns an array of user objects the authenticating user has muted.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-list\n   */\n\n\n  async listMutedUsers() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      ...options\n    };\n    const initialRq = await this.get('mutes/users/list.json', queryParams, {\n      fullResponse: true\n    });\n    return new mutes_paginator_v1_1.MuteUserListV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns an array of numeric user ids the authenticating user has muted.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-ids\n   */\n\n\n  async listMutedUserIds() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      stringify_ids: true,\n      ...options\n    };\n    const initialRq = await this.get('mutes/users/ids.json', queryParams, {\n      fullResponse: true\n    });\n    return new mutes_paginator_v1_1.MuteUserIdsV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Provides a simple, relevance-based search interface to public user accounts on Twitter.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-search\n   */\n\n\n  async searchUsers(query) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const queryParams = {\n      q: query,\n      tweet_mode: 'extended',\n      page: 1,\n      ...options\n    };\n    const initialRq = await this.get('users/search.json', queryParams, {\n      fullResponse: true\n    });\n    return new user_paginator_v1_1.UserSearchV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /* Friendship API */\n\n  /**\n   * Returns detailed information about the relationship between two arbitrary users.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show\n   */\n\n\n  friendship(sources) {\n    return this.get('friendships/show.json', sources);\n  }\n  /**\n   * Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-lookup\n   */\n\n\n  friendships(friendships) {\n    return this.get('friendships/lookup.json', friendships);\n  }\n  /**\n   * Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-no_retweets-ids\n   */\n\n\n  friendshipsNoRetweets() {\n    return this.get('friendships/no_retweets/ids.json', {\n      stringify_ids: true\n    });\n  }\n  /**\n   * Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-incoming\n   */\n\n\n  async friendshipsIncoming() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      stringify_ids: true,\n      ...options\n    };\n    const initialRq = await this.get('friendships/incoming.json', queryParams, {\n      fullResponse: true\n    });\n    return new user_paginator_v1_1.FriendshipsIncomingV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-outgoing\n   */\n\n\n  async friendshipsOutgoing() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      stringify_ids: true,\n      ...options\n    };\n    const initialRq = await this.get('friendships/outgoing.json', queryParams, {\n      fullResponse: true\n    });\n    return new user_paginator_v1_1.FriendshipsOutgoingV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /* Account/user API */\n\n  /**\n   * Get current account settings for authenticating user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-settings\n   */\n\n\n  accountSettings() {\n    return this.get('account/settings.json');\n  }\n  /**\n   * Returns a map of the available size variations of the specified user's profile banner.\n   * If the user has not uploaded a profile banner, a HTTP 404 will be served instead.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-users-profile_banner\n   */\n\n\n  userProfileBannerSizes(params) {\n    return this.get('users/profile_banner.json', params);\n  }\n  /* Lists */\n\n  /**\n   * Returns the specified list. Private lists will only be shown if the authenticated user owns the specified list.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-show\n   */\n\n\n  list(options) {\n    return this.get('lists/show.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /**\n   * Returns all lists the authenticating or specified user subscribes to, including their own.\n   * If no user is given, the authenticating user is used.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list\n   */\n\n\n  lists() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.get('lists/list.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /**\n   * Returns the members of the specified list. Private list members will only be shown if the authenticated user owns the specified list.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members\n   */\n\n\n  async listMembers() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      ...options\n    };\n    const initialRq = await this.get('lists/members.json', queryParams, {\n      fullResponse: true\n    });\n    return new list_paginator_v1_1.ListMembersV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Check if the specified user is a member of the specified list.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members-show\n   */\n\n\n  listGetMember(options) {\n    return this.get('lists/members/show.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /**\n   * Returns the lists the specified user has been added to.\n   * If user_id or screen_name are not provided, the memberships for the authenticating user are returned.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-memberships\n   */\n\n\n  async listMemberships() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      ...options\n    };\n    const initialRq = await this.get('lists/memberships.json', queryParams, {\n      fullResponse: true\n    });\n    return new list_paginator_v1_1.ListMembershipsV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns the lists owned by the specified Twitter user. Private lists will only be shown if the authenticated user is also the owner of the lists.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-ownerships\n   */\n\n\n  async listOwnerships() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      ...options\n    };\n    const initialRq = await this.get('lists/ownerships.json', queryParams, {\n      fullResponse: true\n    });\n    return new list_paginator_v1_1.ListOwnershipsV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns a timeline of tweets authored by members of the specified list. Retweets are included by default.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-statuses\n   */\n\n\n  async listStatuses(options) {\n    const queryParams = {\n      tweet_mode: 'extended',\n      ...options\n    };\n    const initialRq = await this.get('lists/statuses.json', queryParams, {\n      fullResponse: true\n    });\n    return new tweet_paginator_v1_1.ListTimelineV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns the subscribers of the specified list. Private list subscribers will only be shown if the authenticated user owns the specified list.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers\n   */\n\n\n  async listSubscribers() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      ...options\n    };\n    const initialRq = await this.get('lists/subscribers.json', queryParams, {\n      fullResponse: true\n    });\n    return new list_paginator_v1_1.ListSubscribersV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Check if the specified user is a subscriber of the specified list. Returns the user if they are a subscriber.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers-show\n   */\n\n\n  listGetSubscriber(options) {\n    return this.get('lists/subscribers/show.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /**\n   * Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default.\n   * Does not include the user's own lists.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-subscriptions\n   */\n\n\n  async listSubscriptions() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      ...options\n    };\n    const initialRq = await this.get('lists/subscriptions.json', queryParams, {\n      fullResponse: true\n    });\n    return new list_paginator_v1_1.ListSubscriptionsV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /* Media upload API */\n\n  /**\n   * The STATUS command (this method) is used to periodically poll for updates of media processing operation.\n   * After the STATUS command response returns succeeded, you can move on to the next step which is usually create Tweet with media_id.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/get-media-upload-status\n   */\n\n\n  mediaInfo(mediaId) {\n    return this.get('media/upload.json', {\n      command: 'STATUS',\n      media_id: mediaId\n    }, {\n      prefix: globals_1.API_V1_1_UPLOAD_PREFIX\n    });\n  }\n\n  filterStream() {\n    let {\n      autoConnect,\n      ...params\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const parameters = {};\n\n    for (const [key, value] of Object.entries(params)) {\n      if (key === 'follow' || key === 'track') {\n        parameters[key] = value.toString();\n      } else if (key === 'locations') {\n        const locations = value;\n        parameters.locations = (0, helpers_1.arrayWrap)(locations).map(loc => `${loc.lng},${loc.lat}`).join(',');\n      } else {\n        parameters[key] = value;\n      }\n    }\n\n    const streamClient = this.stream;\n    return streamClient.postStream('statuses/filter.json', parameters, {\n      autoConnect\n    });\n  }\n\n  sampleStream() {\n    let {\n      autoConnect,\n      ...params\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const streamClient = this.stream;\n    return streamClient.getStream('statuses/sample.json', params, {\n      autoConnect\n    });\n  }\n  /**\n   * Create a client that is prefixed with `https//stream.twitter.com` instead of classic API URL.\n   */\n\n\n  get stream() {\n    const copiedClient = new client_v1_1.default(this);\n    copiedClient.setPrefix(globals_1.API_V1_1_STREAM_PREFIX);\n    return copiedClient;\n  }\n  /* Trends API */\n\n  /**\n   * Returns the top 50 trending topics for a specific id, if trending information is available for it.\n   * Note: The id parameter for this endpoint is the \"where on earth identifier\" or WOEID, which is a legacy identifier created by Yahoo and has been deprecated.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place\n   */\n\n\n  trendsByPlace(woeId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('trends/place.json', {\n      id: woeId,\n      ...options\n    });\n  }\n  /**\n   * Returns the locations that Twitter has trending topic information for.\n   * The response is an array of \"locations\" that encode the location's WOEID\n   * and some other human-readable information such as a canonical name and country the location belongs in.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/trends/locations-with-trending-topics/api-reference/get-trends-available\n   */\n\n\n  trendsAvailable() {\n    return this.get('trends/available.json');\n  }\n  /**\n   * Returns the locations that Twitter has trending topic information for, closest to a specified location.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/trends/locations-with-trending-topics/api-reference/get-trends-closest\n   */\n\n\n  trendsClosest(lat, long) {\n    return this.get('trends/closest.json', {\n      lat,\n      long\n    });\n  }\n  /* Geo API */\n\n  /**\n   * Returns all the information about a known place.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/geo/place-information/api-reference/get-geo-id-place_id\n   */\n\n\n  geoPlace(placeId) {\n    return this.get('geo/id/:place_id.json', undefined, {\n      params: {\n        place_id: placeId\n      }\n    });\n  }\n  /**\n   * Search for places that can be attached to a Tweet via POST statuses/update.\n   * This request will return a list of all the valid places that can be used as the place_id when updating a status.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/geo/places-near-location/api-reference/get-geo-search\n   */\n\n\n  geoSearch(options) {\n    return this.get('geo/search.json', options);\n  }\n  /**\n   * Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.\n   * This request is an informative call and will deliver generalized results about geography.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/geo/places-near-location/api-reference/get-geo-reverse_geocode\n   */\n\n\n  geoReverseGeoCode(options) {\n    return this.get('geo/reverse_geocode.json', options);\n  }\n  /* Developer utilities */\n\n  /**\n   * Returns the current rate limits for methods belonging to the specified resource families.\n   * Each API resource belongs to a \"resource family\" which is indicated in its method documentation.\n   * The method's resource family can be determined from the first component of the path after the resource version.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/developer-utilities/rate-limit-status/api-reference/get-application-rate_limit_status\n   */\n\n\n  rateLimitStatuses() {\n    for (var _len = arguments.length, resources = new Array(_len), _key = 0; _key < _len; _key++) {\n      resources[_key] = arguments[_key];\n    }\n\n    return this.get('application/rate_limit_status.json', {\n      resources\n    });\n  }\n  /**\n   * Returns the list of languages supported by Twitter along with the language code supported by Twitter.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/developer-utilities/supported-languages/api-reference/get-help-languages\n   */\n\n\n  supportedLanguages() {\n    return this.get('help/languages.json');\n  }\n\n}\n\nexports.default = TwitterApiv1ReadOnly;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","client_subclient_1","require","globals_1","helpers_1","client_v1_1","tweet_paginator_v1_1","mutes_paginator_v1_1","user_paginator_v1_1","list_paginator_v1_1","TwitterApiv1ReadOnly","default","constructor","arguments","_prefix","API_V1_1_PREFIX","singleTweet","tweetId","options","get","tweet_mode","id","tweets","ids","post","oembedTweet","url","prefix","homeTimeline","queryParams","initialRq","fullResponse","HomeTimelineV1Paginator","realData","data","rateLimit","instance","mentionTimeline","MentionTimelineV1Paginator","userTimeline","userId","user_id","UserTimelineV1Paginator","userTimelineByUsername","username","screen_name","favoriteTimeline","UserFavoritesV1Paginator","favoriteTimelineByUsername","user","users","query","verifyCredentials","listMutedUsers","MuteUserListV1Paginator","listMutedUserIds","stringify_ids","MuteUserIdsV1Paginator","searchUsers","q","page","UserSearchV1Paginator","friendship","sources","friendships","friendshipsNoRetweets","friendshipsIncoming","FriendshipsIncomingV1Paginator","friendshipsOutgoing","FriendshipsOutgoingV1Paginator","accountSettings","userProfileBannerSizes","params","list","lists","listMembers","ListMembersV1Paginator","listGetMember","listMemberships","ListMembershipsV1Paginator","listOwnerships","ListOwnershipsV1Paginator","listStatuses","ListTimelineV1Paginator","listSubscribers","ListSubscribersV1Paginator","listGetSubscriber","listSubscriptions","ListSubscriptionsV1Paginator","mediaInfo","mediaId","command","media_id","API_V1_1_UPLOAD_PREFIX","filterStream","autoConnect","parameters","key","entries","toString","locations","arrayWrap","map","loc","lng","lat","join","streamClient","stream","postStream","sampleStream","getStream","copiedClient","setPrefix","API_V1_1_STREAM_PREFIX","trendsByPlace","woeId","trendsAvailable","trendsClosest","long","geoPlace","placeId","undefined","place_id","geoSearch","geoReverseGeoCode","rateLimitStatuses","resources","supportedLanguages"],"sources":["/Users/user/Sites/twits_app/twits/node_modules/twitter-api-v2/dist/v1/client.v1.read.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_subclient_1 = __importDefault(require(\"../client.subclient\"));\nconst globals_1 = require(\"../globals\");\nconst helpers_1 = require(\"../helpers\");\nconst client_v1_1 = __importDefault(require(\"../v1/client.v1\"));\nconst tweet_paginator_v1_1 = require(\"../paginators/tweet.paginator.v1\");\nconst mutes_paginator_v1_1 = require(\"../paginators/mutes.paginator.v1\");\nconst user_paginator_v1_1 = require(\"../paginators/user.paginator.v1\");\nconst list_paginator_v1_1 = require(\"../paginators/list.paginator.v1\");\n/**\n * Base Twitter v1 client with only read right.\n */\nclass TwitterApiv1ReadOnly extends client_subclient_1.default {\n    constructor() {\n        super(...arguments);\n        this._prefix = globals_1.API_V1_1_PREFIX;\n    }\n    /* Tweets */\n    /**\n     * Returns a single Tweet, specified by the id parameter. The Tweet's author will also be embedded within the Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-show-id\n     */\n    singleTweet(tweetId, options = {}) {\n        return this.get('statuses/show.json', { tweet_mode: 'extended', id: tweetId, ...options });\n    }\n    tweets(ids, options = {}) {\n        return this.post('statuses/lookup.json', { tweet_mode: 'extended', id: ids, ...options });\n    }\n    /**\n     * Returns a single Tweet, specified by either a Tweet web URL or the Tweet ID, in an oEmbed-compatible format.\n     * The returned HTML snippet will be automatically recognized as an Embedded Tweet when Twitter's widget JavaScript is included on the page.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-oembed\n     */\n    oembedTweet(tweetId, options = {}) {\n        return this.get('oembed', {\n            url: `https://twitter.com/i/statuses/${tweetId}`,\n            ...options,\n        }, { prefix: 'https://publish.twitter.com/' });\n    }\n    /* Tweets timelines */\n    /**\n     * Returns a collection of the most recent Tweets and Retweets posted by the authenticating user and the users they follow.\n     * The home timeline is central to how most users interact with the Twitter service.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-home_timeline\n     */\n    async homeTimeline(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('statuses/home_timeline.json', queryParams, { fullResponse: true });\n        return new tweet_paginator_v1_1.HomeTimelineV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns the 20 most recent mentions (Tweets containing a users's @screen_name) for the authenticating user.\n     * The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline\n     */\n    async mentionTimeline(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('statuses/mentions_timeline.json', queryParams, { fullResponse: true });\n        return new tweet_paginator_v1_1.MentionTimelineV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns a collection of the most recent Tweets posted by the user indicated by the user_id parameters.\n     * User timelines belonging to protected users may only be requested when the authenticated user either \"owns\" the timeline or is an approved follower of the owner.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-user_timeline\n     */\n    async userTimeline(userId, options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            user_id: userId,\n            ...options,\n        };\n        const initialRq = await this.get('statuses/user_timeline.json', queryParams, { fullResponse: true });\n        return new tweet_paginator_v1_1.UserTimelineV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns a collection of the most recent Tweets posted by the user indicated by the screen_name parameters.\n     * User timelines belonging to protected users may only be requested when the authenticated user either \"owns\" the timeline or is an approved follower of the owner.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-user_timeline\n     */\n    async userTimelineByUsername(username, options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            screen_name: username,\n            ...options,\n        };\n        const initialRq = await this.get('statuses/user_timeline.json', queryParams, { fullResponse: true });\n        return new tweet_paginator_v1_1.UserTimelineV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns the most recent Tweets liked by the authenticating or specified user, 20 tweets by default.\n     * Note: favorites are now known as likes.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list\n     */\n    async favoriteTimeline(userId, options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            user_id: userId,\n            ...options,\n        };\n        const initialRq = await this.get('favorites/list.json', queryParams, { fullResponse: true });\n        return new tweet_paginator_v1_1.UserFavoritesV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns the most recent Tweets liked by the authenticating or specified user, 20 tweets by default.\n     * Note: favorites are now known as likes.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list\n     */\n    async favoriteTimelineByUsername(username, options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            screen_name: username,\n            ...options,\n        };\n        const initialRq = await this.get('favorites/list.json', queryParams, { fullResponse: true });\n        return new tweet_paginator_v1_1.UserFavoritesV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /* Users */\n    /**\n     * Returns a variety of information about the user specified by the required user_id or screen_name parameter.\n     * The author's most recent Tweet will be returned inline when possible.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show\n     */\n    user(user) {\n        return this.get('users/show.json', { tweet_mode: 'extended', ...user });\n    }\n    /**\n     * Returns fully-hydrated user objects for up to 100 users per request,\n     * as specified by comma-separated values passed to the user_id and/or screen_name parameters.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup\n     */\n    users(query) {\n        return this.get('users/lookup.json', { tweet_mode: 'extended', ...query });\n    }\n    /**\n     * Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful;\n     * returns a 401 status code and an error message if not.\n     * Use this method to test if supplied user credentials are valid.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-verify_credentials\n     */\n    verifyCredentials(options = {}) {\n        return this.get('account/verify_credentials.json', options);\n    }\n    /**\n     * Returns an array of user objects the authenticating user has muted.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-list\n     */\n    async listMutedUsers(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('mutes/users/list.json', queryParams, { fullResponse: true });\n        return new mutes_paginator_v1_1.MuteUserListV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns an array of numeric user ids the authenticating user has muted.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-ids\n     */\n    async listMutedUserIds(options = {}) {\n        const queryParams = {\n            stringify_ids: true,\n            ...options,\n        };\n        const initialRq = await this.get('mutes/users/ids.json', queryParams, { fullResponse: true });\n        return new mutes_paginator_v1_1.MuteUserIdsV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Provides a simple, relevance-based search interface to public user accounts on Twitter.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-search\n     */\n    async searchUsers(query, options = {}) {\n        const queryParams = {\n            q: query,\n            tweet_mode: 'extended',\n            page: 1,\n            ...options,\n        };\n        const initialRq = await this.get('users/search.json', queryParams, { fullResponse: true });\n        return new user_paginator_v1_1.UserSearchV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /* Friendship API */\n    /**\n     * Returns detailed information about the relationship between two arbitrary users.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show\n     */\n    friendship(sources) {\n        return this.get('friendships/show.json', sources);\n    }\n    /**\n     * Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-lookup\n     */\n    friendships(friendships) {\n        return this.get('friendships/lookup.json', friendships);\n    }\n    /**\n     * Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-no_retweets-ids\n     */\n    friendshipsNoRetweets() {\n        return this.get('friendships/no_retweets/ids.json', { stringify_ids: true });\n    }\n    /**\n     * Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-incoming\n     */\n    async friendshipsIncoming(options = {}) {\n        const queryParams = {\n            stringify_ids: true,\n            ...options,\n        };\n        const initialRq = await this.get('friendships/incoming.json', queryParams, { fullResponse: true });\n        return new user_paginator_v1_1.FriendshipsIncomingV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-outgoing\n     */\n    async friendshipsOutgoing(options = {}) {\n        const queryParams = {\n            stringify_ids: true,\n            ...options,\n        };\n        const initialRq = await this.get('friendships/outgoing.json', queryParams, { fullResponse: true });\n        return new user_paginator_v1_1.FriendshipsOutgoingV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /* Account/user API */\n    /**\n     * Get current account settings for authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-settings\n     */\n    accountSettings() {\n        return this.get('account/settings.json');\n    }\n    /**\n     * Returns a map of the available size variations of the specified user's profile banner.\n     * If the user has not uploaded a profile banner, a HTTP 404 will be served instead.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-users-profile_banner\n     */\n    userProfileBannerSizes(params) {\n        return this.get('users/profile_banner.json', params);\n    }\n    /* Lists */\n    /**\n     * Returns the specified list. Private lists will only be shown if the authenticated user owns the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-show\n     */\n    list(options) {\n        return this.get('lists/show.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Returns all lists the authenticating or specified user subscribes to, including their own.\n     * If no user is given, the authenticating user is used.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list\n     */\n    lists(options = {}) {\n        return this.get('lists/list.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Returns the members of the specified list. Private list members will only be shown if the authenticated user owns the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members\n     */\n    async listMembers(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('lists/members.json', queryParams, { fullResponse: true });\n        return new list_paginator_v1_1.ListMembersV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Check if the specified user is a member of the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members-show\n     */\n    listGetMember(options) {\n        return this.get('lists/members/show.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Returns the lists the specified user has been added to.\n     * If user_id or screen_name are not provided, the memberships for the authenticating user are returned.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-memberships\n     */\n    async listMemberships(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('lists/memberships.json', queryParams, { fullResponse: true });\n        return new list_paginator_v1_1.ListMembershipsV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns the lists owned by the specified Twitter user. Private lists will only be shown if the authenticated user is also the owner of the lists.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-ownerships\n     */\n    async listOwnerships(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('lists/ownerships.json', queryParams, { fullResponse: true });\n        return new list_paginator_v1_1.ListOwnershipsV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns a timeline of tweets authored by members of the specified list. Retweets are included by default.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-statuses\n     */\n    async listStatuses(options) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('lists/statuses.json', queryParams, { fullResponse: true });\n        return new tweet_paginator_v1_1.ListTimelineV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns the subscribers of the specified list. Private list subscribers will only be shown if the authenticated user owns the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers\n     */\n    async listSubscribers(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('lists/subscribers.json', queryParams, { fullResponse: true });\n        return new list_paginator_v1_1.ListSubscribersV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Check if the specified user is a subscriber of the specified list. Returns the user if they are a subscriber.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers-show\n     */\n    listGetSubscriber(options) {\n        return this.get('lists/subscribers/show.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default.\n     * Does not include the user's own lists.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-subscriptions\n     */\n    async listSubscriptions(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('lists/subscriptions.json', queryParams, { fullResponse: true });\n        return new list_paginator_v1_1.ListSubscriptionsV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /* Media upload API */\n    /**\n     * The STATUS command (this method) is used to periodically poll for updates of media processing operation.\n     * After the STATUS command response returns succeeded, you can move on to the next step which is usually create Tweet with media_id.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/get-media-upload-status\n     */\n    mediaInfo(mediaId) {\n        return this.get('media/upload.json', {\n            command: 'STATUS',\n            media_id: mediaId,\n        }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX });\n    }\n    filterStream({ autoConnect, ...params } = {}) {\n        const parameters = {};\n        for (const [key, value] of Object.entries(params)) {\n            if (key === 'follow' || key === 'track') {\n                parameters[key] = value.toString();\n            }\n            else if (key === 'locations') {\n                const locations = value;\n                parameters.locations = (0, helpers_1.arrayWrap)(locations).map(loc => `${loc.lng},${loc.lat}`).join(',');\n            }\n            else {\n                parameters[key] = value;\n            }\n        }\n        const streamClient = this.stream;\n        return streamClient.postStream('statuses/filter.json', parameters, { autoConnect });\n    }\n    sampleStream({ autoConnect, ...params } = {}) {\n        const streamClient = this.stream;\n        return streamClient.getStream('statuses/sample.json', params, { autoConnect });\n    }\n    /**\n     * Create a client that is prefixed with `https//stream.twitter.com` instead of classic API URL.\n     */\n    get stream() {\n        const copiedClient = new client_v1_1.default(this);\n        copiedClient.setPrefix(globals_1.API_V1_1_STREAM_PREFIX);\n        return copiedClient;\n    }\n    /* Trends API */\n    /**\n     * Returns the top 50 trending topics for a specific id, if trending information is available for it.\n     * Note: The id parameter for this endpoint is the \"where on earth identifier\" or WOEID, which is a legacy identifier created by Yahoo and has been deprecated.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place\n     */\n    trendsByPlace(woeId, options = {}) {\n        return this.get('trends/place.json', { id: woeId, ...options });\n    }\n    /**\n     * Returns the locations that Twitter has trending topic information for.\n     * The response is an array of \"locations\" that encode the location's WOEID\n     * and some other human-readable information such as a canonical name and country the location belongs in.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/trends/locations-with-trending-topics/api-reference/get-trends-available\n     */\n    trendsAvailable() {\n        return this.get('trends/available.json');\n    }\n    /**\n     * Returns the locations that Twitter has trending topic information for, closest to a specified location.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/trends/locations-with-trending-topics/api-reference/get-trends-closest\n     */\n    trendsClosest(lat, long) {\n        return this.get('trends/closest.json', { lat, long });\n    }\n    /* Geo API */\n    /**\n     * Returns all the information about a known place.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/geo/place-information/api-reference/get-geo-id-place_id\n     */\n    geoPlace(placeId) {\n        return this.get('geo/id/:place_id.json', undefined, { params: { place_id: placeId } });\n    }\n    /**\n     * Search for places that can be attached to a Tweet via POST statuses/update.\n     * This request will return a list of all the valid places that can be used as the place_id when updating a status.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/geo/places-near-location/api-reference/get-geo-search\n     */\n    geoSearch(options) {\n        return this.get('geo/search.json', options);\n    }\n    /**\n     * Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.\n     * This request is an informative call and will deliver generalized results about geography.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/geo/places-near-location/api-reference/get-geo-reverse_geocode\n     */\n    geoReverseGeoCode(options) {\n        return this.get('geo/reverse_geocode.json', options);\n    }\n    /* Developer utilities */\n    /**\n     * Returns the current rate limits for methods belonging to the specified resource families.\n     * Each API resource belongs to a \"resource family\" which is indicated in its method documentation.\n     * The method's resource family can be determined from the first component of the path after the resource version.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/developer-utilities/rate-limit-status/api-reference/get-application-rate_limit_status\n     */\n    rateLimitStatuses(...resources) {\n        return this.get('application/rate_limit_status.json', { resources });\n    }\n    /**\n     * Returns the list of languages supported by Twitter along with the language code supported by Twitter.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/developer-utilities/supported-languages/api-reference/get-help-languages\n     */\n    supportedLanguages() {\n        return this.get('help/languages.json');\n    }\n}\nexports.default = TwitterApiv1ReadOnly;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}