{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst globals_1 = require(\"../globals\");\n\nconst client_v1_read_1 = __importDefault(require(\"./client.v1.read\"));\n\nconst types_1 = require(\"../types\");\n\nconst fs = __importStar(require(\"fs\"));\n\nconst media_helpers_v1_1 = require(\"./media-helpers.v1\");\n\nconst helpers_1 = require(\"../helpers\");\n\nconst UPLOAD_ENDPOINT = 'media/upload.json';\n/**\n * Base Twitter v1 client with read/write rights.\n */\n\nclass TwitterApiv1ReadWrite extends client_v1_read_1.default {\n  constructor() {\n    super(...arguments);\n    this._prefix = globals_1.API_V1_1_PREFIX;\n  }\n  /**\n   * Get a client with only read rights.\n   */\n\n\n  get readOnly() {\n    return this;\n  }\n  /* Tweet API */\n\n  /**\n   * Post a new tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n   */\n\n\n  tweet(status) {\n    let payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const queryParams = {\n      status,\n      tweet_mode: 'extended',\n      ...payload\n    };\n    return this.post('statuses/update.json', queryParams);\n  }\n  /**\n   * Quote an existing tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n   */\n\n\n  async quote(status, quotingStatusId) {\n    let payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const url = 'https://twitter.com/i/statuses/' + quotingStatusId;\n    return this.tweet(status, { ...payload,\n      attachment_url: url\n    });\n  }\n  /**\n   * Post a series of tweets.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n   */\n\n\n  async tweetThread(tweets) {\n    const postedTweets = [];\n\n    for (const tweet of tweets) {\n      // Retrieve the last sent tweet\n      const lastTweet = postedTweets.length ? postedTweets[postedTweets.length - 1] : null; // Build the tweet query params\n\n      const queryParams = { ...(typeof tweet === 'string' ? {\n          status: tweet\n        } : tweet)\n      }; // Reply to an existing tweet if needed\n\n      const inReplyToId = lastTweet ? lastTweet.id_str : queryParams.in_reply_to_status_id;\n      const status = queryParams.status;\n\n      if (inReplyToId) {\n        postedTweets.push(await this.reply(status, inReplyToId, queryParams));\n      } else {\n        postedTweets.push(await this.tweet(status, queryParams));\n      }\n    }\n\n    return postedTweets;\n  }\n  /**\n   * Reply to an existing tweet. Shortcut to `.tweet` with tweaked parameters.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n   */\n\n\n  reply(status, in_reply_to_status_id) {\n    let payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this.tweet(status, {\n      auto_populate_reply_metadata: true,\n      in_reply_to_status_id,\n      ...payload\n    });\n  }\n  /**\n   * Delete an existing tweet belonging to you.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-destroy-id\n   */\n\n\n  deleteTweet(tweetId) {\n    return this.post('statuses/destroy/:id.json', {\n      tweet_mode: 'extended'\n    }, {\n      params: {\n        id: tweetId\n      }\n    });\n  }\n  /* User API */\n\n  /**\n   * Report the specified user as a spam account to Twitter.\n   * Additionally, optionally performs the equivalent of POST blocks/create on behalf of the authenticated user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-users-report_spam\n   */\n\n\n  reportUserAsSpam(options) {\n    return this.post('users/report_spam.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /**\n   * Turn on/off Retweets and device notifications from the specified user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-update\n   */\n\n\n  updateFriendship(options) {\n    return this.post('friendships/update.json', options);\n  }\n  /* Account API */\n\n  /**\n   * Update current account settings for authenticating user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-settings\n   */\n\n\n  updateAccountSettings(options) {\n    return this.post('account/settings.json', options);\n  }\n  /**\n   * Sets some values that users are able to set under the \"Account\" tab of their settings page.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile\n   */\n\n\n  updateAccountProfile(options) {\n    return this.post('account/update_profile.json', options);\n  }\n  /**\n   * Uploads a profile banner on behalf of the authenticating user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile_banner\n   */\n\n\n  async updateAccountProfileBanner(file) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const queryParams = {\n      banner: await (0, media_helpers_v1_1.readFileIntoBuffer)(file),\n      ...options\n    };\n    return this.post('account/update_profile_banner.json', queryParams, {\n      forceBodyMode: 'form-data'\n    });\n  }\n  /**\n   * Updates the authenticating user's profile image.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile_image\n   */\n\n\n  async updateAccountProfileImage(file) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      image: await (0, media_helpers_v1_1.readFileIntoBuffer)(file),\n      ...options\n    };\n    return this.post('account/update_profile_image.json', queryParams, {\n      forceBodyMode: 'form-data'\n    });\n  }\n  /**\n   * Removes the uploaded profile banner for the authenticating user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-remove_profile_banner\n   */\n\n\n  removeAccountProfileBanner() {\n    return this.post('account/remove_profile_banner.json');\n  }\n  /* Lists */\n\n  /**\n   * Creates a new list for the authenticated user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-create\n   */\n\n\n  createList(options) {\n    return this.post('lists/create.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /**\n   * Updates the specified list. The authenticated user must own the list to be able to update it.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-update\n   */\n\n\n  updateList(options) {\n    return this.post('lists/update.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /**\n   * Deletes the specified list. The authenticated user must own the list to be able to destroy it.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-destroy\n   */\n\n\n  removeList(options) {\n    return this.post('lists/destroy.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /**\n   * Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.\n   * If you add a single `user_id` or `screen_name`, it will target `lists/members/create.json`, otherwise\n   * it will target `lists/members/create_all.json`.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-members-create_all\n   */\n\n\n  addListMembers(options) {\n    const hasMultiple = options.user_id && (0, helpers_1.hasMultipleItems)(options.user_id) || options.screen_name && (0, helpers_1.hasMultipleItems)(options.screen_name);\n    const endpoint = hasMultiple ? 'lists/members/create_all.json' : 'lists/members/create.json';\n    return this.post(endpoint, options);\n  }\n  /**\n   * Removes multiple members to a list, by specifying a comma-separated list of member ids or screen names.\n   * If you add a single `user_id` or `screen_name`, it will target `lists/members/destroy.json`, otherwise\n   * it will target `lists/members/destroy_all.json`.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-members-destroy_all\n   */\n\n\n  removeListMembers(options) {\n    const hasMultiple = options.user_id && (0, helpers_1.hasMultipleItems)(options.user_id) || options.screen_name && (0, helpers_1.hasMultipleItems)(options.screen_name);\n    const endpoint = hasMultiple ? 'lists/members/destroy_all.json' : 'lists/members/destroy.json';\n    return this.post(endpoint, options);\n  }\n  /**\n   * Subscribes the authenticated user to the specified list.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-subscribers-create\n   */\n\n\n  subscribeToList(options) {\n    return this.post('lists/subscribers/create.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /**\n   * Unsubscribes the authenticated user of the specified list.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-subscribers-destroy\n   */\n\n\n  unsubscribeOfList(options) {\n    return this.post('lists/subscribers/destroy.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /* Media upload API */\n\n  /**\n   * This endpoint can be used to provide additional information about the uploaded media_id.\n   * This feature is currently only supported for images and GIFs.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/post-media-metadata-create\n   */\n\n\n  createMediaMetadata(mediaId, metadata) {\n    return this.post('media/metadata/create.json', {\n      media_id: mediaId,\n      ...metadata\n    }, {\n      prefix: globals_1.API_V1_1_UPLOAD_PREFIX,\n      forceBodyMode: 'json'\n    });\n  }\n  /**\n   * Use this endpoint to associate uploaded subtitles to an uploaded video. You can associate subtitles to video before or after Tweeting.\n   * **To obtain subtitle media ID, you must upload each subtitle file separately using `.uploadMedia()` method.**\n   *\n   * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/post-media-subtitles-create\n   */\n\n\n  createMediaSubtitles(mediaId, subtitles) {\n    return this.post('media/subtitles/create.json', {\n      media_id: mediaId,\n      media_category: 'TweetVideo',\n      subtitle_info: {\n        subtitles\n      }\n    }, {\n      prefix: globals_1.API_V1_1_UPLOAD_PREFIX,\n      forceBodyMode: 'json'\n    });\n  }\n  /**\n   * Use this endpoint to dissociate subtitles from a video and delete the subtitles. You can dissociate subtitles from a video before or after Tweeting.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/post-media-subtitles-delete\n   */\n\n\n  deleteMediaSubtitles(mediaId) {\n    for (var _len = arguments.length, languages = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      languages[_key - 1] = arguments[_key];\n    }\n\n    return this.post('media/subtitles/delete.json', {\n      media_id: mediaId,\n      media_category: 'TweetVideo',\n      subtitle_info: {\n        subtitles: languages.map(lang => ({\n          language_code: lang\n        }))\n      }\n    }, {\n      prefix: globals_1.API_V1_1_UPLOAD_PREFIX,\n      forceBodyMode: 'json'\n    });\n  }\n  /**\n   * Upload a media (JPG/PNG/GIF/MP4/WEBP) or subtitle (SRT) to Twitter and return the media_id to use in tweet/DM send.\n   *\n   * @param file If `string`, filename is supposed.\n   * A `Buffer` is a raw file.\n   * `fs.promises.FileHandle` or `number` are file pointers.\n   *\n   * @param options.type File type (Enum 'jpg' | 'longmp4' | 'mp4' | 'png' | 'gif' | 'srt' | 'webp').\n   * If filename is given, it could be guessed with file extension, otherwise this parameter is mandatory.\n   * If type is not part of the enum, it will be used as mime type.\n   *\n   * Type `longmp4` is **required** is you try to upload a video higher than 140 seconds.\n   *\n   * @param options.chunkLength Maximum chunk length sent to Twitter. Default goes to 1 MB.\n   *\n   * @param options.additionalOwners Other user IDs allowed to use the returned media_id. Default goes to none.\n   *\n   * @param options.maxConcurrentUploads Maximum uploaded chunks in the same time. Default goes to 3.\n   *\n   * @param options.target Target type `tweet` or `dm`. Defaults to `tweet`.\n   * You must specify it if you send a media to use in DMs.\n   */\n\n\n  async uploadMedia(file) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _a;\n\n    const chunkLength = (_a = options.chunkLength) !== null && _a !== void 0 ? _a : 1024 * 1024;\n    const {\n      fileHandle,\n      mediaCategory,\n      fileSize,\n      mimeType\n    } = await this.getUploadMediaRequirements(file, options); // Get the file handle (if not buffer)\n\n    try {\n      // Finally! We can send INIT message.\n      const mediaData = await this.post(UPLOAD_ENDPOINT, {\n        command: 'INIT',\n        total_bytes: fileSize,\n        media_type: mimeType,\n        media_category: mediaCategory,\n        additional_owners: options.additionalOwners,\n        shared: options.shared ? true : undefined\n      }, {\n        prefix: globals_1.API_V1_1_UPLOAD_PREFIX\n      }); // Upload the media chunk by chunk\n\n      await this.mediaChunkedUpload(fileHandle, chunkLength, mediaData.media_id_string, options.maxConcurrentUploads); // Finalize media\n\n      const fullMediaData = await this.post(UPLOAD_ENDPOINT, {\n        command: 'FINALIZE',\n        media_id: mediaData.media_id_string\n      }, {\n        prefix: globals_1.API_V1_1_UPLOAD_PREFIX\n      });\n\n      if (fullMediaData.processing_info && fullMediaData.processing_info.state !== 'succeeded') {\n        // Must wait if video is still computed\n        await this.awaitForMediaProcessingCompletion(fullMediaData);\n      } // Video is ready, return media_id\n\n\n      return fullMediaData.media_id_string;\n    } finally {\n      // Close file if any\n      if (typeof file === 'number') {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fs.close(file, () => {});\n      } else if (typeof fileHandle === 'object' && !(fileHandle instanceof Buffer)) {\n        fileHandle.close();\n      }\n    }\n  }\n\n  async awaitForMediaProcessingCompletion(fullMediaData) {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      fullMediaData = await this.mediaInfo(fullMediaData.media_id_string);\n      const {\n        processing_info\n      } = fullMediaData;\n\n      if (!processing_info || processing_info.state === 'succeeded') {\n        // Ok, completed!\n        return;\n      }\n\n      if (processing_info.state === 'failed') {\n        if (processing_info.error) {\n          const {\n            name,\n            message\n          } = processing_info.error;\n          throw new Error(`Failed to process media: ${name} - ${message}.`);\n        }\n\n        throw new Error('Failed to process the media.');\n      }\n\n      if (processing_info.check_after_secs) {\n        // Await for given seconds\n        await (0, media_helpers_v1_1.sleepSecs)(processing_info.check_after_secs);\n      } else {\n        // No info; Await for 5 seconds\n        await (0, media_helpers_v1_1.sleepSecs)(5);\n      }\n    }\n  }\n\n  async getUploadMediaRequirements(file) {\n    let {\n      mimeType,\n      type,\n      target,\n      longVideo\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // Get the file handle (if not buffer)\n    let fileHandle;\n\n    try {\n      fileHandle = await (0, media_helpers_v1_1.getFileHandle)(file); // Get the mimetype\n\n      const realMimeType = (0, media_helpers_v1_1.getMimeType)(file, type, mimeType); // Get the media category\n\n      let mediaCategory; // If explicit longmp4 OR explicit MIME type and not DM target\n\n      if (realMimeType === types_1.EUploadMimeType.Mp4 && (!mimeType && !type && target !== 'dm' || longVideo)) {\n        mediaCategory = 'amplify_video';\n      } else {\n        mediaCategory = (0, media_helpers_v1_1.getMediaCategoryByMime)(realMimeType, target !== null && target !== void 0 ? target : 'tweet');\n      }\n\n      return {\n        fileHandle,\n        mediaCategory,\n        fileSize: await (0, media_helpers_v1_1.getFileSizeFromFileHandle)(fileHandle),\n        mimeType: realMimeType\n      };\n    } catch (e) {\n      // Close file if any\n      if (typeof file === 'number') {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fs.close(file, () => {});\n      } else if (typeof fileHandle === 'object' && !(fileHandle instanceof Buffer)) {\n        fileHandle.close();\n      }\n\n      throw e;\n    }\n  }\n\n  async mediaChunkedUpload(fileHandle, chunkLength, mediaId) {\n    let maxConcurrentUploads = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 3;\n    // Send chunk by chunk\n    let chunkIndex = 0;\n\n    if (maxConcurrentUploads < 1) {\n      throw new RangeError('Bad maxConcurrentUploads parameter.');\n    } // Creating a buffer for doing file stuff (if we don't have one)\n\n\n    const buffer = fileHandle instanceof Buffer ? undefined : Buffer.alloc(chunkLength); // Sliced/filled buffer returned for each part\n\n    let readBuffer; // Needed to know when we should stop reading the file\n\n    let nread; // Needed to use the buffer object (file handles always \"remembers\" file position)\n\n    let offset = 0;\n    [readBuffer, nread] = await (0, media_helpers_v1_1.readNextPartOf)(fileHandle, chunkLength, offset, buffer);\n    offset += nread; // Handle max concurrent uploads\n\n    const currentUploads = new Set(); // Read buffer until file is completely read\n\n    while (nread) {\n      const mediaBufferPart = readBuffer.slice(0, nread); // Sent part if part has something inside\n\n      if (mediaBufferPart.length) {\n        const request = this.post(UPLOAD_ENDPOINT, {\n          command: 'APPEND',\n          media_id: mediaId,\n          segment_index: chunkIndex,\n          media: mediaBufferPart\n        }, {\n          prefix: globals_1.API_V1_1_UPLOAD_PREFIX\n        });\n        currentUploads.add(request);\n        request.then(() => {\n          currentUploads.delete(request);\n        });\n        chunkIndex++;\n      }\n\n      if (currentUploads.size >= maxConcurrentUploads) {\n        // Await for first promise to be finished\n        await Promise.race(currentUploads);\n      }\n\n      [readBuffer, nread] = await (0, media_helpers_v1_1.readNextPartOf)(fileHandle, chunkLength, offset, buffer);\n      offset += nread;\n    }\n\n    await Promise.all([...currentUploads]);\n  }\n\n}\n\nexports.default = TwitterApiv1ReadWrite;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__importDefault","exports","globals_1","require","client_v1_read_1","types_1","fs","media_helpers_v1_1","helpers_1","UPLOAD_ENDPOINT","TwitterApiv1ReadWrite","default","constructor","arguments","_prefix","API_V1_1_PREFIX","readOnly","tweet","status","payload","queryParams","tweet_mode","post","quote","quotingStatusId","url","attachment_url","tweetThread","tweets","postedTweets","lastTweet","length","inReplyToId","id_str","in_reply_to_status_id","push","reply","auto_populate_reply_metadata","deleteTweet","tweetId","params","id","reportUserAsSpam","options","updateFriendship","updateAccountSettings","updateAccountProfile","updateAccountProfileBanner","file","banner","readFileIntoBuffer","forceBodyMode","updateAccountProfileImage","image","removeAccountProfileBanner","createList","updateList","removeList","addListMembers","hasMultiple","user_id","hasMultipleItems","screen_name","endpoint","removeListMembers","subscribeToList","unsubscribeOfList","createMediaMetadata","mediaId","metadata","media_id","prefix","API_V1_1_UPLOAD_PREFIX","createMediaSubtitles","subtitles","media_category","subtitle_info","deleteMediaSubtitles","languages","map","lang","language_code","uploadMedia","_a","chunkLength","fileHandle","mediaCategory","fileSize","mimeType","getUploadMediaRequirements","mediaData","command","total_bytes","media_type","additional_owners","additionalOwners","shared","mediaChunkedUpload","media_id_string","maxConcurrentUploads","fullMediaData","processing_info","state","awaitForMediaProcessingCompletion","close","Buffer","mediaInfo","error","name","message","Error","check_after_secs","sleepSecs","type","target","longVideo","getFileHandle","realMimeType","getMimeType","EUploadMimeType","Mp4","getMediaCategoryByMime","getFileSizeFromFileHandle","e","chunkIndex","RangeError","buffer","alloc","readBuffer","nread","offset","readNextPartOf","currentUploads","Set","mediaBufferPart","slice","request","segment_index","media","add","then","delete","size","Promise","race","all"],"sources":["/Users/user/Sites/twits_app/twits/node_modules/twitter-api-v2/dist/v1/client.v1.write.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst globals_1 = require(\"../globals\");\nconst client_v1_read_1 = __importDefault(require(\"./client.v1.read\"));\nconst types_1 = require(\"../types\");\nconst fs = __importStar(require(\"fs\"));\nconst media_helpers_v1_1 = require(\"./media-helpers.v1\");\nconst helpers_1 = require(\"../helpers\");\nconst UPLOAD_ENDPOINT = 'media/upload.json';\n/**\n * Base Twitter v1 client with read/write rights.\n */\nclass TwitterApiv1ReadWrite extends client_v1_read_1.default {\n    constructor() {\n        super(...arguments);\n        this._prefix = globals_1.API_V1_1_PREFIX;\n    }\n    /**\n     * Get a client with only read rights.\n     */\n    get readOnly() {\n        return this;\n    }\n    /* Tweet API */\n    /**\n     * Post a new tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n     */\n    tweet(status, payload = {}) {\n        const queryParams = {\n            status,\n            tweet_mode: 'extended',\n            ...payload,\n        };\n        return this.post('statuses/update.json', queryParams);\n    }\n    /**\n     * Quote an existing tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n     */\n    async quote(status, quotingStatusId, payload = {}) {\n        const url = 'https://twitter.com/i/statuses/' + quotingStatusId;\n        return this.tweet(status, { ...payload, attachment_url: url });\n    }\n    /**\n     * Post a series of tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n     */\n    async tweetThread(tweets) {\n        const postedTweets = [];\n        for (const tweet of tweets) {\n            // Retrieve the last sent tweet\n            const lastTweet = postedTweets.length ? postedTweets[postedTweets.length - 1] : null;\n            // Build the tweet query params\n            const queryParams = { ...(typeof tweet === 'string' ? ({ status: tweet }) : tweet) };\n            // Reply to an existing tweet if needed\n            const inReplyToId = lastTweet ? lastTweet.id_str : queryParams.in_reply_to_status_id;\n            const status = queryParams.status;\n            if (inReplyToId) {\n                postedTweets.push(await this.reply(status, inReplyToId, queryParams));\n            }\n            else {\n                postedTweets.push(await this.tweet(status, queryParams));\n            }\n        }\n        return postedTweets;\n    }\n    /**\n     * Reply to an existing tweet. Shortcut to `.tweet` with tweaked parameters.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n     */\n    reply(status, in_reply_to_status_id, payload = {}) {\n        return this.tweet(status, {\n            auto_populate_reply_metadata: true,\n            in_reply_to_status_id,\n            ...payload,\n        });\n    }\n    /**\n     * Delete an existing tweet belonging to you.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-destroy-id\n     */\n    deleteTweet(tweetId) {\n        return this.post('statuses/destroy/:id.json', { tweet_mode: 'extended' }, { params: { id: tweetId } });\n    }\n    /* User API */\n    /**\n     * Report the specified user as a spam account to Twitter.\n     * Additionally, optionally performs the equivalent of POST blocks/create on behalf of the authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-users-report_spam\n     */\n    reportUserAsSpam(options) {\n        return this.post('users/report_spam.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Turn on/off Retweets and device notifications from the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-update\n     */\n    updateFriendship(options) {\n        return this.post('friendships/update.json', options);\n    }\n    /* Account API */\n    /**\n     * Update current account settings for authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-settings\n     */\n    updateAccountSettings(options) {\n        return this.post('account/settings.json', options);\n    }\n    /**\n     * Sets some values that users are able to set under the \"Account\" tab of their settings page.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile\n     */\n    updateAccountProfile(options) {\n        return this.post('account/update_profile.json', options);\n    }\n    /**\n     * Uploads a profile banner on behalf of the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile_banner\n     */\n    async updateAccountProfileBanner(file, options = {}) {\n        const queryParams = {\n            banner: await (0, media_helpers_v1_1.readFileIntoBuffer)(file),\n            ...options,\n        };\n        return this.post('account/update_profile_banner.json', queryParams, { forceBodyMode: 'form-data' });\n    }\n    /**\n     * Updates the authenticating user's profile image.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile_image\n     */\n    async updateAccountProfileImage(file, options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            image: await (0, media_helpers_v1_1.readFileIntoBuffer)(file),\n            ...options,\n        };\n        return this.post('account/update_profile_image.json', queryParams, { forceBodyMode: 'form-data' });\n    }\n    /**\n     * Removes the uploaded profile banner for the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-remove_profile_banner\n     */\n    removeAccountProfileBanner() {\n        return this.post('account/remove_profile_banner.json');\n    }\n    /* Lists */\n    /**\n     * Creates a new list for the authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-create\n     */\n    createList(options) {\n        return this.post('lists/create.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Updates the specified list. The authenticated user must own the list to be able to update it.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-update\n     */\n    updateList(options) {\n        return this.post('lists/update.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Deletes the specified list. The authenticated user must own the list to be able to destroy it.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-destroy\n     */\n    removeList(options) {\n        return this.post('lists/destroy.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.\n     * If you add a single `user_id` or `screen_name`, it will target `lists/members/create.json`, otherwise\n     * it will target `lists/members/create_all.json`.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-members-create_all\n     */\n    addListMembers(options) {\n        const hasMultiple = (options.user_id && (0, helpers_1.hasMultipleItems)(options.user_id)) || (options.screen_name && (0, helpers_1.hasMultipleItems)(options.screen_name));\n        const endpoint = hasMultiple ? 'lists/members/create_all.json' : 'lists/members/create.json';\n        return this.post(endpoint, options);\n    }\n    /**\n     * Removes multiple members to a list, by specifying a comma-separated list of member ids or screen names.\n     * If you add a single `user_id` or `screen_name`, it will target `lists/members/destroy.json`, otherwise\n     * it will target `lists/members/destroy_all.json`.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-members-destroy_all\n     */\n    removeListMembers(options) {\n        const hasMultiple = (options.user_id && (0, helpers_1.hasMultipleItems)(options.user_id)) || (options.screen_name && (0, helpers_1.hasMultipleItems)(options.screen_name));\n        const endpoint = hasMultiple ? 'lists/members/destroy_all.json' : 'lists/members/destroy.json';\n        return this.post(endpoint, options);\n    }\n    /**\n     * Subscribes the authenticated user to the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-subscribers-create\n     */\n    subscribeToList(options) {\n        return this.post('lists/subscribers/create.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Unsubscribes the authenticated user of the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-subscribers-destroy\n     */\n    unsubscribeOfList(options) {\n        return this.post('lists/subscribers/destroy.json', { tweet_mode: 'extended', ...options });\n    }\n    /* Media upload API */\n    /**\n     * This endpoint can be used to provide additional information about the uploaded media_id.\n     * This feature is currently only supported for images and GIFs.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/post-media-metadata-create\n     */\n    createMediaMetadata(mediaId, metadata) {\n        return this.post('media/metadata/create.json', { media_id: mediaId, ...metadata }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX, forceBodyMode: 'json' });\n    }\n    /**\n     * Use this endpoint to associate uploaded subtitles to an uploaded video. You can associate subtitles to video before or after Tweeting.\n     * **To obtain subtitle media ID, you must upload each subtitle file separately using `.uploadMedia()` method.**\n     *\n     * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/post-media-subtitles-create\n     */\n    createMediaSubtitles(mediaId, subtitles) {\n        return this.post('media/subtitles/create.json', { media_id: mediaId, media_category: 'TweetVideo', subtitle_info: { subtitles } }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX, forceBodyMode: 'json' });\n    }\n    /**\n     * Use this endpoint to dissociate subtitles from a video and delete the subtitles. You can dissociate subtitles from a video before or after Tweeting.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/post-media-subtitles-delete\n     */\n    deleteMediaSubtitles(mediaId, ...languages) {\n        return this.post('media/subtitles/delete.json', {\n            media_id: mediaId,\n            media_category: 'TweetVideo',\n            subtitle_info: { subtitles: languages.map(lang => ({ language_code: lang })) },\n        }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX, forceBodyMode: 'json' });\n    }\n    /**\n     * Upload a media (JPG/PNG/GIF/MP4/WEBP) or subtitle (SRT) to Twitter and return the media_id to use in tweet/DM send.\n     *\n     * @param file If `string`, filename is supposed.\n     * A `Buffer` is a raw file.\n     * `fs.promises.FileHandle` or `number` are file pointers.\n     *\n     * @param options.type File type (Enum 'jpg' | 'longmp4' | 'mp4' | 'png' | 'gif' | 'srt' | 'webp').\n     * If filename is given, it could be guessed with file extension, otherwise this parameter is mandatory.\n     * If type is not part of the enum, it will be used as mime type.\n     *\n     * Type `longmp4` is **required** is you try to upload a video higher than 140 seconds.\n     *\n     * @param options.chunkLength Maximum chunk length sent to Twitter. Default goes to 1 MB.\n     *\n     * @param options.additionalOwners Other user IDs allowed to use the returned media_id. Default goes to none.\n     *\n     * @param options.maxConcurrentUploads Maximum uploaded chunks in the same time. Default goes to 3.\n     *\n     * @param options.target Target type `tweet` or `dm`. Defaults to `tweet`.\n     * You must specify it if you send a media to use in DMs.\n     */\n    async uploadMedia(file, options = {}) {\n        var _a;\n        const chunkLength = (_a = options.chunkLength) !== null && _a !== void 0 ? _a : (1024 * 1024);\n        const { fileHandle, mediaCategory, fileSize, mimeType } = await this.getUploadMediaRequirements(file, options);\n        // Get the file handle (if not buffer)\n        try {\n            // Finally! We can send INIT message.\n            const mediaData = await this.post(UPLOAD_ENDPOINT, {\n                command: 'INIT',\n                total_bytes: fileSize,\n                media_type: mimeType,\n                media_category: mediaCategory,\n                additional_owners: options.additionalOwners,\n                shared: options.shared ? true : undefined,\n            }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX });\n            // Upload the media chunk by chunk\n            await this.mediaChunkedUpload(fileHandle, chunkLength, mediaData.media_id_string, options.maxConcurrentUploads);\n            // Finalize media\n            const fullMediaData = await this.post(UPLOAD_ENDPOINT, {\n                command: 'FINALIZE',\n                media_id: mediaData.media_id_string,\n            }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX });\n            if (fullMediaData.processing_info && fullMediaData.processing_info.state !== 'succeeded') {\n                // Must wait if video is still computed\n                await this.awaitForMediaProcessingCompletion(fullMediaData);\n            }\n            // Video is ready, return media_id\n            return fullMediaData.media_id_string;\n        }\n        finally {\n            // Close file if any\n            if (typeof file === 'number') {\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\n                fs.close(file, () => { });\n            }\n            else if (typeof fileHandle === 'object' && !(fileHandle instanceof Buffer)) {\n                fileHandle.close();\n            }\n        }\n    }\n    async awaitForMediaProcessingCompletion(fullMediaData) {\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            fullMediaData = await this.mediaInfo(fullMediaData.media_id_string);\n            const { processing_info } = fullMediaData;\n            if (!processing_info || processing_info.state === 'succeeded') {\n                // Ok, completed!\n                return;\n            }\n            if (processing_info.state === 'failed') {\n                if (processing_info.error) {\n                    const { name, message } = processing_info.error;\n                    throw new Error(`Failed to process media: ${name} - ${message}.`);\n                }\n                throw new Error('Failed to process the media.');\n            }\n            if (processing_info.check_after_secs) {\n                // Await for given seconds\n                await (0, media_helpers_v1_1.sleepSecs)(processing_info.check_after_secs);\n            }\n            else {\n                // No info; Await for 5 seconds\n                await (0, media_helpers_v1_1.sleepSecs)(5);\n            }\n        }\n    }\n    async getUploadMediaRequirements(file, { mimeType, type, target, longVideo } = {}) {\n        // Get the file handle (if not buffer)\n        let fileHandle;\n        try {\n            fileHandle = await (0, media_helpers_v1_1.getFileHandle)(file);\n            // Get the mimetype\n            const realMimeType = (0, media_helpers_v1_1.getMimeType)(file, type, mimeType);\n            // Get the media category\n            let mediaCategory;\n            // If explicit longmp4 OR explicit MIME type and not DM target\n            if (realMimeType === types_1.EUploadMimeType.Mp4 && ((!mimeType && !type && target !== 'dm') || longVideo)) {\n                mediaCategory = 'amplify_video';\n            }\n            else {\n                mediaCategory = (0, media_helpers_v1_1.getMediaCategoryByMime)(realMimeType, target !== null && target !== void 0 ? target : 'tweet');\n            }\n            return {\n                fileHandle,\n                mediaCategory,\n                fileSize: await (0, media_helpers_v1_1.getFileSizeFromFileHandle)(fileHandle),\n                mimeType: realMimeType,\n            };\n        }\n        catch (e) {\n            // Close file if any\n            if (typeof file === 'number') {\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\n                fs.close(file, () => { });\n            }\n            else if (typeof fileHandle === 'object' && !(fileHandle instanceof Buffer)) {\n                fileHandle.close();\n            }\n            throw e;\n        }\n    }\n    async mediaChunkedUpload(fileHandle, chunkLength, mediaId, maxConcurrentUploads = 3) {\n        // Send chunk by chunk\n        let chunkIndex = 0;\n        if (maxConcurrentUploads < 1) {\n            throw new RangeError('Bad maxConcurrentUploads parameter.');\n        }\n        // Creating a buffer for doing file stuff (if we don't have one)\n        const buffer = fileHandle instanceof Buffer ? undefined : Buffer.alloc(chunkLength);\n        // Sliced/filled buffer returned for each part\n        let readBuffer;\n        // Needed to know when we should stop reading the file\n        let nread;\n        // Needed to use the buffer object (file handles always \"remembers\" file position)\n        let offset = 0;\n        [readBuffer, nread] = await (0, media_helpers_v1_1.readNextPartOf)(fileHandle, chunkLength, offset, buffer);\n        offset += nread;\n        // Handle max concurrent uploads\n        const currentUploads = new Set();\n        // Read buffer until file is completely read\n        while (nread) {\n            const mediaBufferPart = readBuffer.slice(0, nread);\n            // Sent part if part has something inside\n            if (mediaBufferPart.length) {\n                const request = this.post(UPLOAD_ENDPOINT, {\n                    command: 'APPEND',\n                    media_id: mediaId,\n                    segment_index: chunkIndex,\n                    media: mediaBufferPart,\n                }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX });\n                currentUploads.add(request);\n                request.then(() => {\n                    currentUploads.delete(request);\n                });\n                chunkIndex++;\n            }\n            if (currentUploads.size >= maxConcurrentUploads) {\n                // Await for first promise to be finished\n                await Promise.race(currentUploads);\n            }\n            [readBuffer, nread] = await (0, media_helpers_v1_1.readNextPartOf)(fileHandle, chunkLength, offset, buffer);\n            offset += nread;\n        }\n        await Promise.all([...currentUploads]);\n    }\n}\nexports.default = TwitterApiv1ReadWrite;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}