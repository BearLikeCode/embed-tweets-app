{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst globals_1 = require(\"../globals\");\n\nconst client_v2_read_1 = __importDefault(require(\"./client.v2.read\"));\n\nconst client_v2_labs_write_1 = __importDefault(require(\"../v2-labs/client.v2.labs.write\"));\n/**\n * Base Twitter v2 client with read/write rights.\n */\n\n\nclass TwitterApiv2ReadWrite extends client_v2_read_1.default {\n  constructor() {\n    super(...arguments);\n    this._prefix = globals_1.API_V2_PREFIX;\n  }\n  /* Sub-clients */\n\n  /**\n   * Get a client with only read rights.\n   */\n\n\n  get readOnly() {\n    return this;\n  }\n  /**\n   * Get a client for v2 labs endpoints.\n   */\n\n\n  get labs() {\n    if (this._labs) return this._labs;\n    return this._labs = new client_v2_labs_write_1.default(this);\n  }\n  /* Tweets */\n\n  /**\n   * Hides or unhides a reply to a Tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/hide-replies/api-reference/put-tweets-id-hidden\n   */\n\n\n  hideReply(tweetId, makeHidden) {\n    return this.put('tweets/:id/hidden', {\n      hidden: makeHidden\n    }, {\n      params: {\n        id: tweetId\n      }\n    });\n  }\n  /**\n   * Causes the user ID identified in the path parameter to Like the target Tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/post-users-user_id-likes\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n\n\n  like(loggedUserId, targetTweetId) {\n    return this.post('users/:id/likes', {\n      tweet_id: targetTweetId\n    }, {\n      params: {\n        id: loggedUserId\n      }\n    });\n  }\n  /**\n   * Allows a user or authenticated user ID to unlike a Tweet.\n   * The request succeeds with no action when the user sends a request to a user they're not liking the Tweet or have already unliked the Tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/delete-users-id-likes-tweet_id\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n\n\n  unlike(loggedUserId, targetTweetId) {\n    return this.delete('users/:id/likes/:tweet_id', undefined, {\n      params: {\n        id: loggedUserId,\n        tweet_id: targetTweetId\n      }\n    });\n  }\n  /**\n   * Causes the user ID identified in the path parameter to Retweet the target Tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/post-users-id-retweets\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n\n\n  retweet(loggedUserId, targetTweetId) {\n    return this.post('users/:id/retweets', {\n      tweet_id: targetTweetId\n    }, {\n      params: {\n        id: loggedUserId\n      }\n    });\n  }\n  /**\n   * Allows a user or authenticated user ID to remove the Retweet of a Tweet.\n   * The request succeeds with no action when the user sends a request to a user they're not Retweeting the Tweet or have already removed the Retweet of.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/delete-users-id-retweets-tweet_id\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n\n\n  unretweet(loggedUserId, targetTweetId) {\n    return this.delete('users/:id/retweets/:tweet_id', undefined, {\n      params: {\n        id: loggedUserId,\n        tweet_id: targetTweetId\n      }\n    });\n  }\n\n  tweet(status) {\n    let payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (typeof status === 'object') {\n      payload = status;\n    } else {\n      payload = {\n        text: status,\n        ...payload\n      };\n    }\n\n    return this.post('tweets', payload);\n  }\n  /**\n   * Reply to a Tweet on behalf of an authenticated user.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets\n   */\n\n\n  reply(status, toTweetId) {\n    let payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var _a;\n\n    const reply = {\n      in_reply_to_tweet_id: toTweetId,\n      ...((_a = payload.reply) !== null && _a !== void 0 ? _a : {})\n    };\n    return this.post('tweets', {\n      text: status,\n      ...payload,\n      reply\n    });\n  }\n  /**\n   * Quote an existing Tweet on behalf of an authenticated user.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets\n   */\n\n\n  quote(status, quotedTweetId) {\n    let payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this.tweet(status, { ...payload,\n      quote_tweet_id: quotedTweetId\n    });\n  }\n  /**\n   * Post a series of tweets.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets\n   */\n\n\n  async tweetThread(tweets) {\n    var _a, _b;\n\n    const postedTweets = [];\n\n    for (const tweet of tweets) {\n      // Retrieve the last sent tweet\n      const lastTweet = postedTweets.length ? postedTweets[postedTweets.length - 1] : null; // Build the tweet query params\n\n      const queryParams = { ...(typeof tweet === 'string' ? {\n          text: tweet\n        } : tweet)\n      }; // Reply to an existing tweet if needed\n\n      const inReplyToId = lastTweet ? lastTweet.data.id : (_a = queryParams.reply) === null || _a === void 0 ? void 0 : _a.in_reply_to_tweet_id;\n      const status = (_b = queryParams.text) !== null && _b !== void 0 ? _b : '';\n\n      if (inReplyToId) {\n        postedTweets.push(await this.reply(status, inReplyToId, queryParams));\n      } else {\n        postedTweets.push(await this.tweet(status, queryParams));\n      }\n    }\n\n    return postedTweets;\n  }\n  /**\n   * Allows a user or authenticated user ID to delete a Tweet\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/delete-tweets-id\n   */\n\n\n  deleteTweet(tweetId) {\n    return this.delete('tweets/:id', undefined, {\n      params: {\n        id: tweetId\n      }\n    });\n  }\n  /* Bookmarks */\n\n  /**\n   * Causes the user ID of an authenticated user identified in the path parameter to Bookmark the target Tweet provided in the request body.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/bookmarks/api-reference/post-users-id-bookmarks\n   *\n   * OAuth2 scopes: `users.read` `tweet.read` `bookmark.write`\n   */\n\n\n  async bookmark(tweetId) {\n    const user = await this.getCurrentUserV2Object();\n    return this.post('users/:id/bookmarks', {\n      tweet_id: tweetId\n    }, {\n      params: {\n        id: user.data.id\n      }\n    });\n  }\n  /**\n   * Allows a user or authenticated user ID to remove a Bookmark of a Tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/bookmarks/api-reference/delete-users-id-bookmarks-tweet_id\n   *\n   * OAuth2 scopes: `users.read` `tweet.read` `bookmark.write`\n   */\n\n\n  async deleteBookmark(tweetId) {\n    const user = await this.getCurrentUserV2Object();\n    return this.delete('users/:id/bookmarks/:tweet_id', undefined, {\n      params: {\n        id: user.data.id,\n        tweet_id: tweetId\n      }\n    });\n  }\n  /* Users */\n\n  /**\n   * Allows a user ID to follow another user.\n   * If the target user does not have public Tweets, this endpoint will send a follow request.\n   * https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/post-users-source_user_id-following\n   *\n   * OAuth2 scope: `follows.write`\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n\n\n  follow(loggedUserId, targetUserId) {\n    return this.post('users/:id/following', {\n      target_user_id: targetUserId\n    }, {\n      params: {\n        id: loggedUserId\n      }\n    });\n  }\n  /**\n   * Allows a user ID to unfollow another user.\n   * https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/delete-users-source_id-following\n   *\n   * OAuth2 scope: `follows.write`\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n\n\n  unfollow(loggedUserId, targetUserId) {\n    return this.delete('users/:source_user_id/following/:target_user_id', undefined, {\n      params: {\n        source_user_id: loggedUserId,\n        target_user_id: targetUserId\n      }\n    });\n  }\n  /**\n   * Causes the user (in the path) to block the target user.\n   * The user (in the path) must match the user context authorizing the request.\n   * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/post-users-user_id-blocking\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n\n\n  block(loggedUserId, targetUserId) {\n    return this.post('users/:id/blocking', {\n      target_user_id: targetUserId\n    }, {\n      params: {\n        id: loggedUserId\n      }\n    });\n  }\n  /**\n   * Allows a user or authenticated user ID to unblock another user.\n   * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/delete-users-user_id-blocking\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n\n\n  unblock(loggedUserId, targetUserId) {\n    return this.delete('users/:source_user_id/blocking/:target_user_id', undefined, {\n      params: {\n        source_user_id: loggedUserId,\n        target_user_id: targetUserId\n      }\n    });\n  }\n  /**\n   * Allows an authenticated user ID to mute the target user.\n   * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/post-users-user_id-muting\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n\n\n  mute(loggedUserId, targetUserId) {\n    return this.post('users/:id/muting', {\n      target_user_id: targetUserId\n    }, {\n      params: {\n        id: loggedUserId\n      }\n    });\n  }\n  /**\n   * Allows an authenticated user ID to unmute the target user.\n   * The request succeeds with no action when the user sends a request to a user they're not muting or have already unmuted.\n   * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/delete-users-user_id-muting\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n\n\n  unmute(loggedUserId, targetUserId) {\n    return this.delete('users/:source_user_id/muting/:target_user_id', undefined, {\n      params: {\n        source_user_id: loggedUserId,\n        target_user_id: targetUserId\n      }\n    });\n  }\n  /* Lists */\n\n  /**\n   * Creates a new list for the authenticated user.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-lists\n   */\n\n\n  createList(options) {\n    return this.post('lists', options);\n  }\n  /**\n   * Updates the specified list. The authenticated user must own the list to be able to update it.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/put-lists-id\n   */\n\n\n  updateList(listId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.put('lists/:id', options, {\n      params: {\n        id: listId\n      }\n    });\n  }\n  /**\n   * Deletes the specified list. The authenticated user must own the list to be able to destroy it.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-lists-id\n   */\n\n\n  removeList(listId) {\n    return this.delete('lists/:id', undefined, {\n      params: {\n        id: listId\n      }\n    });\n  }\n  /**\n   * Adds a member to a list.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-lists-id-members\n   */\n\n\n  addListMember(listId, userId) {\n    return this.post('lists/:id/members', {\n      user_id: userId\n    }, {\n      params: {\n        id: listId\n      }\n    });\n  }\n  /**\n   * Remember a member to a list.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-lists-id-members-user_id\n   */\n\n\n  removeListMember(listId, userId) {\n    return this.delete('lists/:id/members/:user_id', undefined, {\n      params: {\n        id: listId,\n        user_id: userId\n      }\n    });\n  }\n  /**\n   * Subscribes the authenticated user to the specified list.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-users-id-followed-lists\n   */\n\n\n  subscribeToList(loggedUserId, listId) {\n    return this.post('users/:id/followed_lists', {\n      list_id: listId\n    }, {\n      params: {\n        id: loggedUserId\n      }\n    });\n  }\n  /**\n   * Unsubscribes the authenticated user to the specified list.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-users-id-followed-lists-list_id\n   */\n\n\n  unsubscribeOfList(loggedUserId, listId) {\n    return this.delete('users/:id/followed_lists/:list_id', undefined, {\n      params: {\n        id: loggedUserId,\n        list_id: listId\n      }\n    });\n  }\n  /**\n   * Enables the authenticated user to pin a List.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-users-id-pinned-lists\n   */\n\n\n  pinList(loggedUserId, listId) {\n    return this.post('users/:id/pinned_lists', {\n      list_id: listId\n    }, {\n      params: {\n        id: loggedUserId\n      }\n    });\n  }\n  /**\n   * Enables the authenticated user to unpin a List.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-users-id-pinned-lists-list_id\n   */\n\n\n  unpinList(loggedUserId, listId) {\n    return this.delete('users/:id/pinned_lists/:list_id', undefined, {\n      params: {\n        id: loggedUserId,\n        list_id: listId\n      }\n    });\n  }\n\n}\n\nexports.default = TwitterApiv2ReadWrite;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","globals_1","require","client_v2_read_1","client_v2_labs_write_1","TwitterApiv2ReadWrite","default","constructor","arguments","_prefix","API_V2_PREFIX","readOnly","labs","_labs","hideReply","tweetId","makeHidden","put","hidden","params","id","like","loggedUserId","targetTweetId","post","tweet_id","unlike","delete","undefined","retweet","unretweet","tweet","status","payload","text","reply","toTweetId","_a","in_reply_to_tweet_id","quote","quotedTweetId","quote_tweet_id","tweetThread","tweets","_b","postedTweets","lastTweet","length","queryParams","inReplyToId","data","push","deleteTweet","bookmark","user","getCurrentUserV2Object","deleteBookmark","follow","targetUserId","target_user_id","unfollow","source_user_id","block","unblock","mute","unmute","createList","options","updateList","listId","removeList","addListMember","userId","user_id","removeListMember","subscribeToList","list_id","unsubscribeOfList","pinList","unpinList"],"sources":["/Users/user/Sites/twits_app/twits/node_modules/twitter-api-v2/dist/v2/client.v2.write.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst globals_1 = require(\"../globals\");\nconst client_v2_read_1 = __importDefault(require(\"./client.v2.read\"));\nconst client_v2_labs_write_1 = __importDefault(require(\"../v2-labs/client.v2.labs.write\"));\n/**\n * Base Twitter v2 client with read/write rights.\n */\nclass TwitterApiv2ReadWrite extends client_v2_read_1.default {\n    constructor() {\n        super(...arguments);\n        this._prefix = globals_1.API_V2_PREFIX;\n    }\n    /* Sub-clients */\n    /**\n     * Get a client with only read rights.\n     */\n    get readOnly() {\n        return this;\n    }\n    /**\n     * Get a client for v2 labs endpoints.\n     */\n    get labs() {\n        if (this._labs)\n            return this._labs;\n        return this._labs = new client_v2_labs_write_1.default(this);\n    }\n    /* Tweets */\n    /**\n     * Hides or unhides a reply to a Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/hide-replies/api-reference/put-tweets-id-hidden\n     */\n    hideReply(tweetId, makeHidden) {\n        return this.put('tweets/:id/hidden', { hidden: makeHidden }, { params: { id: tweetId } });\n    }\n    /**\n     * Causes the user ID identified in the path parameter to Like the target Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/post-users-user_id-likes\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    like(loggedUserId, targetTweetId) {\n        return this.post('users/:id/likes', { tweet_id: targetTweetId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Allows a user or authenticated user ID to unlike a Tweet.\n     * The request succeeds with no action when the user sends a request to a user they're not liking the Tweet or have already unliked the Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/delete-users-id-likes-tweet_id\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    unlike(loggedUserId, targetTweetId) {\n        return this.delete('users/:id/likes/:tweet_id', undefined, {\n            params: { id: loggedUserId, tweet_id: targetTweetId },\n        });\n    }\n    /**\n     * Causes the user ID identified in the path parameter to Retweet the target Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/post-users-id-retweets\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    retweet(loggedUserId, targetTweetId) {\n        return this.post('users/:id/retweets', { tweet_id: targetTweetId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Allows a user or authenticated user ID to remove the Retweet of a Tweet.\n     * The request succeeds with no action when the user sends a request to a user they're not Retweeting the Tweet or have already removed the Retweet of.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/delete-users-id-retweets-tweet_id\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    unretweet(loggedUserId, targetTweetId) {\n        return this.delete('users/:id/retweets/:tweet_id', undefined, {\n            params: { id: loggedUserId, tweet_id: targetTweetId },\n        });\n    }\n    tweet(status, payload = {}) {\n        if (typeof status === 'object') {\n            payload = status;\n        }\n        else {\n            payload = { text: status, ...payload };\n        }\n        return this.post('tweets', payload);\n    }\n    /**\n     * Reply to a Tweet on behalf of an authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets\n     */\n    reply(status, toTweetId, payload = {}) {\n        var _a;\n        const reply = { in_reply_to_tweet_id: toTweetId, ...(_a = payload.reply) !== null && _a !== void 0 ? _a : {} };\n        return this.post('tweets', { text: status, ...payload, reply });\n    }\n    /**\n     * Quote an existing Tweet on behalf of an authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets\n     */\n    quote(status, quotedTweetId, payload = {}) {\n        return this.tweet(status, { ...payload, quote_tweet_id: quotedTweetId });\n    }\n    /**\n     * Post a series of tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets\n     */\n    async tweetThread(tweets) {\n        var _a, _b;\n        const postedTweets = [];\n        for (const tweet of tweets) {\n            // Retrieve the last sent tweet\n            const lastTweet = postedTweets.length ? postedTweets[postedTweets.length - 1] : null;\n            // Build the tweet query params\n            const queryParams = { ...(typeof tweet === 'string' ? ({ text: tweet }) : tweet) };\n            // Reply to an existing tweet if needed\n            const inReplyToId = lastTweet ? lastTweet.data.id : (_a = queryParams.reply) === null || _a === void 0 ? void 0 : _a.in_reply_to_tweet_id;\n            const status = (_b = queryParams.text) !== null && _b !== void 0 ? _b : '';\n            if (inReplyToId) {\n                postedTweets.push(await this.reply(status, inReplyToId, queryParams));\n            }\n            else {\n                postedTweets.push(await this.tweet(status, queryParams));\n            }\n        }\n        return postedTweets;\n    }\n    /**\n     * Allows a user or authenticated user ID to delete a Tweet\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/delete-tweets-id\n     */\n    deleteTweet(tweetId) {\n        return this.delete('tweets/:id', undefined, {\n            params: {\n                id: tweetId,\n            },\n        });\n    }\n    /* Bookmarks */\n    /**\n     * Causes the user ID of an authenticated user identified in the path parameter to Bookmark the target Tweet provided in the request body.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/bookmarks/api-reference/post-users-id-bookmarks\n     *\n     * OAuth2 scopes: `users.read` `tweet.read` `bookmark.write`\n     */\n    async bookmark(tweetId) {\n        const user = await this.getCurrentUserV2Object();\n        return this.post('users/:id/bookmarks', { tweet_id: tweetId }, { params: { id: user.data.id } });\n    }\n    /**\n     * Allows a user or authenticated user ID to remove a Bookmark of a Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/bookmarks/api-reference/delete-users-id-bookmarks-tweet_id\n     *\n     * OAuth2 scopes: `users.read` `tweet.read` `bookmark.write`\n     */\n    async deleteBookmark(tweetId) {\n        const user = await this.getCurrentUserV2Object();\n        return this.delete('users/:id/bookmarks/:tweet_id', undefined, { params: { id: user.data.id, tweet_id: tweetId } });\n    }\n    /* Users */\n    /**\n     * Allows a user ID to follow another user.\n     * If the target user does not have public Tweets, this endpoint will send a follow request.\n     * https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/post-users-source_user_id-following\n     *\n     * OAuth2 scope: `follows.write`\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    follow(loggedUserId, targetUserId) {\n        return this.post('users/:id/following', { target_user_id: targetUserId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Allows a user ID to unfollow another user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/delete-users-source_id-following\n     *\n     * OAuth2 scope: `follows.write`\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    unfollow(loggedUserId, targetUserId) {\n        return this.delete('users/:source_user_id/following/:target_user_id', undefined, {\n            params: { source_user_id: loggedUserId, target_user_id: targetUserId },\n        });\n    }\n    /**\n     * Causes the user (in the path) to block the target user.\n     * The user (in the path) must match the user context authorizing the request.\n     * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/post-users-user_id-blocking\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    block(loggedUserId, targetUserId) {\n        return this.post('users/:id/blocking', { target_user_id: targetUserId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Allows a user or authenticated user ID to unblock another user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/delete-users-user_id-blocking\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    unblock(loggedUserId, targetUserId) {\n        return this.delete('users/:source_user_id/blocking/:target_user_id', undefined, {\n            params: { source_user_id: loggedUserId, target_user_id: targetUserId },\n        });\n    }\n    /**\n     * Allows an authenticated user ID to mute the target user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/post-users-user_id-muting\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    mute(loggedUserId, targetUserId) {\n        return this.post('users/:id/muting', { target_user_id: targetUserId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Allows an authenticated user ID to unmute the target user.\n     * The request succeeds with no action when the user sends a request to a user they're not muting or have already unmuted.\n     * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/delete-users-user_id-muting\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    unmute(loggedUserId, targetUserId) {\n        return this.delete('users/:source_user_id/muting/:target_user_id', undefined, {\n            params: { source_user_id: loggedUserId, target_user_id: targetUserId },\n        });\n    }\n    /* Lists */\n    /**\n     * Creates a new list for the authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-lists\n     */\n    createList(options) {\n        return this.post('lists', options);\n    }\n    /**\n     * Updates the specified list. The authenticated user must own the list to be able to update it.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/put-lists-id\n     */\n    updateList(listId, options = {}) {\n        return this.put('lists/:id', options, { params: { id: listId } });\n    }\n    /**\n     * Deletes the specified list. The authenticated user must own the list to be able to destroy it.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-lists-id\n     */\n    removeList(listId) {\n        return this.delete('lists/:id', undefined, { params: { id: listId } });\n    }\n    /**\n     * Adds a member to a list.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-lists-id-members\n     */\n    addListMember(listId, userId) {\n        return this.post('lists/:id/members', { user_id: userId }, { params: { id: listId } });\n    }\n    /**\n     * Remember a member to a list.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-lists-id-members-user_id\n     */\n    removeListMember(listId, userId) {\n        return this.delete('lists/:id/members/:user_id', undefined, { params: { id: listId, user_id: userId } });\n    }\n    /**\n     * Subscribes the authenticated user to the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-users-id-followed-lists\n     */\n    subscribeToList(loggedUserId, listId) {\n        return this.post('users/:id/followed_lists', { list_id: listId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Unsubscribes the authenticated user to the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-users-id-followed-lists-list_id\n     */\n    unsubscribeOfList(loggedUserId, listId) {\n        return this.delete('users/:id/followed_lists/:list_id', undefined, { params: { id: loggedUserId, list_id: listId } });\n    }\n    /**\n     * Enables the authenticated user to pin a List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-users-id-pinned-lists\n     */\n    pinList(loggedUserId, listId) {\n        return this.post('users/:id/pinned_lists', { list_id: listId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Enables the authenticated user to unpin a List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-users-id-pinned-lists-list_id\n     */\n    unpinList(loggedUserId, listId) {\n        return this.delete('users/:id/pinned_lists/:list_id', undefined, { params: { id: loggedUserId, list_id: listId } });\n    }\n}\nexports.default = TwitterApiv2ReadWrite;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}