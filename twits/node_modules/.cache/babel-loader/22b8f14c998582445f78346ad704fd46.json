{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RequestParamHelpers = void 0;\n\nconst form_data_helper_1 = require(\"./form-data.helper\");\n\nconst oauth1_helper_1 = __importDefault(require(\"./oauth1.helper\"));\n/* Helpers functions that are specific to this class but do not depends on instance */\n\n\nclass RequestParamHelpers {\n  static formatQueryToString(query) {\n    const formattedQuery = {};\n\n    for (const prop in query) {\n      if (typeof query[prop] === 'string') {\n        formattedQuery[prop] = query[prop];\n      } else if (typeof query[prop] !== 'undefined') {\n        formattedQuery[prop] = String(query[prop]);\n      }\n    }\n\n    return formattedQuery;\n  }\n\n  static autoDetectBodyType(url) {\n    if (url.pathname.startsWith('/2/') || url.pathname.startsWith('/labs/2/')) {\n      // oauth2 takes url encoded\n      if (url.password.startsWith('/2/oauth2')) {\n        return 'url';\n      } // Twitter API v2 has JSON-encoded requests for everything else\n\n\n      return 'json';\n    }\n\n    if (url.hostname === 'upload.twitter.com') {\n      if (url.pathname === '/1.1/media/upload.json') {\n        return 'form-data';\n      } // json except for media/upload command, that is form-data.\n\n\n      return 'json';\n    }\n\n    const endpoint = url.pathname.split('/1.1/', 2)[1];\n\n    if (this.JSON_1_1_ENDPOINTS.has(endpoint)) {\n      return 'json';\n    }\n\n    return 'url';\n  }\n\n  static addQueryParamsToUrl(url, query) {\n    const queryEntries = Object.entries(query);\n\n    if (queryEntries.length) {\n      let search = '';\n\n      for (const [key, value] of queryEntries) {\n        search += (search.length ? '&' : '?') + `${oauth1_helper_1.default.percentEncode(key)}=${oauth1_helper_1.default.percentEncode(value)}`;\n      }\n\n      url.search = search;\n    }\n  }\n\n  static constructBodyParams(body, headers, mode) {\n    if (body instanceof Buffer) {\n      return body;\n    }\n\n    if (mode === 'json') {\n      headers['content-type'] = 'application/json;charset=UTF-8';\n      return JSON.stringify(body);\n    } else if (mode === 'url') {\n      headers['content-type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\n\n      if (Object.keys(body).length) {\n        return new URLSearchParams(body).toString().replace(/\\*/g, '%2A'); // URLSearchParams doesnt encode '*', but Twitter wants it encoded.\n      }\n\n      return '';\n    } else if (mode === 'raw') {\n      throw new Error('You can only use raw body mode with Buffers. To give a string, use Buffer.from(str).');\n    } else {\n      const form = new form_data_helper_1.FormDataHelper();\n\n      for (const parameter in body) {\n        form.append(parameter, body[parameter]);\n      }\n\n      const formHeaders = form.getHeaders();\n      headers['content-type'] = formHeaders['content-type'];\n      return form.getBuffer();\n    }\n  }\n\n  static setBodyLengthHeader(options, body) {\n    var _a;\n\n    options.headers = (_a = options.headers) !== null && _a !== void 0 ? _a : {};\n\n    if (typeof body === 'string') {\n      options.headers['content-length'] = Buffer.byteLength(body);\n    } else {\n      options.headers['content-length'] = body.length;\n    }\n  }\n\n  static isOAuthSerializable(item) {\n    return !(item instanceof Buffer);\n  }\n\n  static mergeQueryAndBodyForOAuth(query, body) {\n    const parameters = {};\n\n    for (const prop in query) {\n      parameters[prop] = query[prop];\n    }\n\n    if (this.isOAuthSerializable(body)) {\n      for (const prop in body) {\n        const bodyProp = body[prop];\n\n        if (this.isOAuthSerializable(bodyProp)) {\n          parameters[prop] = typeof bodyProp === 'object' && bodyProp !== null && 'toString' in bodyProp ? bodyProp.toString() : bodyProp;\n        }\n      }\n    }\n\n    return parameters;\n  }\n\n  static moveUrlQueryParamsIntoObject(url, query) {\n    for (const [param, value] of url.searchParams) {\n      query[param] = value;\n    } // Remove the query string\n\n\n    url.search = '';\n    return url;\n  }\n  /**\n   * Replace URL parameters available in pathname, like `:id`, with data given in `parameters`:\n   * `https://twitter.com/:id.json` + `{ id: '20' }` => `https://twitter.com/20.json`\n   */\n\n\n  static applyRequestParametersToUrl(url, parameters) {\n    url.pathname = url.pathname.replace(/:([A-Z_-]+)/ig, (fullMatch, paramName) => {\n      if (parameters[paramName] !== undefined) {\n        return String(parameters[paramName]);\n      }\n\n      return fullMatch;\n    });\n    return url;\n  }\n\n}\n\nexports.RequestParamHelpers = RequestParamHelpers;\nRequestParamHelpers.JSON_1_1_ENDPOINTS = new Set(['direct_messages/events/new.json', 'direct_messages/welcome_messages/new.json', 'direct_messages/welcome_messages/rules/new.json', 'media/metadata/create.json', 'collections/entries/curate.json']);\nexports.default = RequestParamHelpers;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","RequestParamHelpers","form_data_helper_1","require","oauth1_helper_1","formatQueryToString","query","formattedQuery","prop","String","autoDetectBodyType","url","pathname","startsWith","password","hostname","endpoint","split","JSON_1_1_ENDPOINTS","has","addQueryParamsToUrl","queryEntries","entries","length","search","key","default","percentEncode","constructBodyParams","body","headers","mode","Buffer","JSON","stringify","keys","URLSearchParams","toString","replace","Error","form","FormDataHelper","parameter","append","formHeaders","getHeaders","getBuffer","setBodyLengthHeader","options","_a","byteLength","isOAuthSerializable","item","mergeQueryAndBodyForOAuth","parameters","bodyProp","moveUrlQueryParamsIntoObject","param","searchParams","applyRequestParametersToUrl","fullMatch","paramName","undefined","Set"],"sources":["/Users/user/Sites/twits_app/twits/node_modules/twitter-api-v2/dist/client-mixins/request-param.helper.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RequestParamHelpers = void 0;\nconst form_data_helper_1 = require(\"./form-data.helper\");\nconst oauth1_helper_1 = __importDefault(require(\"./oauth1.helper\"));\n/* Helpers functions that are specific to this class but do not depends on instance */\nclass RequestParamHelpers {\n    static formatQueryToString(query) {\n        const formattedQuery = {};\n        for (const prop in query) {\n            if (typeof query[prop] === 'string') {\n                formattedQuery[prop] = query[prop];\n            }\n            else if (typeof query[prop] !== 'undefined') {\n                formattedQuery[prop] = String(query[prop]);\n            }\n        }\n        return formattedQuery;\n    }\n    static autoDetectBodyType(url) {\n        if (url.pathname.startsWith('/2/') || url.pathname.startsWith('/labs/2/')) {\n            // oauth2 takes url encoded\n            if (url.password.startsWith('/2/oauth2')) {\n                return 'url';\n            }\n            // Twitter API v2 has JSON-encoded requests for everything else\n            return 'json';\n        }\n        if (url.hostname === 'upload.twitter.com') {\n            if (url.pathname === '/1.1/media/upload.json') {\n                return 'form-data';\n            }\n            // json except for media/upload command, that is form-data.\n            return 'json';\n        }\n        const endpoint = url.pathname.split('/1.1/', 2)[1];\n        if (this.JSON_1_1_ENDPOINTS.has(endpoint)) {\n            return 'json';\n        }\n        return 'url';\n    }\n    static addQueryParamsToUrl(url, query) {\n        const queryEntries = Object.entries(query);\n        if (queryEntries.length) {\n            let search = '';\n            for (const [key, value] of queryEntries) {\n                search += (search.length ? '&' : '?') + `${oauth1_helper_1.default.percentEncode(key)}=${oauth1_helper_1.default.percentEncode(value)}`;\n            }\n            url.search = search;\n        }\n    }\n    static constructBodyParams(body, headers, mode) {\n        if (body instanceof Buffer) {\n            return body;\n        }\n        if (mode === 'json') {\n            headers['content-type'] = 'application/json;charset=UTF-8';\n            return JSON.stringify(body);\n        }\n        else if (mode === 'url') {\n            headers['content-type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\n            if (Object.keys(body).length) {\n                return new URLSearchParams(body)\n                    .toString()\n                    .replace(/\\*/g, '%2A'); // URLSearchParams doesnt encode '*', but Twitter wants it encoded.\n            }\n            return '';\n        }\n        else if (mode === 'raw') {\n            throw new Error('You can only use raw body mode with Buffers. To give a string, use Buffer.from(str).');\n        }\n        else {\n            const form = new form_data_helper_1.FormDataHelper();\n            for (const parameter in body) {\n                form.append(parameter, body[parameter]);\n            }\n            const formHeaders = form.getHeaders();\n            headers['content-type'] = formHeaders['content-type'];\n            return form.getBuffer();\n        }\n    }\n    static setBodyLengthHeader(options, body) {\n        var _a;\n        options.headers = (_a = options.headers) !== null && _a !== void 0 ? _a : {};\n        if (typeof body === 'string') {\n            options.headers['content-length'] = Buffer.byteLength(body);\n        }\n        else {\n            options.headers['content-length'] = body.length;\n        }\n    }\n    static isOAuthSerializable(item) {\n        return !(item instanceof Buffer);\n    }\n    static mergeQueryAndBodyForOAuth(query, body) {\n        const parameters = {};\n        for (const prop in query) {\n            parameters[prop] = query[prop];\n        }\n        if (this.isOAuthSerializable(body)) {\n            for (const prop in body) {\n                const bodyProp = body[prop];\n                if (this.isOAuthSerializable(bodyProp)) {\n                    parameters[prop] = typeof bodyProp === 'object' && bodyProp !== null && 'toString' in bodyProp\n                        ? bodyProp.toString()\n                        : bodyProp;\n                }\n            }\n        }\n        return parameters;\n    }\n    static moveUrlQueryParamsIntoObject(url, query) {\n        for (const [param, value] of url.searchParams) {\n            query[param] = value;\n        }\n        // Remove the query string\n        url.search = '';\n        return url;\n    }\n    /**\n     * Replace URL parameters available in pathname, like `:id`, with data given in `parameters`:\n     * `https://twitter.com/:id.json` + `{ id: '20' }` => `https://twitter.com/20.json`\n     */\n    static applyRequestParametersToUrl(url, parameters) {\n        url.pathname = url.pathname.replace(/:([A-Z_-]+)/ig, (fullMatch, paramName) => {\n            if (parameters[paramName] !== undefined) {\n                return String(parameters[paramName]);\n            }\n            return fullMatch;\n        });\n        return url;\n    }\n}\nexports.RequestParamHelpers = RequestParamHelpers;\nRequestParamHelpers.JSON_1_1_ENDPOINTS = new Set([\n    'direct_messages/events/new.json',\n    'direct_messages/welcome_messages/new.json',\n    'direct_messages/welcome_messages/rules/new.json',\n    'media/metadata/create.json',\n    'collections/entries/curate.json',\n]);\nexports.default = RequestParamHelpers;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}