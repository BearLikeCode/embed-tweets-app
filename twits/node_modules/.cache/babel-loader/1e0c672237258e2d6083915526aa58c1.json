{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TweetStreamEventCombiner = void 0;\n\nconst events_1 = require(\"events\");\n\nconst types_1 = require(\"../types\");\n\nclass TweetStreamEventCombiner extends events_1.EventEmitter {\n  constructor(stream) {\n    super();\n    this.stream = stream;\n    this.stack = [];\n    this.onStreamData = this.onStreamData.bind(this);\n    this.onStreamError = this.onStreamError.bind(this);\n    this.onceNewEvent = this.once.bind(this, 'event'); // Init events from stream\n\n    stream.on(types_1.ETwitterStreamEvent.Data, this.onStreamData); // Ignore reconnect errors: Don't close event combiner until connection error/closed\n\n    stream.on(types_1.ETwitterStreamEvent.ConnectionError, this.onStreamError);\n    stream.on(types_1.ETwitterStreamEvent.TweetParseError, this.onStreamError);\n    stream.on(types_1.ETwitterStreamEvent.ConnectionClosed, this.onStreamError);\n  }\n  /** Returns a new `Promise` that will `resolve` on next event (`data` or any sort of error). */\n\n\n  nextEvent() {\n    return new Promise(this.onceNewEvent);\n  }\n  /** Returns `true` if there's something in the stack. */\n\n\n  hasStack() {\n    return this.stack.length > 0;\n  }\n  /** Returns stacked data events, and clean the stack. */\n\n\n  popStack() {\n    const stack = this.stack;\n    this.stack = [];\n    return stack;\n  }\n  /** Cleanup all the listeners attached on stream. */\n\n\n  destroy() {\n    this.removeAllListeners();\n    this.stream.off(types_1.ETwitterStreamEvent.Data, this.onStreamData);\n    this.stream.off(types_1.ETwitterStreamEvent.ConnectionError, this.onStreamError);\n    this.stream.off(types_1.ETwitterStreamEvent.TweetParseError, this.onStreamError);\n    this.stream.off(types_1.ETwitterStreamEvent.ConnectionClosed, this.onStreamError);\n  }\n\n  emitEvent(type, payload) {\n    this.emit('event', {\n      type,\n      payload\n    });\n  }\n\n  onStreamError(payload) {\n    this.emitEvent('error', payload);\n  }\n\n  onStreamData(payload) {\n    this.stack.push(payload);\n    this.emitEvent('data', payload);\n  }\n\n}\n\nexports.TweetStreamEventCombiner = TweetStreamEventCombiner;\nexports.default = TweetStreamEventCombiner;","map":{"version":3,"names":["Object","defineProperty","exports","value","TweetStreamEventCombiner","events_1","require","types_1","EventEmitter","constructor","stream","stack","onStreamData","bind","onStreamError","onceNewEvent","once","on","ETwitterStreamEvent","Data","ConnectionError","TweetParseError","ConnectionClosed","nextEvent","Promise","hasStack","length","popStack","destroy","removeAllListeners","off","emitEvent","type","payload","emit","push","default"],"sources":["/Users/user/Sites/twits_app/twits/node_modules/twitter-api-v2/dist/stream/TweetStreamEventCombiner.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TweetStreamEventCombiner = void 0;\nconst events_1 = require(\"events\");\nconst types_1 = require(\"../types\");\nclass TweetStreamEventCombiner extends events_1.EventEmitter {\n    constructor(stream) {\n        super();\n        this.stream = stream;\n        this.stack = [];\n        this.onStreamData = this.onStreamData.bind(this);\n        this.onStreamError = this.onStreamError.bind(this);\n        this.onceNewEvent = this.once.bind(this, 'event');\n        // Init events from stream\n        stream.on(types_1.ETwitterStreamEvent.Data, this.onStreamData);\n        // Ignore reconnect errors: Don't close event combiner until connection error/closed\n        stream.on(types_1.ETwitterStreamEvent.ConnectionError, this.onStreamError);\n        stream.on(types_1.ETwitterStreamEvent.TweetParseError, this.onStreamError);\n        stream.on(types_1.ETwitterStreamEvent.ConnectionClosed, this.onStreamError);\n    }\n    /** Returns a new `Promise` that will `resolve` on next event (`data` or any sort of error). */\n    nextEvent() {\n        return new Promise(this.onceNewEvent);\n    }\n    /** Returns `true` if there's something in the stack. */\n    hasStack() {\n        return this.stack.length > 0;\n    }\n    /** Returns stacked data events, and clean the stack. */\n    popStack() {\n        const stack = this.stack;\n        this.stack = [];\n        return stack;\n    }\n    /** Cleanup all the listeners attached on stream. */\n    destroy() {\n        this.removeAllListeners();\n        this.stream.off(types_1.ETwitterStreamEvent.Data, this.onStreamData);\n        this.stream.off(types_1.ETwitterStreamEvent.ConnectionError, this.onStreamError);\n        this.stream.off(types_1.ETwitterStreamEvent.TweetParseError, this.onStreamError);\n        this.stream.off(types_1.ETwitterStreamEvent.ConnectionClosed, this.onStreamError);\n    }\n    emitEvent(type, payload) {\n        this.emit('event', { type, payload });\n    }\n    onStreamError(payload) {\n        this.emitEvent('error', payload);\n    }\n    onStreamData(payload) {\n        this.stack.push(payload);\n        this.emitEvent('data', payload);\n    }\n}\nexports.TweetStreamEventCombiner = TweetStreamEventCombiner;\nexports.default = TweetStreamEventCombiner;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,wBAAR,GAAmC,KAAK,CAAxC;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAMF,wBAAN,SAAuCC,QAAQ,CAACG,YAAhD,CAA6D;EACzDC,WAAW,CAACC,MAAD,EAAS;IAChB;IACA,KAAKA,MAAL,GAAcA,MAAd;IACA,KAAKC,KAAL,GAAa,EAAb;IACA,KAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;IACA,KAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBD,IAAnB,CAAwB,IAAxB,CAArB;IACA,KAAKE,YAAL,GAAoB,KAAKC,IAAL,CAAUH,IAAV,CAAe,IAAf,EAAqB,OAArB,CAApB,CANgB,CAOhB;;IACAH,MAAM,CAACO,EAAP,CAAUV,OAAO,CAACW,mBAAR,CAA4BC,IAAtC,EAA4C,KAAKP,YAAjD,EARgB,CAShB;;IACAF,MAAM,CAACO,EAAP,CAAUV,OAAO,CAACW,mBAAR,CAA4BE,eAAtC,EAAuD,KAAKN,aAA5D;IACAJ,MAAM,CAACO,EAAP,CAAUV,OAAO,CAACW,mBAAR,CAA4BG,eAAtC,EAAuD,KAAKP,aAA5D;IACAJ,MAAM,CAACO,EAAP,CAAUV,OAAO,CAACW,mBAAR,CAA4BI,gBAAtC,EAAwD,KAAKR,aAA7D;EACH;EACD;;;EACAS,SAAS,GAAG;IACR,OAAO,IAAIC,OAAJ,CAAY,KAAKT,YAAjB,CAAP;EACH;EACD;;;EACAU,QAAQ,GAAG;IACP,OAAO,KAAKd,KAAL,CAAWe,MAAX,GAAoB,CAA3B;EACH;EACD;;;EACAC,QAAQ,GAAG;IACP,MAAMhB,KAAK,GAAG,KAAKA,KAAnB;IACA,KAAKA,KAAL,GAAa,EAAb;IACA,OAAOA,KAAP;EACH;EACD;;;EACAiB,OAAO,GAAG;IACN,KAAKC,kBAAL;IACA,KAAKnB,MAAL,CAAYoB,GAAZ,CAAgBvB,OAAO,CAACW,mBAAR,CAA4BC,IAA5C,EAAkD,KAAKP,YAAvD;IACA,KAAKF,MAAL,CAAYoB,GAAZ,CAAgBvB,OAAO,CAACW,mBAAR,CAA4BE,eAA5C,EAA6D,KAAKN,aAAlE;IACA,KAAKJ,MAAL,CAAYoB,GAAZ,CAAgBvB,OAAO,CAACW,mBAAR,CAA4BG,eAA5C,EAA6D,KAAKP,aAAlE;IACA,KAAKJ,MAAL,CAAYoB,GAAZ,CAAgBvB,OAAO,CAACW,mBAAR,CAA4BI,gBAA5C,EAA8D,KAAKR,aAAnE;EACH;;EACDiB,SAAS,CAACC,IAAD,EAAOC,OAAP,EAAgB;IACrB,KAAKC,IAAL,CAAU,OAAV,EAAmB;MAAEF,IAAF;MAAQC;IAAR,CAAnB;EACH;;EACDnB,aAAa,CAACmB,OAAD,EAAU;IACnB,KAAKF,SAAL,CAAe,OAAf,EAAwBE,OAAxB;EACH;;EACDrB,YAAY,CAACqB,OAAD,EAAU;IAClB,KAAKtB,KAAL,CAAWwB,IAAX,CAAgBF,OAAhB;IACA,KAAKF,SAAL,CAAe,MAAf,EAAuBE,OAAvB;EACH;;AA9CwD;;AAgD7D/B,OAAO,CAACE,wBAAR,GAAmCA,wBAAnC;AACAF,OAAO,CAACkC,OAAR,GAAkBhC,wBAAlB"},"metadata":{},"sourceType":"script"}