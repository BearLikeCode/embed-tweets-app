{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EStreamParserEvent = void 0;\n\nconst events_1 = require(\"events\");\n\nclass TweetStreamParser extends events_1.EventEmitter {\n  constructor() {\n    super(...arguments);\n    this.currentMessage = '';\n  } // Code partially belongs to twitter-stream-api for this\n  // https://github.com/trygve-lie/twitter-stream-api/blob/master/lib/parser.js\n\n\n  push(chunk) {\n    this.currentMessage += chunk;\n    chunk = this.currentMessage;\n    const size = chunk.length;\n    let start = 0;\n    let offset = 0;\n\n    while (offset < size) {\n      // Take [offset, offset+1] inside a new string\n      if (chunk.slice(offset, offset + 2) === '\\r\\n') {\n        // If chunk contains \\r\\n after current offset,\n        // parse [start, ..., offset] as a tweet\n        const piece = chunk.slice(start, offset);\n        start = offset += 2; // If empty object\n\n        if (!piece.length) {\n          continue;\n        }\n\n        try {\n          const payload = JSON.parse(piece);\n\n          if (payload) {\n            this.emit(EStreamParserEvent.ParsedData, payload);\n            continue;\n          }\n        } catch (error) {\n          this.emit(EStreamParserEvent.ParseError, error);\n        }\n      }\n\n      offset++;\n    }\n\n    this.currentMessage = chunk.slice(start, size);\n  }\n  /** Reset the currently stored message (f.e. on connection reset) */\n\n\n  reset() {\n    this.currentMessage = '';\n  }\n\n}\n\nexports.default = TweetStreamParser;\nvar EStreamParserEvent;\n\n(function (EStreamParserEvent) {\n  EStreamParserEvent[\"ParsedData\"] = \"parsed data\";\n  EStreamParserEvent[\"ParseError\"] = \"parse error\";\n})(EStreamParserEvent = exports.EStreamParserEvent || (exports.EStreamParserEvent = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","EStreamParserEvent","events_1","require","TweetStreamParser","EventEmitter","constructor","arguments","currentMessage","push","chunk","size","length","start","offset","slice","piece","payload","JSON","parse","emit","ParsedData","error","ParseError","reset","default"],"sources":["/Users/user/Sites/twits_app/twits/node_modules/twitter-api-v2/dist/stream/TweetStreamParser.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EStreamParserEvent = void 0;\nconst events_1 = require(\"events\");\nclass TweetStreamParser extends events_1.EventEmitter {\n    constructor() {\n        super(...arguments);\n        this.currentMessage = '';\n    }\n    // Code partially belongs to twitter-stream-api for this\n    // https://github.com/trygve-lie/twitter-stream-api/blob/master/lib/parser.js\n    push(chunk) {\n        this.currentMessage += chunk;\n        chunk = this.currentMessage;\n        const size = chunk.length;\n        let start = 0;\n        let offset = 0;\n        while (offset < size) {\n            // Take [offset, offset+1] inside a new string\n            if (chunk.slice(offset, offset + 2) === '\\r\\n') {\n                // If chunk contains \\r\\n after current offset,\n                // parse [start, ..., offset] as a tweet\n                const piece = chunk.slice(start, offset);\n                start = offset += 2;\n                // If empty object\n                if (!piece.length) {\n                    continue;\n                }\n                try {\n                    const payload = JSON.parse(piece);\n                    if (payload) {\n                        this.emit(EStreamParserEvent.ParsedData, payload);\n                        continue;\n                    }\n                }\n                catch (error) {\n                    this.emit(EStreamParserEvent.ParseError, error);\n                }\n            }\n            offset++;\n        }\n        this.currentMessage = chunk.slice(start, size);\n    }\n    /** Reset the currently stored message (f.e. on connection reset) */\n    reset() {\n        this.currentMessage = '';\n    }\n}\nexports.default = TweetStreamParser;\nvar EStreamParserEvent;\n(function (EStreamParserEvent) {\n    EStreamParserEvent[\"ParsedData\"] = \"parsed data\";\n    EStreamParserEvent[\"ParseError\"] = \"parse error\";\n})(EStreamParserEvent = exports.EStreamParserEvent || (exports.EStreamParserEvent = {}));\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,kBAAR,GAA6B,KAAK,CAAlC;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAMC,iBAAN,SAAgCF,QAAQ,CAACG,YAAzC,CAAsD;EAClDC,WAAW,GAAG;IACV,MAAM,GAAGC,SAAT;IACA,KAAKC,cAAL,GAAsB,EAAtB;EACH,CAJiD,CAKlD;EACA;;;EACAC,IAAI,CAACC,KAAD,EAAQ;IACR,KAAKF,cAAL,IAAuBE,KAAvB;IACAA,KAAK,GAAG,KAAKF,cAAb;IACA,MAAMG,IAAI,GAAGD,KAAK,CAACE,MAAnB;IACA,IAAIC,KAAK,GAAG,CAAZ;IACA,IAAIC,MAAM,GAAG,CAAb;;IACA,OAAOA,MAAM,GAAGH,IAAhB,EAAsB;MAClB;MACA,IAAID,KAAK,CAACK,KAAN,CAAYD,MAAZ,EAAoBA,MAAM,GAAG,CAA7B,MAAoC,MAAxC,EAAgD;QAC5C;QACA;QACA,MAAME,KAAK,GAAGN,KAAK,CAACK,KAAN,CAAYF,KAAZ,EAAmBC,MAAnB,CAAd;QACAD,KAAK,GAAGC,MAAM,IAAI,CAAlB,CAJ4C,CAK5C;;QACA,IAAI,CAACE,KAAK,CAACJ,MAAX,EAAmB;UACf;QACH;;QACD,IAAI;UACA,MAAMK,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAX,CAAhB;;UACA,IAAIC,OAAJ,EAAa;YACT,KAAKG,IAAL,CAAUnB,kBAAkB,CAACoB,UAA7B,EAAyCJ,OAAzC;YACA;UACH;QACJ,CAND,CAOA,OAAOK,KAAP,EAAc;UACV,KAAKF,IAAL,CAAUnB,kBAAkB,CAACsB,UAA7B,EAAyCD,KAAzC;QACH;MACJ;;MACDR,MAAM;IACT;;IACD,KAAKN,cAAL,GAAsBE,KAAK,CAACK,KAAN,CAAYF,KAAZ,EAAmBF,IAAnB,CAAtB;EACH;EACD;;;EACAa,KAAK,GAAG;IACJ,KAAKhB,cAAL,GAAsB,EAAtB;EACH;;AA1CiD;;AA4CtDT,OAAO,CAAC0B,OAAR,GAAkBrB,iBAAlB;AACA,IAAIH,kBAAJ;;AACA,CAAC,UAAUA,kBAAV,EAA8B;EAC3BA,kBAAkB,CAAC,YAAD,CAAlB,GAAmC,aAAnC;EACAA,kBAAkB,CAAC,YAAD,CAAlB,GAAmC,aAAnC;AACH,CAHD,EAGGA,kBAAkB,GAAGF,OAAO,CAACE,kBAAR,KAA+BF,OAAO,CAACE,kBAAR,GAA6B,EAA5D,CAHxB"},"metadata":{},"sourceType":"script"}