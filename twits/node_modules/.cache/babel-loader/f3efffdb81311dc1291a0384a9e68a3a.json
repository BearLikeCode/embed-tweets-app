{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst request_maker_mixin_1 = require(\"./client-mixins/request-maker.mixin\");\n\nconst helpers_1 = require(\"./helpers\");\n\nconst globals_1 = require(\"./globals\");\n/**\n * Base class for Twitter instances\n */\n\n\nclass TwitterApiBase {\n  constructor(token) {\n    let settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this._currentUser = null;\n    this._currentUserV2 = null;\n\n    if (token instanceof TwitterApiBase) {\n      this._requestMaker = token._requestMaker;\n    } else {\n      this._requestMaker = new request_maker_mixin_1.ClientRequestMaker(settings);\n\n      this._requestMaker.initializeToken(token);\n    }\n  }\n  /* Prefix/Token handling */\n\n\n  setPrefix(prefix) {\n    this._prefix = prefix;\n  }\n\n  cloneWithPrefix(prefix) {\n    const clone = this.constructor(this);\n    clone.setPrefix(prefix);\n    return clone;\n  }\n\n  getActiveTokens() {\n    return this._requestMaker.getActiveTokens();\n  }\n  /* Rate limit cache / Plugins */\n\n\n  getPlugins() {\n    return this._requestMaker.getPlugins();\n  }\n\n  getPluginOfType(type) {\n    return this.getPlugins().find(plugin => plugin instanceof type);\n  }\n  /**\n   * @deprecated - Migrate to plugin `@twitter-api-v2/plugin-rate-limit`\n   *\n   * Tells if you hit the Twitter rate limit for {endpoint}.\n   * (local data only, this should not ask anything to Twitter)\n   */\n\n\n  hasHitRateLimit(endpoint) {\n    var _a;\n\n    if (this.isRateLimitStatusObsolete(endpoint)) {\n      return false;\n    }\n\n    return ((_a = this.getLastRateLimitStatus(endpoint)) === null || _a === void 0 ? void 0 : _a.remaining) === 0;\n  }\n  /**\n   * @deprecated - Migrate to plugin `@twitter-api-v2/plugin-rate-limit`\n   *\n   * Tells if you hit the returned Twitter rate limit for {endpoint} has expired.\n   * If client has no saved rate limit data for {endpoint}, this will gives you `true`.\n   */\n\n\n  isRateLimitStatusObsolete(endpoint) {\n    const rateLimit = this.getLastRateLimitStatus(endpoint);\n\n    if (rateLimit === undefined) {\n      return true;\n    } // Timestamps are exprimed in seconds, JS works with ms\n\n\n    return rateLimit.reset * 1000 < Date.now();\n  }\n  /**\n   * @deprecated - Migrate to plugin `@twitter-api-v2/plugin-rate-limit`\n   *\n   * Get the last obtained Twitter rate limit information for {endpoint}.\n   * (local data only, this should not ask anything to Twitter)\n   */\n\n\n  getLastRateLimitStatus(endpoint) {\n    const endpointWithPrefix = endpoint.match(/^https?:\\/\\//) ? endpoint : this._prefix + endpoint;\n    return this._requestMaker.getRateLimits()[endpointWithPrefix];\n  }\n  /* Current user cache */\n\n  /** Get cached current user. */\n\n\n  getCurrentUserObject() {\n    let forceFetch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (!forceFetch && this._currentUser) {\n      if (this._currentUser.value) {\n        return Promise.resolve(this._currentUser.value);\n      }\n\n      return this._currentUser.promise;\n    }\n\n    this._currentUser = (0, helpers_1.sharedPromise)(() => this.get('account/verify_credentials.json', {\n      tweet_mode: 'extended'\n    }, {\n      prefix: globals_1.API_V1_1_PREFIX\n    }));\n    return this._currentUser.promise;\n  }\n  /**\n   * Get cached current user from v2 API.\n   * This can only be the slimest available `UserV2` object, with only `id`, `name` and `username` properties defined.\n   *\n   * To get a customized `UserV2Result`, use `.v2.me()`\n   *\n   * OAuth2 scopes: `tweet.read` & `users.read`\n   */\n\n\n  getCurrentUserV2Object() {\n    let forceFetch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (!forceFetch && this._currentUserV2) {\n      if (this._currentUserV2.value) {\n        return Promise.resolve(this._currentUserV2.value);\n      }\n\n      return this._currentUserV2.promise;\n    }\n\n    this._currentUserV2 = (0, helpers_1.sharedPromise)(() => this.get('users/me', undefined, {\n      prefix: globals_1.API_V2_PREFIX\n    }));\n    return this._currentUserV2.promise;\n  }\n\n  async get(url) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let {\n      fullResponse,\n      prefix = this._prefix,\n      ...rest\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (prefix) url = prefix + url;\n    const resp = await this._requestMaker.send({\n      url,\n      method: 'GET',\n      query,\n      ...rest\n    });\n    return fullResponse ? resp : resp.data;\n  }\n\n  async delete(url) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let {\n      fullResponse,\n      prefix = this._prefix,\n      ...rest\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (prefix) url = prefix + url;\n    const resp = await this._requestMaker.send({\n      url,\n      method: 'DELETE',\n      query,\n      ...rest\n    });\n    return fullResponse ? resp : resp.data;\n  }\n\n  async post(url, body) {\n    let {\n      fullResponse,\n      prefix = this._prefix,\n      ...rest\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (prefix) url = prefix + url;\n    const resp = await this._requestMaker.send({\n      url,\n      method: 'POST',\n      body,\n      ...rest\n    });\n    return fullResponse ? resp : resp.data;\n  }\n\n  async put(url, body) {\n    let {\n      fullResponse,\n      prefix = this._prefix,\n      ...rest\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (prefix) url = prefix + url;\n    const resp = await this._requestMaker.send({\n      url,\n      method: 'PUT',\n      body,\n      ...rest\n    });\n    return fullResponse ? resp : resp.data;\n  }\n\n  async patch(url, body) {\n    let {\n      fullResponse,\n      prefix = this._prefix,\n      ...rest\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (prefix) url = prefix + url;\n    const resp = await this._requestMaker.send({\n      url,\n      method: 'PATCH',\n      body,\n      ...rest\n    });\n    return fullResponse ? resp : resp.data;\n  }\n\n  getStream(url, query) {\n    let {\n      prefix = this._prefix,\n      ...rest\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this._requestMaker.sendStream({\n      url: prefix ? prefix + url : url,\n      method: 'GET',\n      query,\n      ...rest\n    });\n  }\n\n  postStream(url, body) {\n    let {\n      prefix = this._prefix,\n      ...rest\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this._requestMaker.sendStream({\n      url: prefix ? prefix + url : url,\n      method: 'POST',\n      body,\n      ...rest\n    });\n  }\n\n}\n\nexports.default = TwitterApiBase;","map":{"version":3,"names":["Object","defineProperty","exports","value","request_maker_mixin_1","require","helpers_1","globals_1","TwitterApiBase","constructor","token","settings","_currentUser","_currentUserV2","_requestMaker","ClientRequestMaker","initializeToken","setPrefix","prefix","_prefix","cloneWithPrefix","clone","getActiveTokens","getPlugins","getPluginOfType","type","find","plugin","hasHitRateLimit","endpoint","_a","isRateLimitStatusObsolete","getLastRateLimitStatus","remaining","rateLimit","undefined","reset","Date","now","endpointWithPrefix","match","getRateLimits","getCurrentUserObject","forceFetch","Promise","resolve","promise","sharedPromise","get","tweet_mode","API_V1_1_PREFIX","getCurrentUserV2Object","API_V2_PREFIX","url","query","fullResponse","rest","resp","send","method","data","delete","post","body","put","patch","getStream","sendStream","postStream","default"],"sources":["/Users/user/Sites/twits_app/twits/node_modules/twitter-api-v2/dist/client.base.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst request_maker_mixin_1 = require(\"./client-mixins/request-maker.mixin\");\nconst helpers_1 = require(\"./helpers\");\nconst globals_1 = require(\"./globals\");\n/**\n * Base class for Twitter instances\n */\nclass TwitterApiBase {\n    constructor(token, settings = {}) {\n        this._currentUser = null;\n        this._currentUserV2 = null;\n        if (token instanceof TwitterApiBase) {\n            this._requestMaker = token._requestMaker;\n        }\n        else {\n            this._requestMaker = new request_maker_mixin_1.ClientRequestMaker(settings);\n            this._requestMaker.initializeToken(token);\n        }\n    }\n    /* Prefix/Token handling */\n    setPrefix(prefix) {\n        this._prefix = prefix;\n    }\n    cloneWithPrefix(prefix) {\n        const clone = this.constructor(this);\n        clone.setPrefix(prefix);\n        return clone;\n    }\n    getActiveTokens() {\n        return this._requestMaker.getActiveTokens();\n    }\n    /* Rate limit cache / Plugins */\n    getPlugins() {\n        return this._requestMaker.getPlugins();\n    }\n    getPluginOfType(type) {\n        return this.getPlugins().find(plugin => plugin instanceof type);\n    }\n    /**\n     * @deprecated - Migrate to plugin `@twitter-api-v2/plugin-rate-limit`\n     *\n     * Tells if you hit the Twitter rate limit for {endpoint}.\n     * (local data only, this should not ask anything to Twitter)\n     */\n    hasHitRateLimit(endpoint) {\n        var _a;\n        if (this.isRateLimitStatusObsolete(endpoint)) {\n            return false;\n        }\n        return ((_a = this.getLastRateLimitStatus(endpoint)) === null || _a === void 0 ? void 0 : _a.remaining) === 0;\n    }\n    /**\n     * @deprecated - Migrate to plugin `@twitter-api-v2/plugin-rate-limit`\n     *\n     * Tells if you hit the returned Twitter rate limit for {endpoint} has expired.\n     * If client has no saved rate limit data for {endpoint}, this will gives you `true`.\n     */\n    isRateLimitStatusObsolete(endpoint) {\n        const rateLimit = this.getLastRateLimitStatus(endpoint);\n        if (rateLimit === undefined) {\n            return true;\n        }\n        // Timestamps are exprimed in seconds, JS works with ms\n        return (rateLimit.reset * 1000) < Date.now();\n    }\n    /**\n     * @deprecated - Migrate to plugin `@twitter-api-v2/plugin-rate-limit`\n     *\n     * Get the last obtained Twitter rate limit information for {endpoint}.\n     * (local data only, this should not ask anything to Twitter)\n     */\n    getLastRateLimitStatus(endpoint) {\n        const endpointWithPrefix = endpoint.match(/^https?:\\/\\//) ? endpoint : (this._prefix + endpoint);\n        return this._requestMaker.getRateLimits()[endpointWithPrefix];\n    }\n    /* Current user cache */\n    /** Get cached current user. */\n    getCurrentUserObject(forceFetch = false) {\n        if (!forceFetch && this._currentUser) {\n            if (this._currentUser.value) {\n                return Promise.resolve(this._currentUser.value);\n            }\n            return this._currentUser.promise;\n        }\n        this._currentUser = (0, helpers_1.sharedPromise)(() => this.get('account/verify_credentials.json', { tweet_mode: 'extended' }, { prefix: globals_1.API_V1_1_PREFIX }));\n        return this._currentUser.promise;\n    }\n    /**\n     * Get cached current user from v2 API.\n     * This can only be the slimest available `UserV2` object, with only `id`, `name` and `username` properties defined.\n     *\n     * To get a customized `UserV2Result`, use `.v2.me()`\n     *\n     * OAuth2 scopes: `tweet.read` & `users.read`\n     */\n    getCurrentUserV2Object(forceFetch = false) {\n        if (!forceFetch && this._currentUserV2) {\n            if (this._currentUserV2.value) {\n                return Promise.resolve(this._currentUserV2.value);\n            }\n            return this._currentUserV2.promise;\n        }\n        this._currentUserV2 = (0, helpers_1.sharedPromise)(() => this.get('users/me', undefined, { prefix: globals_1.API_V2_PREFIX }));\n        return this._currentUserV2.promise;\n    }\n    async get(url, query = {}, { fullResponse, prefix = this._prefix, ...rest } = {}) {\n        if (prefix)\n            url = prefix + url;\n        const resp = await this._requestMaker.send({\n            url,\n            method: 'GET',\n            query,\n            ...rest,\n        });\n        return fullResponse ? resp : resp.data;\n    }\n    async delete(url, query = {}, { fullResponse, prefix = this._prefix, ...rest } = {}) {\n        if (prefix)\n            url = prefix + url;\n        const resp = await this._requestMaker.send({\n            url,\n            method: 'DELETE',\n            query,\n            ...rest,\n        });\n        return fullResponse ? resp : resp.data;\n    }\n    async post(url, body, { fullResponse, prefix = this._prefix, ...rest } = {}) {\n        if (prefix)\n            url = prefix + url;\n        const resp = await this._requestMaker.send({\n            url,\n            method: 'POST',\n            body,\n            ...rest,\n        });\n        return fullResponse ? resp : resp.data;\n    }\n    async put(url, body, { fullResponse, prefix = this._prefix, ...rest } = {}) {\n        if (prefix)\n            url = prefix + url;\n        const resp = await this._requestMaker.send({\n            url,\n            method: 'PUT',\n            body,\n            ...rest,\n        });\n        return fullResponse ? resp : resp.data;\n    }\n    async patch(url, body, { fullResponse, prefix = this._prefix, ...rest } = {}) {\n        if (prefix)\n            url = prefix + url;\n        const resp = await this._requestMaker.send({\n            url,\n            method: 'PATCH',\n            body,\n            ...rest,\n        });\n        return fullResponse ? resp : resp.data;\n    }\n    getStream(url, query, { prefix = this._prefix, ...rest } = {}) {\n        return this._requestMaker.sendStream({\n            url: prefix ? prefix + url : url,\n            method: 'GET',\n            query,\n            ...rest,\n        });\n    }\n    postStream(url, body, { prefix = this._prefix, ...rest } = {}) {\n        return this._requestMaker.sendStream({\n            url: prefix ? prefix + url : url,\n            method: 'POST',\n            body,\n            ...rest,\n        });\n    }\n}\nexports.default = TwitterApiBase;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,qBAAqB,GAAGC,OAAO,CAAC,qCAAD,CAArC;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;AACA;AACA;AACA;;;AACA,MAAMG,cAAN,CAAqB;EACjBC,WAAW,CAACC,KAAD,EAAuB;IAAA,IAAfC,QAAe,uEAAJ,EAAI;IAC9B,KAAKC,YAAL,GAAoB,IAApB;IACA,KAAKC,cAAL,GAAsB,IAAtB;;IACA,IAAIH,KAAK,YAAYF,cAArB,EAAqC;MACjC,KAAKM,aAAL,GAAqBJ,KAAK,CAACI,aAA3B;IACH,CAFD,MAGK;MACD,KAAKA,aAAL,GAAqB,IAAIV,qBAAqB,CAACW,kBAA1B,CAA6CJ,QAA7C,CAArB;;MACA,KAAKG,aAAL,CAAmBE,eAAnB,CAAmCN,KAAnC;IACH;EACJ;EACD;;;EACAO,SAAS,CAACC,MAAD,EAAS;IACd,KAAKC,OAAL,GAAeD,MAAf;EACH;;EACDE,eAAe,CAACF,MAAD,EAAS;IACpB,MAAMG,KAAK,GAAG,KAAKZ,WAAL,CAAiB,IAAjB,CAAd;IACAY,KAAK,CAACJ,SAAN,CAAgBC,MAAhB;IACA,OAAOG,KAAP;EACH;;EACDC,eAAe,GAAG;IACd,OAAO,KAAKR,aAAL,CAAmBQ,eAAnB,EAAP;EACH;EACD;;;EACAC,UAAU,GAAG;IACT,OAAO,KAAKT,aAAL,CAAmBS,UAAnB,EAAP;EACH;;EACDC,eAAe,CAACC,IAAD,EAAO;IAClB,OAAO,KAAKF,UAAL,GAAkBG,IAAlB,CAAuBC,MAAM,IAAIA,MAAM,YAAYF,IAAnD,CAAP;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIG,eAAe,CAACC,QAAD,EAAW;IACtB,IAAIC,EAAJ;;IACA,IAAI,KAAKC,yBAAL,CAA+BF,QAA/B,CAAJ,EAA8C;MAC1C,OAAO,KAAP;IACH;;IACD,OAAO,CAAC,CAACC,EAAE,GAAG,KAAKE,sBAAL,CAA4BH,QAA5B,CAAN,MAAiD,IAAjD,IAAyDC,EAAE,KAAK,KAAK,CAArE,GAAyE,KAAK,CAA9E,GAAkFA,EAAE,CAACG,SAAtF,MAAqG,CAA5G;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIF,yBAAyB,CAACF,QAAD,EAAW;IAChC,MAAMK,SAAS,GAAG,KAAKF,sBAAL,CAA4BH,QAA5B,CAAlB;;IACA,IAAIK,SAAS,KAAKC,SAAlB,EAA6B;MACzB,OAAO,IAAP;IACH,CAJ+B,CAKhC;;;IACA,OAAQD,SAAS,CAACE,KAAV,GAAkB,IAAnB,GAA2BC,IAAI,CAACC,GAAL,EAAlC;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIN,sBAAsB,CAACH,QAAD,EAAW;IAC7B,MAAMU,kBAAkB,GAAGV,QAAQ,CAACW,KAAT,CAAe,cAAf,IAAiCX,QAAjC,GAA6C,KAAKV,OAAL,GAAeU,QAAvF;IACA,OAAO,KAAKf,aAAL,CAAmB2B,aAAnB,GAAmCF,kBAAnC,CAAP;EACH;EACD;;EACA;;;EACAG,oBAAoB,GAAqB;IAAA,IAApBC,UAAoB,uEAAP,KAAO;;IACrC,IAAI,CAACA,UAAD,IAAe,KAAK/B,YAAxB,EAAsC;MAClC,IAAI,KAAKA,YAAL,CAAkBT,KAAtB,EAA6B;QACzB,OAAOyC,OAAO,CAACC,OAAR,CAAgB,KAAKjC,YAAL,CAAkBT,KAAlC,CAAP;MACH;;MACD,OAAO,KAAKS,YAAL,CAAkBkC,OAAzB;IACH;;IACD,KAAKlC,YAAL,GAAoB,CAAC,GAAGN,SAAS,CAACyC,aAAd,EAA6B,MAAM,KAAKC,GAAL,CAAS,iCAAT,EAA4C;MAAEC,UAAU,EAAE;IAAd,CAA5C,EAAwE;MAAE/B,MAAM,EAAEX,SAAS,CAAC2C;IAApB,CAAxE,CAAnC,CAApB;IACA,OAAO,KAAKtC,YAAL,CAAkBkC,OAAzB;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIK,sBAAsB,GAAqB;IAAA,IAApBR,UAAoB,uEAAP,KAAO;;IACvC,IAAI,CAACA,UAAD,IAAe,KAAK9B,cAAxB,EAAwC;MACpC,IAAI,KAAKA,cAAL,CAAoBV,KAAxB,EAA+B;QAC3B,OAAOyC,OAAO,CAACC,OAAR,CAAgB,KAAKhC,cAAL,CAAoBV,KAApC,CAAP;MACH;;MACD,OAAO,KAAKU,cAAL,CAAoBiC,OAA3B;IACH;;IACD,KAAKjC,cAAL,GAAsB,CAAC,GAAGP,SAAS,CAACyC,aAAd,EAA6B,MAAM,KAAKC,GAAL,CAAS,UAAT,EAAqBb,SAArB,EAAgC;MAAEjB,MAAM,EAAEX,SAAS,CAAC6C;IAApB,CAAhC,CAAnC,CAAtB;IACA,OAAO,KAAKvC,cAAL,CAAoBiC,OAA3B;EACH;;EACQ,MAAHE,GAAG,CAACK,GAAD,EAAyE;IAAA,IAAnEC,KAAmE,uEAA3D,EAA2D;IAAA,IAAvD;MAAEC,YAAF;MAAgBrC,MAAM,GAAG,KAAKC,OAA9B;MAAuC,GAAGqC;IAA1C,CAAuD,uEAAJ,EAAI;IAC9E,IAAItC,MAAJ,EACImC,GAAG,GAAGnC,MAAM,GAAGmC,GAAf;IACJ,MAAMI,IAAI,GAAG,MAAM,KAAK3C,aAAL,CAAmB4C,IAAnB,CAAwB;MACvCL,GADuC;MAEvCM,MAAM,EAAE,KAF+B;MAGvCL,KAHuC;MAIvC,GAAGE;IAJoC,CAAxB,CAAnB;IAMA,OAAOD,YAAY,GAAGE,IAAH,GAAUA,IAAI,CAACG,IAAlC;EACH;;EACW,MAANC,MAAM,CAACR,GAAD,EAAyE;IAAA,IAAnEC,KAAmE,uEAA3D,EAA2D;IAAA,IAAvD;MAAEC,YAAF;MAAgBrC,MAAM,GAAG,KAAKC,OAA9B;MAAuC,GAAGqC;IAA1C,CAAuD,uEAAJ,EAAI;IACjF,IAAItC,MAAJ,EACImC,GAAG,GAAGnC,MAAM,GAAGmC,GAAf;IACJ,MAAMI,IAAI,GAAG,MAAM,KAAK3C,aAAL,CAAmB4C,IAAnB,CAAwB;MACvCL,GADuC;MAEvCM,MAAM,EAAE,QAF+B;MAGvCL,KAHuC;MAIvC,GAAGE;IAJoC,CAAxB,CAAnB;IAMA,OAAOD,YAAY,GAAGE,IAAH,GAAUA,IAAI,CAACG,IAAlC;EACH;;EACS,MAAJE,IAAI,CAACT,GAAD,EAAMU,IAAN,EAAmE;IAAA,IAAvD;MAAER,YAAF;MAAgBrC,MAAM,GAAG,KAAKC,OAA9B;MAAuC,GAAGqC;IAA1C,CAAuD,uEAAJ,EAAI;IACzE,IAAItC,MAAJ,EACImC,GAAG,GAAGnC,MAAM,GAAGmC,GAAf;IACJ,MAAMI,IAAI,GAAG,MAAM,KAAK3C,aAAL,CAAmB4C,IAAnB,CAAwB;MACvCL,GADuC;MAEvCM,MAAM,EAAE,MAF+B;MAGvCI,IAHuC;MAIvC,GAAGP;IAJoC,CAAxB,CAAnB;IAMA,OAAOD,YAAY,GAAGE,IAAH,GAAUA,IAAI,CAACG,IAAlC;EACH;;EACQ,MAAHI,GAAG,CAACX,GAAD,EAAMU,IAAN,EAAmE;IAAA,IAAvD;MAAER,YAAF;MAAgBrC,MAAM,GAAG,KAAKC,OAA9B;MAAuC,GAAGqC;IAA1C,CAAuD,uEAAJ,EAAI;IACxE,IAAItC,MAAJ,EACImC,GAAG,GAAGnC,MAAM,GAAGmC,GAAf;IACJ,MAAMI,IAAI,GAAG,MAAM,KAAK3C,aAAL,CAAmB4C,IAAnB,CAAwB;MACvCL,GADuC;MAEvCM,MAAM,EAAE,KAF+B;MAGvCI,IAHuC;MAIvC,GAAGP;IAJoC,CAAxB,CAAnB;IAMA,OAAOD,YAAY,GAAGE,IAAH,GAAUA,IAAI,CAACG,IAAlC;EACH;;EACU,MAALK,KAAK,CAACZ,GAAD,EAAMU,IAAN,EAAmE;IAAA,IAAvD;MAAER,YAAF;MAAgBrC,MAAM,GAAG,KAAKC,OAA9B;MAAuC,GAAGqC;IAA1C,CAAuD,uEAAJ,EAAI;IAC1E,IAAItC,MAAJ,EACImC,GAAG,GAAGnC,MAAM,GAAGmC,GAAf;IACJ,MAAMI,IAAI,GAAG,MAAM,KAAK3C,aAAL,CAAmB4C,IAAnB,CAAwB;MACvCL,GADuC;MAEvCM,MAAM,EAAE,OAF+B;MAGvCI,IAHuC;MAIvC,GAAGP;IAJoC,CAAxB,CAAnB;IAMA,OAAOD,YAAY,GAAGE,IAAH,GAAUA,IAAI,CAACG,IAAlC;EACH;;EACDM,SAAS,CAACb,GAAD,EAAMC,KAAN,EAAsD;IAAA,IAAzC;MAAEpC,MAAM,GAAG,KAAKC,OAAhB;MAAyB,GAAGqC;IAA5B,CAAyC,uEAAJ,EAAI;IAC3D,OAAO,KAAK1C,aAAL,CAAmBqD,UAAnB,CAA8B;MACjCd,GAAG,EAAEnC,MAAM,GAAGA,MAAM,GAAGmC,GAAZ,GAAkBA,GADI;MAEjCM,MAAM,EAAE,KAFyB;MAGjCL,KAHiC;MAIjC,GAAGE;IAJ8B,CAA9B,CAAP;EAMH;;EACDY,UAAU,CAACf,GAAD,EAAMU,IAAN,EAAqD;IAAA,IAAzC;MAAE7C,MAAM,GAAG,KAAKC,OAAhB;MAAyB,GAAGqC;IAA5B,CAAyC,uEAAJ,EAAI;IAC3D,OAAO,KAAK1C,aAAL,CAAmBqD,UAAnB,CAA8B;MACjCd,GAAG,EAAEnC,MAAM,GAAGA,MAAM,GAAGmC,GAAZ,GAAkBA,GADI;MAEjCM,MAAM,EAAE,MAFyB;MAGjCI,IAHiC;MAIjC,GAAGP;IAJ8B,CAA9B,CAAP;EAMH;;AAxKgB;;AA0KrBtD,OAAO,CAACmE,OAAR,GAAkB7D,cAAlB"},"metadata":{},"sourceType":"script"}