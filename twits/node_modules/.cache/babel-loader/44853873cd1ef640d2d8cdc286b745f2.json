{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _1 = __importDefault(require(\".\"));\n\nconst client_base_1 = __importDefault(require(\"../client.base\"));\n\nconst client_v1_read_1 = __importDefault(require(\"../v1/client.v1.read\"));\n\nconst client_v2_read_1 = __importDefault(require(\"../v2/client.v2.read\"));\n\nconst oauth2_helper_1 = require(\"../client-mixins/oauth2.helper\");\n\nconst request_param_helper_1 = __importDefault(require(\"../client-mixins/request-param.helper\"));\n/**\n * Twitter v1.1 and v2 API client.\n */\n\n\nclass TwitterApiReadOnly extends client_base_1.default {\n  /* Direct access to subclients */\n  get v1() {\n    if (this._v1) return this._v1;\n    return this._v1 = new client_v1_read_1.default(this);\n  }\n\n  get v2() {\n    if (this._v2) return this._v2;\n    return this._v2 = new client_v2_read_1.default(this);\n  }\n  /**\n   * Fetch and cache current user.\n   * This method can only be called with a OAuth 1.0a user authentication.\n   *\n   * You can use this method to test if authentication was successful.\n   * Next calls to this methods will use the cached user, unless `forceFetch: true` is given.\n   */\n\n\n  async currentUser() {\n    let forceFetch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return await this.getCurrentUserObject(forceFetch);\n  }\n  /**\n   * Fetch and cache current user.\n   * This method can only be called with a OAuth 1.0a or OAuth2 user authentication.\n   *\n   * This can only be the slimest available `UserV2` object, with only id, name and username properties defined.\n   * To get a customized `UserV2Result`, use `.v2.me()`\n   *\n   * You can use this method to test if authentication was successful.\n   * Next calls to this methods will use the cached user, unless `forceFetch: true` is given.\n   *\n   * OAuth2 scopes: `tweet.read` & `users.read`\n   */\n\n\n  async currentUserV2() {\n    let forceFetch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return await this.getCurrentUserV2Object(forceFetch);\n  }\n  /* Shortcuts to endpoints */\n\n\n  search(what, options) {\n    return this.v2.search(what, options);\n  }\n  /* Authentication */\n\n  /**\n   * Generate the OAuth request token link for user-based OAuth 1.0 auth.\n   *\n   * ```ts\n   * // Instanciate TwitterApi with consumer keys\n   * const client = new TwitterApi({ appKey: 'consumer_key', appSecret: 'consumer_secret' });\n   *\n   * const tokenRequest = await client.generateAuthLink('oob-or-your-callback-url');\n   * // redirect end-user to tokenRequest.url\n   *\n   * // Save tokenRequest.oauth_token_secret somewhere, it will be needed for next auth step.\n   * ```\n   */\n\n\n  async generateAuthLink() {\n    let oauth_callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'oob';\n    let {\n      authAccessType,\n      linkMode = 'authenticate',\n      forceLogin,\n      screenName\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const oauthResult = await this.post('https://api.twitter.com/oauth/request_token', {\n      oauth_callback,\n      x_auth_access_type: authAccessType\n    });\n    let url = `https://api.twitter.com/oauth/${linkMode}?oauth_token=${encodeURIComponent(oauthResult.oauth_token)}`;\n\n    if (forceLogin !== undefined) {\n      url += `&force_login=${encodeURIComponent(forceLogin)}`;\n    }\n\n    if (screenName !== undefined) {\n      url += `&screen_name=${encodeURIComponent(screenName)}`;\n    }\n\n    if (this._requestMaker.hasPlugins()) {\n      this._requestMaker.applyPluginMethod('onOAuth1RequestToken', {\n        client: this._requestMaker,\n        url,\n        oauthResult\n      });\n    }\n\n    return {\n      url,\n      ...oauthResult\n    };\n  }\n  /**\n   * Obtain access to user-based OAuth 1.0 auth.\n   *\n   * After user is redirect from your callback, use obtained oauth_token and oauth_verifier to\n   * instanciate the new TwitterApi instance.\n   *\n   * ```ts\n   * // Use the saved oauth_token_secret associated to oauth_token returned by callback\n   * const requestClient = new TwitterApi({\n   *  appKey: 'consumer_key',\n   *  appSecret: 'consumer_secret',\n   *  accessToken: 'oauth_token',\n   *  accessSecret: 'oauth_token_secret'\n   * });\n   *\n   * // Use oauth_verifier obtained from callback request\n   * const { client: userClient } = await requestClient.login('oauth_verifier');\n   *\n   * // {userClient} is a valid {TwitterApi} object you can use for future requests\n   * ```\n   */\n\n\n  async login(oauth_verifier) {\n    const tokens = this.getActiveTokens();\n    if (tokens.type !== 'oauth-1.0a') throw new Error('You must setup TwitterApi instance with consumer keys to accept OAuth 1.0 login');\n    const oauth_result = await this.post('https://api.twitter.com/oauth/access_token', {\n      oauth_token: tokens.accessToken,\n      oauth_verifier\n    });\n    const client = new _1.default({\n      appKey: tokens.appKey,\n      appSecret: tokens.appSecret,\n      accessToken: oauth_result.oauth_token,\n      accessSecret: oauth_result.oauth_token_secret\n    }, this._requestMaker.clientSettings);\n    return {\n      accessToken: oauth_result.oauth_token,\n      accessSecret: oauth_result.oauth_token_secret,\n      userId: oauth_result.user_id,\n      screenName: oauth_result.screen_name,\n      client\n    };\n  }\n  /**\n   * Enable application-only authentication.\n   *\n   * To make the request, instanciate TwitterApi with consumer and secret.\n   *\n   * ```ts\n   * const requestClient = new TwitterApi({ appKey: 'consumer', appSecret: 'secret' });\n   * const appClient = await requestClient.appLogin();\n   *\n   * // Use {appClient} to make requests\n   * ```\n   */\n\n\n  async appLogin() {\n    const tokens = this.getActiveTokens();\n    if (tokens.type !== 'oauth-1.0a') throw new Error('You must setup TwitterApi instance with consumer keys to accept app-only login'); // Create a client with Basic authentication\n\n    const basicClient = new _1.default({\n      username: tokens.appKey,\n      password: tokens.appSecret\n    });\n    const res = await basicClient.post('https://api.twitter.com/oauth2/token', {\n      grant_type: 'client_credentials'\n    }); // New object with Bearer token\n\n    return new _1.default(res.access_token, this._requestMaker.clientSettings);\n  }\n  /* OAuth 2 user authentication */\n\n  /**\n   * Generate the OAuth request token link for user-based OAuth 2.0 auth.\n   *\n   * - **You can only use v2 API endpoints with this authentication method.**\n   * - **You need to specify which scope you want to have when you create your auth link. Make sure it matches your needs.**\n   *\n   * See https://developer.twitter.com/en/docs/authentication/oauth-2-0/user-access-token for details.\n   *\n   * ```ts\n   * // Instanciate TwitterApi with client ID\n   * const client = new TwitterApi({ clientId: 'yourClientId' });\n   *\n   * // Generate a link to callback URL that will gives a token with tweet+user read access\n   * const link = client.generateOAuth2AuthLink('your-callback-url', { scope: ['tweet.read', 'users.read'] });\n   *\n   * // Extract props from generate link\n   * const { url, state, codeVerifier } = link;\n   *\n   * // redirect end-user to url\n   * // Save `state` and `codeVerifier` somewhere, it will be needed for next auth step.\n   * ```\n   */\n\n\n  generateOAuth2AuthLink(redirectUri) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _a, _b;\n\n    if (!this._requestMaker.clientId) {\n      throw new Error('Twitter API instance is not initialized with client ID. You can find your client ID in Twitter Developer Portal. ' + 'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n    }\n\n    const state = (_a = options.state) !== null && _a !== void 0 ? _a : oauth2_helper_1.OAuth2Helper.generateRandomString(32);\n    const codeVerifier = oauth2_helper_1.OAuth2Helper.getCodeVerifier();\n    const codeChallenge = oauth2_helper_1.OAuth2Helper.getCodeChallengeFromVerifier(codeVerifier);\n    const rawScope = (_b = options.scope) !== null && _b !== void 0 ? _b : '';\n    const scope = Array.isArray(rawScope) ? rawScope.join(' ') : rawScope;\n    const url = new URL('https://twitter.com/i/oauth2/authorize');\n    const query = {\n      response_type: 'code',\n      client_id: this._requestMaker.clientId,\n      redirect_uri: redirectUri,\n      state,\n      code_challenge: codeChallenge,\n      code_challenge_method: 's256',\n      scope\n    };\n    request_param_helper_1.default.addQueryParamsToUrl(url, query);\n    const result = {\n      url: url.toString(),\n      state,\n      codeVerifier,\n      codeChallenge\n    };\n\n    if (this._requestMaker.hasPlugins()) {\n      this._requestMaker.applyPluginMethod('onOAuth2RequestToken', {\n        client: this._requestMaker,\n        result,\n        redirectUri\n      });\n    }\n\n    return result;\n  }\n  /**\n   * Obtain access to user-based OAuth 2.0 auth.\n   *\n   * After user is redirect from your callback, use obtained code to\n   * instanciate the new TwitterApi instance.\n   *\n   * You need to obtain `codeVerifier` from a call to `.generateOAuth2AuthLink`.\n   *\n   * ```ts\n   * // Use the saved codeVerifier associated to state (present in query string of callback)\n   * const requestClient = new TwitterApi({ clientId: 'yourClientId' });\n   *\n   * const { client: userClient, refreshToken } = await requestClient.loginWithOAuth2({\n   *  code: 'codeFromQueryString',\n   *  // the same URL given to generateOAuth2AuthLink\n   *  redirectUri,\n   *  // the verifier returned by generateOAuth2AuthLink\n   *  codeVerifier,\n   * });\n   *\n   * // {userClient} is a valid {TwitterApi} object you can use for future requests\n   * // {refreshToken} is defined if 'offline.access' is in scope.\n   * ```\n   */\n\n\n  async loginWithOAuth2(_ref) {\n    let {\n      code,\n      codeVerifier,\n      redirectUri\n    } = _ref;\n\n    if (!this._requestMaker.clientId) {\n      throw new Error('Twitter API instance is not initialized with client ID. ' + 'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n    }\n\n    const accessTokenResult = await this.post('https://api.twitter.com/2/oauth2/token', {\n      code,\n      code_verifier: codeVerifier,\n      redirect_uri: redirectUri,\n      grant_type: 'authorization_code',\n      client_id: this._requestMaker.clientId,\n      client_secret: this._requestMaker.clientSecret\n    });\n    return this.parseOAuth2AccessTokenResult(accessTokenResult);\n  }\n  /**\n   * Obtain a new access token to user-based OAuth 2.0 auth from a refresh token.\n   *\n   * ```ts\n   * const requestClient = new TwitterApi({ clientId: 'yourClientId' });\n   *\n   * const { client: userClient } = await requestClient.refreshOAuth2Token('refreshToken');\n   * // {userClient} is a valid {TwitterApi} object you can use for future requests\n   * ```\n   */\n\n\n  async refreshOAuth2Token(refreshToken) {\n    if (!this._requestMaker.clientId) {\n      throw new Error('Twitter API instance is not initialized with client ID. ' + 'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n    }\n\n    const accessTokenResult = await this.post('https://api.twitter.com/2/oauth2/token', {\n      refresh_token: refreshToken,\n      grant_type: 'refresh_token',\n      client_id: this._requestMaker.clientId,\n      client_secret: this._requestMaker.clientSecret\n    });\n    return this.parseOAuth2AccessTokenResult(accessTokenResult);\n  }\n  /**\n   * Revoke a single user-based OAuth 2.0 token.\n   *\n   * You must specify its source, access token (directly after login)\n   * or refresh token (if you've called `.refreshOAuth2Token` before).\n   */\n\n\n  async revokeOAuth2Token(token) {\n    let tokenType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'access_token';\n\n    if (!this._requestMaker.clientId) {\n      throw new Error('Twitter API instance is not initialized with client ID. ' + 'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n    }\n\n    return await this.post('https://api.twitter.com/2/oauth2/revoke', {\n      client_id: this._requestMaker.clientId,\n      client_secret: this._requestMaker.clientSecret,\n      token,\n      token_type_hint: tokenType\n    });\n  }\n\n  parseOAuth2AccessTokenResult(result) {\n    const client = new _1.default(result.access_token, this._requestMaker.clientSettings);\n    const scope = result.scope.split(' ').filter(e => e);\n    return {\n      client,\n      expiresIn: result.expires_in,\n      accessToken: result.access_token,\n      scope,\n      refreshToken: result.refresh_token\n    };\n  }\n\n}\n\nexports.default = TwitterApiReadOnly;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","_1","require","client_base_1","client_v1_read_1","client_v2_read_1","oauth2_helper_1","request_param_helper_1","TwitterApiReadOnly","default","v1","_v1","v2","_v2","currentUser","forceFetch","getCurrentUserObject","currentUserV2","getCurrentUserV2Object","search","what","options","generateAuthLink","oauth_callback","authAccessType","linkMode","forceLogin","screenName","oauthResult","post","x_auth_access_type","url","encodeURIComponent","oauth_token","undefined","_requestMaker","hasPlugins","applyPluginMethod","client","login","oauth_verifier","tokens","getActiveTokens","type","Error","oauth_result","accessToken","appKey","appSecret","accessSecret","oauth_token_secret","clientSettings","userId","user_id","screen_name","appLogin","basicClient","username","password","res","grant_type","access_token","generateOAuth2AuthLink","redirectUri","_a","_b","clientId","state","OAuth2Helper","generateRandomString","codeVerifier","getCodeVerifier","codeChallenge","getCodeChallengeFromVerifier","rawScope","scope","Array","isArray","join","URL","query","response_type","client_id","redirect_uri","code_challenge","code_challenge_method","addQueryParamsToUrl","result","toString","loginWithOAuth2","code","accessTokenResult","code_verifier","client_secret","clientSecret","parseOAuth2AccessTokenResult","refreshOAuth2Token","refreshToken","refresh_token","revokeOAuth2Token","token","tokenType","token_type_hint","split","filter","e","expiresIn","expires_in"],"sources":["/Users/user/Sites/twits_app/twits/node_modules/twitter-api-v2/dist/client/readonly.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _1 = __importDefault(require(\".\"));\nconst client_base_1 = __importDefault(require(\"../client.base\"));\nconst client_v1_read_1 = __importDefault(require(\"../v1/client.v1.read\"));\nconst client_v2_read_1 = __importDefault(require(\"../v2/client.v2.read\"));\nconst oauth2_helper_1 = require(\"../client-mixins/oauth2.helper\");\nconst request_param_helper_1 = __importDefault(require(\"../client-mixins/request-param.helper\"));\n/**\n * Twitter v1.1 and v2 API client.\n */\nclass TwitterApiReadOnly extends client_base_1.default {\n    /* Direct access to subclients */\n    get v1() {\n        if (this._v1)\n            return this._v1;\n        return this._v1 = new client_v1_read_1.default(this);\n    }\n    get v2() {\n        if (this._v2)\n            return this._v2;\n        return this._v2 = new client_v2_read_1.default(this);\n    }\n    /**\n     * Fetch and cache current user.\n     * This method can only be called with a OAuth 1.0a user authentication.\n     *\n     * You can use this method to test if authentication was successful.\n     * Next calls to this methods will use the cached user, unless `forceFetch: true` is given.\n     */\n    async currentUser(forceFetch = false) {\n        return await this.getCurrentUserObject(forceFetch);\n    }\n    /**\n     * Fetch and cache current user.\n     * This method can only be called with a OAuth 1.0a or OAuth2 user authentication.\n     *\n     * This can only be the slimest available `UserV2` object, with only id, name and username properties defined.\n     * To get a customized `UserV2Result`, use `.v2.me()`\n     *\n     * You can use this method to test if authentication was successful.\n     * Next calls to this methods will use the cached user, unless `forceFetch: true` is given.\n     *\n     * OAuth2 scopes: `tweet.read` & `users.read`\n     */\n    async currentUserV2(forceFetch = false) {\n        return await this.getCurrentUserV2Object(forceFetch);\n    }\n    /* Shortcuts to endpoints */\n    search(what, options) {\n        return this.v2.search(what, options);\n    }\n    /* Authentication */\n    /**\n     * Generate the OAuth request token link for user-based OAuth 1.0 auth.\n     *\n     * ```ts\n     * // Instanciate TwitterApi with consumer keys\n     * const client = new TwitterApi({ appKey: 'consumer_key', appSecret: 'consumer_secret' });\n     *\n     * const tokenRequest = await client.generateAuthLink('oob-or-your-callback-url');\n     * // redirect end-user to tokenRequest.url\n     *\n     * // Save tokenRequest.oauth_token_secret somewhere, it will be needed for next auth step.\n     * ```\n     */\n    async generateAuthLink(oauth_callback = 'oob', { authAccessType, linkMode = 'authenticate', forceLogin, screenName, } = {}) {\n        const oauthResult = await this.post('https://api.twitter.com/oauth/request_token', { oauth_callback, x_auth_access_type: authAccessType });\n        let url = `https://api.twitter.com/oauth/${linkMode}?oauth_token=${encodeURIComponent(oauthResult.oauth_token)}`;\n        if (forceLogin !== undefined) {\n            url += `&force_login=${encodeURIComponent(forceLogin)}`;\n        }\n        if (screenName !== undefined) {\n            url += `&screen_name=${encodeURIComponent(screenName)}`;\n        }\n        if (this._requestMaker.hasPlugins()) {\n            this._requestMaker.applyPluginMethod('onOAuth1RequestToken', {\n                client: this._requestMaker,\n                url,\n                oauthResult,\n            });\n        }\n        return {\n            url,\n            ...oauthResult,\n        };\n    }\n    /**\n     * Obtain access to user-based OAuth 1.0 auth.\n     *\n     * After user is redirect from your callback, use obtained oauth_token and oauth_verifier to\n     * instanciate the new TwitterApi instance.\n     *\n     * ```ts\n     * // Use the saved oauth_token_secret associated to oauth_token returned by callback\n     * const requestClient = new TwitterApi({\n     *  appKey: 'consumer_key',\n     *  appSecret: 'consumer_secret',\n     *  accessToken: 'oauth_token',\n     *  accessSecret: 'oauth_token_secret'\n     * });\n     *\n     * // Use oauth_verifier obtained from callback request\n     * const { client: userClient } = await requestClient.login('oauth_verifier');\n     *\n     * // {userClient} is a valid {TwitterApi} object you can use for future requests\n     * ```\n     */\n    async login(oauth_verifier) {\n        const tokens = this.getActiveTokens();\n        if (tokens.type !== 'oauth-1.0a')\n            throw new Error('You must setup TwitterApi instance with consumer keys to accept OAuth 1.0 login');\n        const oauth_result = await this.post('https://api.twitter.com/oauth/access_token', { oauth_token: tokens.accessToken, oauth_verifier });\n        const client = new _1.default({\n            appKey: tokens.appKey,\n            appSecret: tokens.appSecret,\n            accessToken: oauth_result.oauth_token,\n            accessSecret: oauth_result.oauth_token_secret,\n        }, this._requestMaker.clientSettings);\n        return {\n            accessToken: oauth_result.oauth_token,\n            accessSecret: oauth_result.oauth_token_secret,\n            userId: oauth_result.user_id,\n            screenName: oauth_result.screen_name,\n            client,\n        };\n    }\n    /**\n     * Enable application-only authentication.\n     *\n     * To make the request, instanciate TwitterApi with consumer and secret.\n     *\n     * ```ts\n     * const requestClient = new TwitterApi({ appKey: 'consumer', appSecret: 'secret' });\n     * const appClient = await requestClient.appLogin();\n     *\n     * // Use {appClient} to make requests\n     * ```\n     */\n    async appLogin() {\n        const tokens = this.getActiveTokens();\n        if (tokens.type !== 'oauth-1.0a')\n            throw new Error('You must setup TwitterApi instance with consumer keys to accept app-only login');\n        // Create a client with Basic authentication\n        const basicClient = new _1.default({ username: tokens.appKey, password: tokens.appSecret });\n        const res = await basicClient.post('https://api.twitter.com/oauth2/token', { grant_type: 'client_credentials' });\n        // New object with Bearer token\n        return new _1.default(res.access_token, this._requestMaker.clientSettings);\n    }\n    /* OAuth 2 user authentication */\n    /**\n     * Generate the OAuth request token link for user-based OAuth 2.0 auth.\n     *\n     * - **You can only use v2 API endpoints with this authentication method.**\n     * - **You need to specify which scope you want to have when you create your auth link. Make sure it matches your needs.**\n     *\n     * See https://developer.twitter.com/en/docs/authentication/oauth-2-0/user-access-token for details.\n     *\n     * ```ts\n     * // Instanciate TwitterApi with client ID\n     * const client = new TwitterApi({ clientId: 'yourClientId' });\n     *\n     * // Generate a link to callback URL that will gives a token with tweet+user read access\n     * const link = client.generateOAuth2AuthLink('your-callback-url', { scope: ['tweet.read', 'users.read'] });\n     *\n     * // Extract props from generate link\n     * const { url, state, codeVerifier } = link;\n     *\n     * // redirect end-user to url\n     * // Save `state` and `codeVerifier` somewhere, it will be needed for next auth step.\n     * ```\n     */\n    generateOAuth2AuthLink(redirectUri, options = {}) {\n        var _a, _b;\n        if (!this._requestMaker.clientId) {\n            throw new Error('Twitter API instance is not initialized with client ID. You can find your client ID in Twitter Developer Portal. ' +\n                'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n        }\n        const state = (_a = options.state) !== null && _a !== void 0 ? _a : oauth2_helper_1.OAuth2Helper.generateRandomString(32);\n        const codeVerifier = oauth2_helper_1.OAuth2Helper.getCodeVerifier();\n        const codeChallenge = oauth2_helper_1.OAuth2Helper.getCodeChallengeFromVerifier(codeVerifier);\n        const rawScope = (_b = options.scope) !== null && _b !== void 0 ? _b : '';\n        const scope = Array.isArray(rawScope) ? rawScope.join(' ') : rawScope;\n        const url = new URL('https://twitter.com/i/oauth2/authorize');\n        const query = {\n            response_type: 'code',\n            client_id: this._requestMaker.clientId,\n            redirect_uri: redirectUri,\n            state,\n            code_challenge: codeChallenge,\n            code_challenge_method: 's256',\n            scope,\n        };\n        request_param_helper_1.default.addQueryParamsToUrl(url, query);\n        const result = {\n            url: url.toString(),\n            state,\n            codeVerifier,\n            codeChallenge,\n        };\n        if (this._requestMaker.hasPlugins()) {\n            this._requestMaker.applyPluginMethod('onOAuth2RequestToken', {\n                client: this._requestMaker,\n                result,\n                redirectUri,\n            });\n        }\n        return result;\n    }\n    /**\n     * Obtain access to user-based OAuth 2.0 auth.\n     *\n     * After user is redirect from your callback, use obtained code to\n     * instanciate the new TwitterApi instance.\n     *\n     * You need to obtain `codeVerifier` from a call to `.generateOAuth2AuthLink`.\n     *\n     * ```ts\n     * // Use the saved codeVerifier associated to state (present in query string of callback)\n     * const requestClient = new TwitterApi({ clientId: 'yourClientId' });\n     *\n     * const { client: userClient, refreshToken } = await requestClient.loginWithOAuth2({\n     *  code: 'codeFromQueryString',\n     *  // the same URL given to generateOAuth2AuthLink\n     *  redirectUri,\n     *  // the verifier returned by generateOAuth2AuthLink\n     *  codeVerifier,\n     * });\n     *\n     * // {userClient} is a valid {TwitterApi} object you can use for future requests\n     * // {refreshToken} is defined if 'offline.access' is in scope.\n     * ```\n     */\n    async loginWithOAuth2({ code, codeVerifier, redirectUri }) {\n        if (!this._requestMaker.clientId) {\n            throw new Error('Twitter API instance is not initialized with client ID. ' +\n                'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n        }\n        const accessTokenResult = await this.post('https://api.twitter.com/2/oauth2/token', {\n            code,\n            code_verifier: codeVerifier,\n            redirect_uri: redirectUri,\n            grant_type: 'authorization_code',\n            client_id: this._requestMaker.clientId,\n            client_secret: this._requestMaker.clientSecret,\n        });\n        return this.parseOAuth2AccessTokenResult(accessTokenResult);\n    }\n    /**\n     * Obtain a new access token to user-based OAuth 2.0 auth from a refresh token.\n     *\n     * ```ts\n     * const requestClient = new TwitterApi({ clientId: 'yourClientId' });\n     *\n     * const { client: userClient } = await requestClient.refreshOAuth2Token('refreshToken');\n     * // {userClient} is a valid {TwitterApi} object you can use for future requests\n     * ```\n     */\n    async refreshOAuth2Token(refreshToken) {\n        if (!this._requestMaker.clientId) {\n            throw new Error('Twitter API instance is not initialized with client ID. ' +\n                'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n        }\n        const accessTokenResult = await this.post('https://api.twitter.com/2/oauth2/token', {\n            refresh_token: refreshToken,\n            grant_type: 'refresh_token',\n            client_id: this._requestMaker.clientId,\n            client_secret: this._requestMaker.clientSecret,\n        });\n        return this.parseOAuth2AccessTokenResult(accessTokenResult);\n    }\n    /**\n     * Revoke a single user-based OAuth 2.0 token.\n     *\n     * You must specify its source, access token (directly after login)\n     * or refresh token (if you've called `.refreshOAuth2Token` before).\n     */\n    async revokeOAuth2Token(token, tokenType = 'access_token') {\n        if (!this._requestMaker.clientId) {\n            throw new Error('Twitter API instance is not initialized with client ID. ' +\n                'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n        }\n        return await this.post('https://api.twitter.com/2/oauth2/revoke', {\n            client_id: this._requestMaker.clientId,\n            client_secret: this._requestMaker.clientSecret,\n            token,\n            token_type_hint: tokenType,\n        });\n    }\n    parseOAuth2AccessTokenResult(result) {\n        const client = new _1.default(result.access_token, this._requestMaker.clientSettings);\n        const scope = result.scope.split(' ').filter(e => e);\n        return {\n            client,\n            expiresIn: result.expires_in,\n            accessToken: result.access_token,\n            scope,\n            refreshToken: result.refresh_token,\n        };\n    }\n}\nexports.default = TwitterApiReadOnly;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}