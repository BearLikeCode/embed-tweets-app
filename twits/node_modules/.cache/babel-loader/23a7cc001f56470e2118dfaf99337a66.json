{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TwitterApiv1 = void 0;\n\nconst globals_1 = require(\"../globals\");\n\nconst dm_paginator_v1_1 = require(\"../paginators/dm.paginator.v1\");\n\nconst types_1 = require(\"../types\");\n\nconst client_v1_write_1 = __importDefault(require(\"./client.v1.write\"));\n/**\n * Twitter v1.1 API client with read/write/DMs rights.\n */\n\n\nclass TwitterApiv1 extends client_v1_write_1.default {\n  constructor() {\n    super(...arguments);\n    this._prefix = globals_1.API_V1_1_PREFIX;\n  }\n  /**\n   * Get a client with read/write rights.\n   */\n\n\n  get readWrite() {\n    return this;\n  }\n  /* Direct messages */\n  // Part: Sending and receiving events\n\n  /**\n   * Publishes a new message_create event resulting in a Direct Message sent to a specified user from the authenticating user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event\n   */\n\n\n  sendDm(_ref) {\n    let {\n      recipient_id,\n      custom_profile_id,\n      ...params\n    } = _ref;\n    const args = {\n      event: {\n        type: types_1.EDirectMessageEventTypeV1.Create,\n        [types_1.EDirectMessageEventTypeV1.Create]: {\n          target: {\n            recipient_id\n          },\n          message_data: params\n        }\n      }\n    };\n\n    if (custom_profile_id) {\n      args.event[types_1.EDirectMessageEventTypeV1.Create].custom_profile_id = custom_profile_id;\n    }\n\n    return this.post('direct_messages/events/new.json', args, {\n      forceBodyMode: 'json'\n    });\n  }\n  /**\n   * Returns a single Direct Message event by the given id.\n   *\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event\n   */\n\n\n  getDmEvent(id) {\n    return this.get('direct_messages/events/show.json', {\n      id\n    });\n  }\n  /**\n   * Deletes the direct message specified in the required ID parameter.\n   * The authenticating user must be the recipient of the specified direct message.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/delete-message-event\n   */\n\n\n  deleteDm(id) {\n    return this.delete('direct_messages/events/destroy.json', {\n      id\n    });\n  }\n  /**\n   * Returns all Direct Message events (both sent and received) within the last 30 days.\n   * Sorted in reverse-chronological order.\n   *\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/list-events\n   */\n\n\n  async listDmEvents() {\n    let args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = { ...args\n    };\n    const initialRq = await this.get('direct_messages/events/list.json', queryParams, {\n      fullResponse: true\n    });\n    return new dm_paginator_v1_1.DmEventsV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  } // Part: Welcome messages (events)\n\n  /**\n   * Creates a new Welcome Message that will be stored and sent in the future from the authenticating user in defined circumstances.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/new-welcome-message\n   */\n\n\n  newWelcomeDm(name, data) {\n    const args = {\n      [types_1.EDirectMessageEventTypeV1.WelcomeCreate]: {\n        name,\n        message_data: data\n      }\n    };\n    return this.post('direct_messages/welcome_messages/new.json', args, {\n      forceBodyMode: 'json'\n    });\n  }\n  /**\n   * Returns a Welcome Message by the given id.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/get-welcome-message\n   */\n\n\n  getWelcomeDm(id) {\n    return this.get('direct_messages/welcome_messages/show.json', {\n      id\n    });\n  }\n  /**\n   * Deletes a Welcome Message by the given id.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/delete-welcome-message\n   */\n\n\n  deleteWelcomeDm(id) {\n    return this.delete('direct_messages/welcome_messages/destroy.json', {\n      id\n    });\n  }\n  /**\n   * Updates a Welcome Message by the given ID.\n   * Updates to the welcome_message object are atomic.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/update-welcome-message\n   */\n\n\n  updateWelcomeDm(id, data) {\n    const args = {\n      message_data: data\n    };\n    return this.put('direct_messages/welcome_messages/update.json', args, {\n      forceBodyMode: 'json',\n      query: {\n        id\n      }\n    });\n  }\n  /**\n   * Returns all Direct Message events (both sent and received) within the last 30 days.\n   * Sorted in reverse-chronological order.\n   *\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/list-events\n   */\n\n\n  async listWelcomeDms() {\n    let args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = { ...args\n    };\n    const initialRq = await this.get('direct_messages/welcome_messages/list.json', queryParams, {\n      fullResponse: true\n    });\n    return new dm_paginator_v1_1.WelcomeDmV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  } // Part: Welcome message (rules)\n\n  /**\n   * Creates a new Welcome Message Rule that determines which Welcome Message will be shown in a given conversation.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/new-welcome-message-rule\n   */\n\n\n  newWelcomeDmRule(welcomeMessageId) {\n    return this.post('direct_messages/welcome_messages/rules/new.json', {\n      welcome_message_rule: {\n        welcome_message_id: welcomeMessageId\n      }\n    }, {\n      forceBodyMode: 'json'\n    });\n  }\n  /**\n   * Returns a Welcome Message Rule by the given id.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/get-welcome-message-rule\n   */\n\n\n  getWelcomeDmRule(id) {\n    return this.get('direct_messages/welcome_messages/rules/show.json', {\n      id\n    });\n  }\n  /**\n   * Deletes a Welcome Message Rule by the given id.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/delete-welcome-message-rule\n   */\n\n\n  deleteWelcomeDmRule(id) {\n    return this.delete('direct_messages/welcome_messages/rules/destroy.json', {\n      id\n    });\n  }\n  /**\n   * Retrieves all welcome DM rules for this account.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/list-welcome-message-rules\n   */\n\n\n  async listWelcomeDmRules() {\n    let args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = { ...args\n    };\n    return this.get('direct_messages/welcome_messages/rules/list.json', queryParams);\n  }\n  /**\n   * Set the current showed welcome message for logged account ; wrapper for Welcome DM rules.\n   * Test if a rule already exists, delete if any, then create a rule for current message ID.\n   *\n   * If you don't have already a welcome message, create it with `.newWelcomeMessage`.\n   */\n\n\n  async setWelcomeDm(welcomeMessageId) {\n    let deleteAssociatedWelcomeDmWhenDeletingRule = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    var _a;\n\n    const existingRules = await this.listWelcomeDmRules();\n\n    if ((_a = existingRules.welcome_message_rules) === null || _a === void 0 ? void 0 : _a.length) {\n      for (const rule of existingRules.welcome_message_rules) {\n        await this.deleteWelcomeDmRule(rule.id);\n\n        if (deleteAssociatedWelcomeDmWhenDeletingRule) {\n          await this.deleteWelcomeDm(rule.welcome_message_id);\n        }\n      }\n    }\n\n    return this.newWelcomeDmRule(welcomeMessageId);\n  } // Part: Read indicator\n\n  /**\n   * Marks a message as read in the recipient’s Direct Message conversation view with the sender.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/typing-indicator-and-read-receipts/api-reference/new-read-receipt\n   */\n\n\n  markDmAsRead(lastEventId, recipientId) {\n    return this.post('direct_messages/mark_read.json', {\n      last_read_event_id: lastEventId,\n      recipient_id: recipientId\n    }, {\n      forceBodyMode: 'url'\n    });\n  }\n  /**\n   * Displays a visual typing indicator in the recipient’s Direct Message conversation view with the sender.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/typing-indicator-and-read-receipts/api-reference/new-typing-indicator\n   */\n\n\n  indicateDmTyping(recipientId) {\n    return this.post('direct_messages/indicate_typing.json', {\n      recipient_id: recipientId\n    }, {\n      forceBodyMode: 'url'\n    });\n  } // Part: Images\n\n  /**\n   * Get a single image attached to a direct message. TwitterApi client must be logged with OAuth 1.0a.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/message-attachments/guides/retrieving-media\n   */\n\n\n  async downloadDmImage(urlOrDm) {\n    if (typeof urlOrDm !== 'string') {\n      const attachment = urlOrDm[types_1.EDirectMessageEventTypeV1.Create].message_data.attachment;\n\n      if (!attachment) {\n        throw new Error('The given direct message doesn\\'t contain any attachment');\n      }\n\n      urlOrDm = attachment.media_url_https;\n    }\n\n    const data = await this.get(urlOrDm, undefined, {\n      forceParseMode: 'buffer',\n      prefix: ''\n    });\n\n    if (!data.length) {\n      throw new Error('Image not found. Make sure you are logged with credentials able to access direct messages, and check the URL.');\n    }\n\n    return data;\n  }\n\n}\n\nexports.TwitterApiv1 = TwitterApiv1;\nexports.default = TwitterApiv1;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","TwitterApiv1","globals_1","require","dm_paginator_v1_1","types_1","client_v1_write_1","default","constructor","arguments","_prefix","API_V1_1_PREFIX","readWrite","sendDm","recipient_id","custom_profile_id","params","args","event","type","EDirectMessageEventTypeV1","Create","target","message_data","post","forceBodyMode","getDmEvent","id","get","deleteDm","delete","listDmEvents","queryParams","initialRq","fullResponse","DmEventsV1Paginator","realData","data","rateLimit","instance","newWelcomeDm","name","WelcomeCreate","getWelcomeDm","deleteWelcomeDm","updateWelcomeDm","put","query","listWelcomeDms","WelcomeDmV1Paginator","newWelcomeDmRule","welcomeMessageId","welcome_message_rule","welcome_message_id","getWelcomeDmRule","deleteWelcomeDmRule","listWelcomeDmRules","setWelcomeDm","deleteAssociatedWelcomeDmWhenDeletingRule","_a","existingRules","welcome_message_rules","length","rule","markDmAsRead","lastEventId","recipientId","last_read_event_id","indicateDmTyping","downloadDmImage","urlOrDm","attachment","Error","media_url_https","undefined","forceParseMode","prefix"],"sources":["/Users/user/Sites/twits_app/twits/node_modules/twitter-api-v2/dist/v1/client.v1.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TwitterApiv1 = void 0;\nconst globals_1 = require(\"../globals\");\nconst dm_paginator_v1_1 = require(\"../paginators/dm.paginator.v1\");\nconst types_1 = require(\"../types\");\nconst client_v1_write_1 = __importDefault(require(\"./client.v1.write\"));\n/**\n * Twitter v1.1 API client with read/write/DMs rights.\n */\nclass TwitterApiv1 extends client_v1_write_1.default {\n    constructor() {\n        super(...arguments);\n        this._prefix = globals_1.API_V1_1_PREFIX;\n    }\n    /**\n     * Get a client with read/write rights.\n     */\n    get readWrite() {\n        return this;\n    }\n    /* Direct messages */\n    // Part: Sending and receiving events\n    /**\n     * Publishes a new message_create event resulting in a Direct Message sent to a specified user from the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event\n     */\n    sendDm({ recipient_id, custom_profile_id, ...params }) {\n        const args = {\n            event: {\n                type: types_1.EDirectMessageEventTypeV1.Create,\n                [types_1.EDirectMessageEventTypeV1.Create]: {\n                    target: { recipient_id },\n                    message_data: params,\n                },\n            },\n        };\n        if (custom_profile_id) {\n            args.event[types_1.EDirectMessageEventTypeV1.Create].custom_profile_id = custom_profile_id;\n        }\n        return this.post('direct_messages/events/new.json', args, {\n            forceBodyMode: 'json',\n        });\n    }\n    /**\n     * Returns a single Direct Message event by the given id.\n     *\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event\n     */\n    getDmEvent(id) {\n        return this.get('direct_messages/events/show.json', { id });\n    }\n    /**\n     * Deletes the direct message specified in the required ID parameter.\n     * The authenticating user must be the recipient of the specified direct message.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/delete-message-event\n     */\n    deleteDm(id) {\n        return this.delete('direct_messages/events/destroy.json', { id });\n    }\n    /**\n     * Returns all Direct Message events (both sent and received) within the last 30 days.\n     * Sorted in reverse-chronological order.\n     *\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/list-events\n     */\n    async listDmEvents(args = {}) {\n        const queryParams = { ...args };\n        const initialRq = await this.get('direct_messages/events/list.json', queryParams, { fullResponse: true });\n        return new dm_paginator_v1_1.DmEventsV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    // Part: Welcome messages (events)\n    /**\n     * Creates a new Welcome Message that will be stored and sent in the future from the authenticating user in defined circumstances.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/new-welcome-message\n     */\n    newWelcomeDm(name, data) {\n        const args = {\n            [types_1.EDirectMessageEventTypeV1.WelcomeCreate]: {\n                name,\n                message_data: data,\n            },\n        };\n        return this.post('direct_messages/welcome_messages/new.json', args, {\n            forceBodyMode: 'json',\n        });\n    }\n    /**\n     * Returns a Welcome Message by the given id.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/get-welcome-message\n     */\n    getWelcomeDm(id) {\n        return this.get('direct_messages/welcome_messages/show.json', { id });\n    }\n    /**\n     * Deletes a Welcome Message by the given id.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/delete-welcome-message\n     */\n    deleteWelcomeDm(id) {\n        return this.delete('direct_messages/welcome_messages/destroy.json', { id });\n    }\n    /**\n     * Updates a Welcome Message by the given ID.\n     * Updates to the welcome_message object are atomic.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/update-welcome-message\n     */\n    updateWelcomeDm(id, data) {\n        const args = { message_data: data };\n        return this.put('direct_messages/welcome_messages/update.json', args, {\n            forceBodyMode: 'json',\n            query: { id },\n        });\n    }\n    /**\n     * Returns all Direct Message events (both sent and received) within the last 30 days.\n     * Sorted in reverse-chronological order.\n     *\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/list-events\n     */\n    async listWelcomeDms(args = {}) {\n        const queryParams = { ...args };\n        const initialRq = await this.get('direct_messages/welcome_messages/list.json', queryParams, { fullResponse: true });\n        return new dm_paginator_v1_1.WelcomeDmV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    // Part: Welcome message (rules)\n    /**\n     * Creates a new Welcome Message Rule that determines which Welcome Message will be shown in a given conversation.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/new-welcome-message-rule\n     */\n    newWelcomeDmRule(welcomeMessageId) {\n        return this.post('direct_messages/welcome_messages/rules/new.json', {\n            welcome_message_rule: { welcome_message_id: welcomeMessageId },\n        }, {\n            forceBodyMode: 'json',\n        });\n    }\n    /**\n     * Returns a Welcome Message Rule by the given id.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/get-welcome-message-rule\n     */\n    getWelcomeDmRule(id) {\n        return this.get('direct_messages/welcome_messages/rules/show.json', { id });\n    }\n    /**\n     * Deletes a Welcome Message Rule by the given id.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/delete-welcome-message-rule\n     */\n    deleteWelcomeDmRule(id) {\n        return this.delete('direct_messages/welcome_messages/rules/destroy.json', { id });\n    }\n    /**\n     * Retrieves all welcome DM rules for this account.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/list-welcome-message-rules\n     */\n    async listWelcomeDmRules(args = {}) {\n        const queryParams = { ...args };\n        return this.get('direct_messages/welcome_messages/rules/list.json', queryParams);\n    }\n    /**\n     * Set the current showed welcome message for logged account ; wrapper for Welcome DM rules.\n     * Test if a rule already exists, delete if any, then create a rule for current message ID.\n     *\n     * If you don't have already a welcome message, create it with `.newWelcomeMessage`.\n     */\n    async setWelcomeDm(welcomeMessageId, deleteAssociatedWelcomeDmWhenDeletingRule = true) {\n        var _a;\n        const existingRules = await this.listWelcomeDmRules();\n        if ((_a = existingRules.welcome_message_rules) === null || _a === void 0 ? void 0 : _a.length) {\n            for (const rule of existingRules.welcome_message_rules) {\n                await this.deleteWelcomeDmRule(rule.id);\n                if (deleteAssociatedWelcomeDmWhenDeletingRule) {\n                    await this.deleteWelcomeDm(rule.welcome_message_id);\n                }\n            }\n        }\n        return this.newWelcomeDmRule(welcomeMessageId);\n    }\n    // Part: Read indicator\n    /**\n     * Marks a message as read in the recipient’s Direct Message conversation view with the sender.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/typing-indicator-and-read-receipts/api-reference/new-read-receipt\n     */\n    markDmAsRead(lastEventId, recipientId) {\n        return this.post('direct_messages/mark_read.json', {\n            last_read_event_id: lastEventId,\n            recipient_id: recipientId,\n        }, { forceBodyMode: 'url' });\n    }\n    /**\n     * Displays a visual typing indicator in the recipient’s Direct Message conversation view with the sender.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/typing-indicator-and-read-receipts/api-reference/new-typing-indicator\n     */\n    indicateDmTyping(recipientId) {\n        return this.post('direct_messages/indicate_typing.json', {\n            recipient_id: recipientId,\n        }, { forceBodyMode: 'url' });\n    }\n    // Part: Images\n    /**\n     * Get a single image attached to a direct message. TwitterApi client must be logged with OAuth 1.0a.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/message-attachments/guides/retrieving-media\n     */\n    async downloadDmImage(urlOrDm) {\n        if (typeof urlOrDm !== 'string') {\n            const attachment = urlOrDm[types_1.EDirectMessageEventTypeV1.Create].message_data.attachment;\n            if (!attachment) {\n                throw new Error('The given direct message doesn\\'t contain any attachment');\n            }\n            urlOrDm = attachment.media_url_https;\n        }\n        const data = await this.get(urlOrDm, undefined, { forceParseMode: 'buffer', prefix: '' });\n        if (!data.length) {\n            throw new Error('Image not found. Make sure you are logged with credentials able to access direct messages, and check the URL.');\n        }\n        return data;\n    }\n}\nexports.TwitterApiv1 = TwitterApiv1;\nexports.default = TwitterApiv1;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}